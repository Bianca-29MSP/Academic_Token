// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/student/tx.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgRegisterStudent struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgRegisterStudent) Reset()         { *m = MsgRegisterStudent{} }
func (m *MsgRegisterStudent) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterStudent) ProtoMessage()    {}
func (*MsgRegisterStudent) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{2}
}
func (m *MsgRegisterStudent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterStudent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterStudent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterStudent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterStudent.Merge(m, src)
}
func (m *MsgRegisterStudent) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterStudent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterStudent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterStudent proto.InternalMessageInfo

func (m *MsgRegisterStudent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterStudent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterStudent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgRegisterStudentResponse struct {
}

func (m *MsgRegisterStudentResponse) Reset()         { *m = MsgRegisterStudentResponse{} }
func (m *MsgRegisterStudentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterStudentResponse) ProtoMessage()    {}
func (*MsgRegisterStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{3}
}
func (m *MsgRegisterStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterStudentResponse.Merge(m, src)
}
func (m *MsgRegisterStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterStudentResponse proto.InternalMessageInfo

type MsgCreateEnrollment struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Student     string `protobuf:"bytes,2,opt,name=student,proto3" json:"student,omitempty"`
	Institution string `protobuf:"bytes,3,opt,name=institution,proto3" json:"institution,omitempty"`
	CourseId    string `protobuf:"bytes,4,opt,name=courseId,proto3" json:"courseId,omitempty"`
}

func (m *MsgCreateEnrollment) Reset()         { *m = MsgCreateEnrollment{} }
func (m *MsgCreateEnrollment) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEnrollment) ProtoMessage()    {}
func (*MsgCreateEnrollment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{4}
}
func (m *MsgCreateEnrollment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEnrollment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEnrollment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEnrollment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEnrollment.Merge(m, src)
}
func (m *MsgCreateEnrollment) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEnrollment) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEnrollment.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEnrollment proto.InternalMessageInfo

func (m *MsgCreateEnrollment) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateEnrollment) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *MsgCreateEnrollment) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *MsgCreateEnrollment) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

type MsgCreateEnrollmentResponse struct {
}

func (m *MsgCreateEnrollmentResponse) Reset()         { *m = MsgCreateEnrollmentResponse{} }
func (m *MsgCreateEnrollmentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEnrollmentResponse) ProtoMessage()    {}
func (*MsgCreateEnrollmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{5}
}
func (m *MsgCreateEnrollmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEnrollmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEnrollmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEnrollmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEnrollmentResponse.Merge(m, src)
}
func (m *MsgCreateEnrollmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEnrollmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEnrollmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEnrollmentResponse proto.InternalMessageInfo

type MsgUpdateEnrollmentStatus struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EnrollmentId string `protobuf:"bytes,2,opt,name=enrollmentId,proto3" json:"enrollmentId,omitempty"`
	Status       string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgUpdateEnrollmentStatus) Reset()         { *m = MsgUpdateEnrollmentStatus{} }
func (m *MsgUpdateEnrollmentStatus) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEnrollmentStatus) ProtoMessage()    {}
func (*MsgUpdateEnrollmentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{6}
}
func (m *MsgUpdateEnrollmentStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEnrollmentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEnrollmentStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEnrollmentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEnrollmentStatus.Merge(m, src)
}
func (m *MsgUpdateEnrollmentStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEnrollmentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEnrollmentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEnrollmentStatus proto.InternalMessageInfo

func (m *MsgUpdateEnrollmentStatus) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateEnrollmentStatus) GetEnrollmentId() string {
	if m != nil {
		return m.EnrollmentId
	}
	return ""
}

func (m *MsgUpdateEnrollmentStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgUpdateEnrollmentStatusResponse struct {
}

func (m *MsgUpdateEnrollmentStatusResponse) Reset()         { *m = MsgUpdateEnrollmentStatusResponse{} }
func (m *MsgUpdateEnrollmentStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEnrollmentStatusResponse) ProtoMessage()    {}
func (*MsgUpdateEnrollmentStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{7}
}
func (m *MsgUpdateEnrollmentStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEnrollmentStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEnrollmentStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEnrollmentStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEnrollmentStatusResponse.Merge(m, src)
}
func (m *MsgUpdateEnrollmentStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEnrollmentStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEnrollmentStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEnrollmentStatusResponse proto.InternalMessageInfo

type MsgRequestSubjectEnrollment struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Student   string `protobuf:"bytes,2,opt,name=student,proto3" json:"student,omitempty"`
	SubjectId string `protobuf:"bytes,3,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
}

func (m *MsgRequestSubjectEnrollment) Reset()         { *m = MsgRequestSubjectEnrollment{} }
func (m *MsgRequestSubjectEnrollment) String() string { return proto.CompactTextString(m) }
func (*MsgRequestSubjectEnrollment) ProtoMessage()    {}
func (*MsgRequestSubjectEnrollment) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{8}
}
func (m *MsgRequestSubjectEnrollment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestSubjectEnrollment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestSubjectEnrollment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestSubjectEnrollment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestSubjectEnrollment.Merge(m, src)
}
func (m *MsgRequestSubjectEnrollment) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestSubjectEnrollment) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestSubjectEnrollment.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestSubjectEnrollment proto.InternalMessageInfo

func (m *MsgRequestSubjectEnrollment) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestSubjectEnrollment) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *MsgRequestSubjectEnrollment) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

type MsgRequestSubjectEnrollmentResponse struct {
}

func (m *MsgRequestSubjectEnrollmentResponse) Reset()         { *m = MsgRequestSubjectEnrollmentResponse{} }
func (m *MsgRequestSubjectEnrollmentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestSubjectEnrollmentResponse) ProtoMessage()    {}
func (*MsgRequestSubjectEnrollmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{9}
}
func (m *MsgRequestSubjectEnrollmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestSubjectEnrollmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestSubjectEnrollmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestSubjectEnrollmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestSubjectEnrollmentResponse.Merge(m, src)
}
func (m *MsgRequestSubjectEnrollmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestSubjectEnrollmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestSubjectEnrollmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestSubjectEnrollmentResponse proto.InternalMessageInfo

type MsgUpdateAcademicTree struct {
	Creator          string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StudentId        string   `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
	CompletedTokens  []string `protobuf:"bytes,3,rep,name=completedTokens,proto3" json:"completedTokens,omitempty"`
	InProgressTokens []string `protobuf:"bytes,4,rep,name=inProgressTokens,proto3" json:"inProgressTokens,omitempty"`
	AvailableTokens  []string `protobuf:"bytes,5,rep,name=availableTokens,proto3" json:"availableTokens,omitempty"`
}

func (m *MsgUpdateAcademicTree) Reset()         { *m = MsgUpdateAcademicTree{} }
func (m *MsgUpdateAcademicTree) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAcademicTree) ProtoMessage()    {}
func (*MsgUpdateAcademicTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{10}
}
func (m *MsgUpdateAcademicTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAcademicTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAcademicTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAcademicTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAcademicTree.Merge(m, src)
}
func (m *MsgUpdateAcademicTree) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAcademicTree) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAcademicTree.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAcademicTree proto.InternalMessageInfo

func (m *MsgUpdateAcademicTree) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAcademicTree) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *MsgUpdateAcademicTree) GetCompletedTokens() []string {
	if m != nil {
		return m.CompletedTokens
	}
	return nil
}

func (m *MsgUpdateAcademicTree) GetInProgressTokens() []string {
	if m != nil {
		return m.InProgressTokens
	}
	return nil
}

func (m *MsgUpdateAcademicTree) GetAvailableTokens() []string {
	if m != nil {
		return m.AvailableTokens
	}
	return nil
}

type MsgUpdateAcademicTreeResponse struct {
}

func (m *MsgUpdateAcademicTreeResponse) Reset()         { *m = MsgUpdateAcademicTreeResponse{} }
func (m *MsgUpdateAcademicTreeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAcademicTreeResponse) ProtoMessage()    {}
func (*MsgUpdateAcademicTreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{11}
}
func (m *MsgUpdateAcademicTreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAcademicTreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAcademicTreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAcademicTreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAcademicTreeResponse.Merge(m, src)
}
func (m *MsgUpdateAcademicTreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAcademicTreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAcademicTreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAcademicTreeResponse proto.InternalMessageInfo

type MsgCompleteSubject struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StudentId          string `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
	SubjectId          string `protobuf:"bytes,3,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
	Grade              uint32 `protobuf:"varint,4,opt,name=grade,proto3" json:"grade,omitempty"`
	CompletionDate     string `protobuf:"bytes,5,opt,name=completionDate,proto3" json:"completionDate,omitempty"`
	Semester           string `protobuf:"bytes,6,opt,name=semester,proto3" json:"semester,omitempty"`
	ProfessorSignature string `protobuf:"bytes,7,opt,name=professorSignature,proto3" json:"professorSignature,omitempty"`
}

func (m *MsgCompleteSubject) Reset()         { *m = MsgCompleteSubject{} }
func (m *MsgCompleteSubject) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteSubject) ProtoMessage()    {}
func (*MsgCompleteSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{12}
}
func (m *MsgCompleteSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteSubject.Merge(m, src)
}
func (m *MsgCompleteSubject) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteSubject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteSubject proto.InternalMessageInfo

func (m *MsgCompleteSubject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCompleteSubject) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *MsgCompleteSubject) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *MsgCompleteSubject) GetGrade() uint32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *MsgCompleteSubject) GetCompletionDate() string {
	if m != nil {
		return m.CompletionDate
	}
	return ""
}

func (m *MsgCompleteSubject) GetSemester() string {
	if m != nil {
		return m.Semester
	}
	return ""
}

func (m *MsgCompleteSubject) GetProfessorSignature() string {
	if m != nil {
		return m.ProfessorSignature
	}
	return ""
}

type MsgCompleteSubjectResponse struct {
	NftTokenId              string  `protobuf:"bytes,1,opt,name=nftTokenId,proto3" json:"nftTokenId,omitempty"`
	ProgressPercentage      float64 `protobuf:"fixed64,2,opt,name=progressPercentage,proto3" json:"progressPercentage,omitempty"`
	CreditsCompleted        uint64  `protobuf:"varint,3,opt,name=creditsCompleted,proto3" json:"creditsCompleted,omitempty"`
	IsEligibleForGraduation bool    `protobuf:"varint,4,opt,name=isEligibleForGraduation,proto3" json:"isEligibleForGraduation,omitempty"`
}

func (m *MsgCompleteSubjectResponse) Reset()         { *m = MsgCompleteSubjectResponse{} }
func (m *MsgCompleteSubjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCompleteSubjectResponse) ProtoMessage()    {}
func (*MsgCompleteSubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{13}
}
func (m *MsgCompleteSubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCompleteSubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCompleteSubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCompleteSubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCompleteSubjectResponse.Merge(m, src)
}
func (m *MsgCompleteSubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCompleteSubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCompleteSubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCompleteSubjectResponse proto.InternalMessageInfo

func (m *MsgCompleteSubjectResponse) GetNftTokenId() string {
	if m != nil {
		return m.NftTokenId
	}
	return ""
}

func (m *MsgCompleteSubjectResponse) GetProgressPercentage() float64 {
	if m != nil {
		return m.ProgressPercentage
	}
	return 0
}

func (m *MsgCompleteSubjectResponse) GetCreditsCompleted() uint64 {
	if m != nil {
		return m.CreditsCompleted
	}
	return 0
}

func (m *MsgCompleteSubjectResponse) GetIsEligibleForGraduation() bool {
	if m != nil {
		return m.IsEligibleForGraduation
	}
	return false
}

type MsgRequestEquivalence struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StudentId       string `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
	SourceSubjectId string `protobuf:"bytes,3,opt,name=sourceSubjectId,proto3" json:"sourceSubjectId,omitempty"`
	TargetSubjectId string `protobuf:"bytes,4,opt,name=targetSubjectId,proto3" json:"targetSubjectId,omitempty"`
	Reason          string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MsgRequestEquivalence) Reset()         { *m = MsgRequestEquivalence{} }
func (m *MsgRequestEquivalence) String() string { return proto.CompactTextString(m) }
func (*MsgRequestEquivalence) ProtoMessage()    {}
func (*MsgRequestEquivalence) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{14}
}
func (m *MsgRequestEquivalence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestEquivalence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestEquivalence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestEquivalence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestEquivalence.Merge(m, src)
}
func (m *MsgRequestEquivalence) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestEquivalence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestEquivalence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestEquivalence proto.InternalMessageInfo

func (m *MsgRequestEquivalence) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestEquivalence) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *MsgRequestEquivalence) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *MsgRequestEquivalence) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

func (m *MsgRequestEquivalence) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type MsgRequestEquivalenceResponse struct {
	EquivalenceId string `protobuf:"bytes,1,opt,name=equivalenceId,proto3" json:"equivalenceId,omitempty"`
}

func (m *MsgRequestEquivalenceResponse) Reset()         { *m = MsgRequestEquivalenceResponse{} }
func (m *MsgRequestEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestEquivalenceResponse) ProtoMessage()    {}
func (*MsgRequestEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d98bea83cb488220, []int{15}
}
func (m *MsgRequestEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestEquivalenceResponse.Merge(m, src)
}
func (m *MsgRequestEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestEquivalenceResponse proto.InternalMessageInfo

func (m *MsgRequestEquivalenceResponse) GetEquivalenceId() string {
	if m != nil {
		return m.EquivalenceId
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "academictoken.student.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "academictoken.student.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgRegisterStudent)(nil), "academictoken.student.MsgRegisterStudent")
	proto.RegisterType((*MsgRegisterStudentResponse)(nil), "academictoken.student.MsgRegisterStudentResponse")
	proto.RegisterType((*MsgCreateEnrollment)(nil), "academictoken.student.MsgCreateEnrollment")
	proto.RegisterType((*MsgCreateEnrollmentResponse)(nil), "academictoken.student.MsgCreateEnrollmentResponse")
	proto.RegisterType((*MsgUpdateEnrollmentStatus)(nil), "academictoken.student.MsgUpdateEnrollmentStatus")
	proto.RegisterType((*MsgUpdateEnrollmentStatusResponse)(nil), "academictoken.student.MsgUpdateEnrollmentStatusResponse")
	proto.RegisterType((*MsgRequestSubjectEnrollment)(nil), "academictoken.student.MsgRequestSubjectEnrollment")
	proto.RegisterType((*MsgRequestSubjectEnrollmentResponse)(nil), "academictoken.student.MsgRequestSubjectEnrollmentResponse")
	proto.RegisterType((*MsgUpdateAcademicTree)(nil), "academictoken.student.MsgUpdateAcademicTree")
	proto.RegisterType((*MsgUpdateAcademicTreeResponse)(nil), "academictoken.student.MsgUpdateAcademicTreeResponse")
	proto.RegisterType((*MsgCompleteSubject)(nil), "academictoken.student.MsgCompleteSubject")
	proto.RegisterType((*MsgCompleteSubjectResponse)(nil), "academictoken.student.MsgCompleteSubjectResponse")
	proto.RegisterType((*MsgRequestEquivalence)(nil), "academictoken.student.MsgRequestEquivalence")
	proto.RegisterType((*MsgRequestEquivalenceResponse)(nil), "academictoken.student.MsgRequestEquivalenceResponse")
}

func init() { proto.RegisterFile("academictoken/student/tx.proto", fileDescriptor_d98bea83cb488220) }

var fileDescriptor_d98bea83cb488220 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x73, 0x1b, 0x35,
	0x14, 0xce, 0xb6, 0xf9, 0x51, 0xbf, 0xa6, 0xa4, 0x88, 0xb4, 0xd9, 0x2c, 0x8d, 0x1b, 0x5c, 0x28,
	0x21, 0x53, 0x6c, 0x1a, 0x18, 0xe8, 0xe4, 0x44, 0x53, 0x02, 0x93, 0x43, 0x66, 0x32, 0xeb, 0x72,
	0xe1, 0xc2, 0x28, 0xbb, 0x2f, 0xcb, 0x16, 0x7b, 0xe5, 0x4a, 0xda, 0x4c, 0x7a, 0x60, 0x60, 0x3a,
	0x9c, 0x7a, 0xe2, 0xc2, 0xff, 0xc0, 0x31, 0x07, 0xfe, 0x07, 0xca, 0xad, 0x93, 0x13, 0x17, 0x18,
	0x26, 0x39, 0xe4, 0xdf, 0x60, 0x56, 0x92, 0x65, 0x5b, 0xf6, 0x3a, 0x09, 0xbd, 0x24, 0x7e, 0xdf,
	0xfb, 0x24, 0x7d, 0xef, 0xd3, 0x93, 0xb4, 0x50, 0xa5, 0x11, 0x8d, 0xb1, 0x9d, 0x46, 0x92, 0x7d,
	0x8f, 0x59, 0x43, 0xc8, 0x3c, 0xc6, 0x4c, 0x36, 0xe4, 0x41, 0xbd, 0xc3, 0x99, 0x64, 0xe4, 0xc6,
	0x40, 0xbe, 0x6e, 0xf2, 0xc1, 0x9b, 0xb4, 0x9d, 0x66, 0xac, 0xa1, 0xfe, 0x6a, 0x66, 0xb0, 0x10,
	0x31, 0xd1, 0x66, 0xa2, 0xd1, 0x16, 0x49, 0x63, 0xff, 0x7e, 0xf1, 0xcf, 0x24, 0x16, 0x75, 0xe2,
	0x5b, 0x15, 0x35, 0x74, 0x60, 0x52, 0xf3, 0x09, 0x4b, 0x98, 0xc6, 0x8b, 0x5f, 0x06, 0xad, 0x8d,
	0xd6, 0xd4, 0xa1, 0x9c, 0xb6, 0xcd, 0xc8, 0xda, 0x1f, 0x1e, 0xcc, 0x6d, 0x8b, 0xe4, 0xeb, 0x4e,
	0x4c, 0x25, 0xee, 0xa8, 0x0c, 0xf9, 0x14, 0x2a, 0x34, 0x97, 0xdf, 0x31, 0x9e, 0xca, 0x67, 0xbe,
	0xb7, 0xec, 0xad, 0x54, 0x36, 0xfc, 0xa3, 0xdf, 0x3f, 0x9c, 0x37, 0x4b, 0x3e, 0x8c, 0x63, 0x8e,
	0x42, 0x34, 0x25, 0x4f, 0xb3, 0x24, 0xec, 0x51, 0xc9, 0xe7, 0x30, 0xad, 0xe7, 0xf6, 0x2f, 0x2d,
	0x7b, 0x2b, 0x57, 0xd7, 0x96, 0xea, 0x23, 0x8b, 0xae, 0xeb, 0x65, 0x36, 0x2a, 0x2f, 0xff, 0xb9,
	0x3d, 0xf1, 0xdb, 0xe9, 0xe1, 0xaa, 0x17, 0x9a, 0x71, 0xeb, 0xeb, 0xcf, 0x4f, 0x0f, 0x57, 0x7b,
	0x33, 0xbe, 0x38, 0x3d, 0x5c, 0x7d, 0x7f, 0xb0, 0x88, 0x03, 0x5b, 0x86, 0xa3, 0xba, 0xb6, 0x08,
	0x0b, 0x0e, 0x14, 0xa2, 0xe8, 0xb0, 0x4c, 0x60, 0xed, 0x09, 0x90, 0x6d, 0x91, 0x84, 0x98, 0xa4,
	0x42, 0x22, 0x6f, 0xea, 0x09, 0x88, 0x0f, 0x33, 0x11, 0x47, 0x2a, 0x19, 0xd7, 0x45, 0x86, 0xdd,
	0x90, 0x10, 0x98, 0xcc, 0x68, 0x1b, 0x55, 0x19, 0x95, 0x50, 0xfd, 0x2e, 0xd8, 0x54, 0x17, 0xee,
	0x5f, 0xd6, 0x6c, 0x13, 0xae, 0xcf, 0x16, 0xa2, 0xbb, 0x63, 0x6b, 0xb7, 0x20, 0x18, 0x5e, 0xcb,
	0x2a, 0xf9, 0xd5, 0x83, 0xb7, 0xb6, 0x45, 0xf2, 0xa8, 0x20, 0xe3, 0x66, 0xc6, 0x59, 0xab, 0xd5,
	0x1e, 0xaf, 0xc5, 0x87, 0x19, 0x53, 0xb1, 0x91, 0xd3, 0x0d, 0xc9, 0x32, 0x5c, 0x4d, 0x33, 0x21,
	0x53, 0x99, 0xcb, 0x94, 0x65, 0x46, 0x55, 0x3f, 0x44, 0x02, 0xb8, 0x12, 0xb1, 0x9c, 0x0b, 0xdc,
	0x8a, 0xfd, 0x49, 0x95, 0xb6, 0xb1, 0xa3, 0x7a, 0x09, 0xde, 0x1e, 0x21, 0xcb, 0xca, 0xfe, 0x11,
	0x16, 0xad, 0xb7, 0xbd, 0x74, 0x53, 0x52, 0x99, 0x8b, 0x31, 0xda, 0x6b, 0x30, 0x8b, 0x96, 0xbd,
	0x15, 0x9b, 0x02, 0x06, 0x30, 0x72, 0x13, 0xa6, 0x85, 0x9a, 0xc7, 0x14, 0x60, 0x22, 0x47, 0xdf,
	0x1d, 0x78, 0xa7, 0x54, 0x80, 0x55, 0xf9, 0x83, 0x2a, 0x22, 0xc4, 0xa7, 0x39, 0x0a, 0xd9, 0xcc,
	0x77, 0x9f, 0x60, 0x24, 0x5f, 0xd3, 0xe3, 0x5b, 0x50, 0x11, 0x7a, 0xa2, 0xad, 0xd8, 0x08, 0xec,
	0x01, 0x8e, 0xc6, 0xf7, 0xe0, 0xce, 0x98, 0xe5, 0xad, 0xca, 0xbf, 0x3d, 0xb8, 0x61, 0x6b, 0x79,
	0x68, 0x9a, 0xfb, 0x31, 0x47, 0x1c, 0x23, 0xb0, 0x90, 0xa1, 0x15, 0x59, 0x17, 0x7b, 0x00, 0x59,
	0x81, 0xb9, 0x88, 0xb5, 0x3b, 0x2d, 0x94, 0x18, 0x3f, 0x2e, 0x4e, 0x49, 0xe1, 0xe5, 0xe5, 0x95,
	0x4a, 0xe8, 0xc2, 0x64, 0x15, 0xae, 0xa7, 0xd9, 0x0e, 0x67, 0x49, 0xd1, 0xb8, 0x86, 0x3a, 0xa9,
	0xa8, 0x43, 0x78, 0x31, 0x2b, 0xdd, 0xa7, 0x69, 0x8b, 0xee, 0xb6, 0xd0, 0x50, 0xa7, 0xf4, 0xac,
	0x0e, 0xec, 0xd8, 0x70, 0x1b, 0x96, 0x46, 0x96, 0x67, 0x0d, 0x78, 0x7e, 0x49, 0x1d, 0xc7, 0x47,
	0x46, 0x9b, 0x71, 0xea, 0x7f, 0x57, 0x3f, 0x76, 0x8b, 0xc8, 0x3c, 0x4c, 0x25, 0x9c, 0xc6, 0xa8,
	0xfa, 0xff, 0x5a, 0xa8, 0x03, 0x72, 0x17, 0xde, 0x30, 0xd6, 0xa4, 0x2c, 0xfb, 0x82, 0x4a, 0xf4,
	0xa7, 0xd4, 0x40, 0x07, 0x2d, 0x0e, 0x90, 0xc0, 0x36, 0x16, 0x27, 0xd9, 0x9f, 0xd6, 0x07, 0xa8,
	0x1b, 0x93, 0x3a, 0x90, 0x0e, 0x67, 0x7b, 0x28, 0x04, 0xe3, 0xcd, 0x34, 0xc9, 0xa8, 0xcc, 0x39,
	0xfa, 0x33, 0x8a, 0x35, 0x22, 0xe3, 0xb8, 0x74, 0xe4, 0xa9, 0x7b, 0xc2, 0x31, 0xa1, 0xeb, 0x11,
	0xa9, 0x02, 0x64, 0x7b, 0x52, 0xf9, 0xbb, 0x15, 0x1b, 0x3f, 0xfa, 0x10, 0xb3, 0xb8, 0xda, 0xae,
	0x1d, 0xe4, 0x11, 0x66, 0x92, 0x26, 0xfa, 0xbe, 0xf2, 0xc2, 0x11, 0x99, 0x62, 0xe3, 0x23, 0x8e,
	0x71, 0x2a, 0x45, 0x77, 0x45, 0xed, 0xd5, 0x64, 0x38, 0x84, 0x93, 0x07, 0xb0, 0x90, 0x8a, 0xcd,
	0x56, 0x9a, 0xa4, 0xbb, 0x2d, 0xfc, 0x92, 0xf1, 0xaf, 0x38, 0x8d, 0x73, 0xaa, 0xee, 0x98, 0xc2,
	0xc4, 0x2b, 0x61, 0x59, 0xba, 0xf6, 0xa7, 0x6e, 0x6d, 0x73, 0x04, 0x36, 0x9f, 0xe6, 0xe9, 0x3e,
	0x6d, 0x61, 0x16, 0xbd, 0x56, 0x6b, 0x0b, 0x96, 0xf3, 0xa8, 0x6b, 0x90, 0xdd, 0x62, 0x17, 0x2e,
	0x98, 0x92, 0xf2, 0x04, 0x65, 0x8f, 0xa9, 0xaf, 0x3c, 0x17, 0x2e, 0x6e, 0x1c, 0x8e, 0x54, 0xb0,
	0xcc, 0x6c, 0xba, 0x89, 0x9c, 0x0d, 0xda, 0x54, 0x6d, 0x3c, 0x5c, 0x8a, 0xdd, 0xa2, 0x77, 0xe1,
	0x1a, 0xf6, 0x60, 0xbb, 0x4b, 0x83, 0xe0, 0xda, 0xd1, 0x0c, 0x5c, 0xde, 0x16, 0x09, 0xd9, 0x83,
	0xd9, 0x81, 0x37, 0xf6, 0x6e, 0xc9, 0xdb, 0xe8, 0x3c, 0x61, 0x41, 0xfd, 0x7c, 0x3c, 0xab, 0x8a,
	0xc1, 0x9c, 0xfb, 0xce, 0x7d, 0x50, 0x3e, 0x85, 0x43, 0x0d, 0xee, 0x9f, 0x9b, 0x6a, 0x17, 0xe4,
	0x70, 0x7d, 0xe8, 0x35, 0x5b, 0x2d, 0x9f, 0xc6, 0xe5, 0x06, 0x6b, 0xe7, 0xe7, 0xda, 0x35, 0x7f,
	0xf6, 0xe0, 0x66, 0xc9, 0x63, 0xf4, 0xd1, 0x59, 0x7e, 0xb9, 0x23, 0x82, 0x07, 0x17, 0x1d, 0x61,
	0x65, 0xbc, 0xf0, 0xc0, 0x2f, 0x7d, 0x6d, 0xd6, 0xc6, 0x59, 0x39, 0x7a, 0x4c, 0xb0, 0x7e, 0xf1,
	0x31, 0x56, 0xcc, 0x01, 0x90, 0x11, 0x4f, 0xca, 0xbd, 0xb3, 0x8a, 0xeb, 0x67, 0x07, 0x9f, 0x5c,
	0x84, 0xdd, 0xdf, 0x72, 0xee, 0x5d, 0x3e, 0xa6, 0xe5, 0x1c, 0xea, 0xb8, 0x96, 0x2b, 0xbb, 0x1c,
	0x0f, 0x80, 0x8c, 0xb8, 0x62, 0xee, 0x9d, 0x69, 0x5e, 0x1f, 0x7b, 0x5c, 0xa9, 0xe5, 0x67, 0x3e,
	0x98, 0xfa, 0xa9, 0xf8, 0x5c, 0xdd, 0xf8, 0xec, 0xe5, 0x71, 0xd5, 0x7b, 0x75, 0x5c, 0xf5, 0xfe,
	0x3d, 0xae, 0x7a, 0xbf, 0x9c, 0x54, 0x27, 0x5e, 0x9d, 0x54, 0x27, 0xfe, 0x3a, 0xa9, 0x4e, 0x7c,
	0xb3, 0x54, 0xf6, 0xb5, 0x2a, 0x9f, 0x75, 0x50, 0xec, 0x4e, 0xab, 0x8f, 0xee, 0x8f, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x84, 0xea, 0xae, 0xe5, 0x2e, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RegisterStudent(ctx context.Context, in *MsgRegisterStudent, opts ...grpc.CallOption) (*MsgRegisterStudentResponse, error)
	CreateEnrollment(ctx context.Context, in *MsgCreateEnrollment, opts ...grpc.CallOption) (*MsgCreateEnrollmentResponse, error)
	UpdateEnrollmentStatus(ctx context.Context, in *MsgUpdateEnrollmentStatus, opts ...grpc.CallOption) (*MsgUpdateEnrollmentStatusResponse, error)
	RequestSubjectEnrollment(ctx context.Context, in *MsgRequestSubjectEnrollment, opts ...grpc.CallOption) (*MsgRequestSubjectEnrollmentResponse, error)
	UpdateAcademicTree(ctx context.Context, in *MsgUpdateAcademicTree, opts ...grpc.CallOption) (*MsgUpdateAcademicTreeResponse, error)
	CompleteSubject(ctx context.Context, in *MsgCompleteSubject, opts ...grpc.CallOption) (*MsgCompleteSubjectResponse, error)
	RequestEquivalence(ctx context.Context, in *MsgRequestEquivalence, opts ...grpc.CallOption) (*MsgRequestEquivalenceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterStudent(ctx context.Context, in *MsgRegisterStudent, opts ...grpc.CallOption) (*MsgRegisterStudentResponse, error) {
	out := new(MsgRegisterStudentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Msg/RegisterStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateEnrollment(ctx context.Context, in *MsgCreateEnrollment, opts ...grpc.CallOption) (*MsgCreateEnrollmentResponse, error) {
	out := new(MsgCreateEnrollmentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Msg/CreateEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEnrollmentStatus(ctx context.Context, in *MsgUpdateEnrollmentStatus, opts ...grpc.CallOption) (*MsgUpdateEnrollmentStatusResponse, error) {
	out := new(MsgUpdateEnrollmentStatusResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Msg/UpdateEnrollmentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestSubjectEnrollment(ctx context.Context, in *MsgRequestSubjectEnrollment, opts ...grpc.CallOption) (*MsgRequestSubjectEnrollmentResponse, error) {
	out := new(MsgRequestSubjectEnrollmentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Msg/RequestSubjectEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAcademicTree(ctx context.Context, in *MsgUpdateAcademicTree, opts ...grpc.CallOption) (*MsgUpdateAcademicTreeResponse, error) {
	out := new(MsgUpdateAcademicTreeResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Msg/UpdateAcademicTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteSubject(ctx context.Context, in *MsgCompleteSubject, opts ...grpc.CallOption) (*MsgCompleteSubjectResponse, error) {
	out := new(MsgCompleteSubjectResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Msg/CompleteSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestEquivalence(ctx context.Context, in *MsgRequestEquivalence, opts ...grpc.CallOption) (*MsgRequestEquivalenceResponse, error) {
	out := new(MsgRequestEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Msg/RequestEquivalence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	RegisterStudent(context.Context, *MsgRegisterStudent) (*MsgRegisterStudentResponse, error)
	CreateEnrollment(context.Context, *MsgCreateEnrollment) (*MsgCreateEnrollmentResponse, error)
	UpdateEnrollmentStatus(context.Context, *MsgUpdateEnrollmentStatus) (*MsgUpdateEnrollmentStatusResponse, error)
	RequestSubjectEnrollment(context.Context, *MsgRequestSubjectEnrollment) (*MsgRequestSubjectEnrollmentResponse, error)
	UpdateAcademicTree(context.Context, *MsgUpdateAcademicTree) (*MsgUpdateAcademicTreeResponse, error)
	CompleteSubject(context.Context, *MsgCompleteSubject) (*MsgCompleteSubjectResponse, error)
	RequestEquivalence(context.Context, *MsgRequestEquivalence) (*MsgRequestEquivalenceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) RegisterStudent(ctx context.Context, req *MsgRegisterStudent) (*MsgRegisterStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStudent not implemented")
}
func (*UnimplementedMsgServer) CreateEnrollment(ctx context.Context, req *MsgCreateEnrollment) (*MsgCreateEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollment not implemented")
}
func (*UnimplementedMsgServer) UpdateEnrollmentStatus(ctx context.Context, req *MsgUpdateEnrollmentStatus) (*MsgUpdateEnrollmentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrollmentStatus not implemented")
}
func (*UnimplementedMsgServer) RequestSubjectEnrollment(ctx context.Context, req *MsgRequestSubjectEnrollment) (*MsgRequestSubjectEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSubjectEnrollment not implemented")
}
func (*UnimplementedMsgServer) UpdateAcademicTree(ctx context.Context, req *MsgUpdateAcademicTree) (*MsgUpdateAcademicTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcademicTree not implemented")
}
func (*UnimplementedMsgServer) CompleteSubject(ctx context.Context, req *MsgCompleteSubject) (*MsgCompleteSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSubject not implemented")
}
func (*UnimplementedMsgServer) RequestEquivalence(ctx context.Context, req *MsgRequestEquivalence) (*MsgRequestEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEquivalence not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Msg/RegisterStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterStudent(ctx, req.(*MsgRegisterStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEnrollment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Msg/CreateEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEnrollment(ctx, req.(*MsgCreateEnrollment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEnrollmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEnrollmentStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEnrollmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Msg/UpdateEnrollmentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEnrollmentStatus(ctx, req.(*MsgUpdateEnrollmentStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestSubjectEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestSubjectEnrollment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestSubjectEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Msg/RequestSubjectEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestSubjectEnrollment(ctx, req.(*MsgRequestSubjectEnrollment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAcademicTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAcademicTree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAcademicTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Msg/UpdateAcademicTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAcademicTree(ctx, req.(*MsgUpdateAcademicTree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteSubject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Msg/CompleteSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteSubject(ctx, req.(*MsgCompleteSubject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Msg/RequestEquivalence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestEquivalence(ctx, req.(*MsgRequestEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.student.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterStudent",
			Handler:    _Msg_RegisterStudent_Handler,
		},
		{
			MethodName: "CreateEnrollment",
			Handler:    _Msg_CreateEnrollment_Handler,
		},
		{
			MethodName: "UpdateEnrollmentStatus",
			Handler:    _Msg_UpdateEnrollmentStatus_Handler,
		},
		{
			MethodName: "RequestSubjectEnrollment",
			Handler:    _Msg_RequestSubjectEnrollment_Handler,
		},
		{
			MethodName: "UpdateAcademicTree",
			Handler:    _Msg_UpdateAcademicTree_Handler,
		},
		{
			MethodName: "CompleteSubject",
			Handler:    _Msg_CompleteSubject_Handler,
		},
		{
			MethodName: "RequestEquivalence",
			Handler:    _Msg_RequestEquivalence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/student/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterStudent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterStudent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterStudent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateEnrollment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEnrollment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEnrollment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateEnrollmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEnrollmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEnrollmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEnrollmentStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEnrollmentStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEnrollmentStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EnrollmentId) > 0 {
		i -= len(m.EnrollmentId)
		copy(dAtA[i:], m.EnrollmentId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EnrollmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEnrollmentStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEnrollmentStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEnrollmentStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestSubjectEnrollment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestSubjectEnrollment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestSubjectEnrollment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestSubjectEnrollmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestSubjectEnrollmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestSubjectEnrollmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAcademicTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAcademicTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAcademicTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailableTokens) > 0 {
		for iNdEx := len(m.AvailableTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailableTokens[iNdEx])
			copy(dAtA[i:], m.AvailableTokens[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AvailableTokens[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.InProgressTokens) > 0 {
		for iNdEx := len(m.InProgressTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InProgressTokens[iNdEx])
			copy(dAtA[i:], m.InProgressTokens[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.InProgressTokens[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CompletedTokens) > 0 {
		for iNdEx := len(m.CompletedTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CompletedTokens[iNdEx])
			copy(dAtA[i:], m.CompletedTokens[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CompletedTokens[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAcademicTreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAcademicTreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAcademicTreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCompleteSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProfessorSignature) > 0 {
		i -= len(m.ProfessorSignature)
		copy(dAtA[i:], m.ProfessorSignature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProfessorSignature)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Semester) > 0 {
		i -= len(m.Semester)
		copy(dAtA[i:], m.Semester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Semester)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CompletionDate) > 0 {
		i -= len(m.CompletionDate)
		copy(dAtA[i:], m.CompletionDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CompletionDate)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Grade != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Grade))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCompleteSubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCompleteSubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCompleteSubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEligibleForGraduation {
		i--
		if m.IsEligibleForGraduation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CreditsCompleted != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CreditsCompleted))
		i--
		dAtA[i] = 0x18
	}
	if m.ProgressPercentage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ProgressPercentage))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.NftTokenId) > 0 {
		i -= len(m.NftTokenId)
		copy(dAtA[i:], m.NftTokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftTokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestEquivalence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestEquivalence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestEquivalence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EquivalenceId) > 0 {
		i -= len(m.EquivalenceId)
		copy(dAtA[i:], m.EquivalenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EquivalenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterStudent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateEnrollment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateEnrollmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateEnrollmentStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EnrollmentId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateEnrollmentStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestSubjectEnrollment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRequestSubjectEnrollmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAcademicTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.CompletedTokens) > 0 {
		for _, s := range m.CompletedTokens {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.InProgressTokens) > 0 {
		for _, s := range m.InProgressTokens {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.AvailableTokens) > 0 {
		for _, s := range m.AvailableTokens {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateAcademicTreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCompleteSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Grade != 0 {
		n += 1 + sovTx(uint64(m.Grade))
	}
	l = len(m.CompletionDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Semester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProfessorSignature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCompleteSubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NftTokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ProgressPercentage != 0 {
		n += 9
	}
	if m.CreditsCompleted != 0 {
		n += 1 + sovTx(uint64(m.CreditsCompleted))
	}
	if m.IsEligibleForGraduation {
		n += 2
	}
	return n
}

func (m *MsgRequestEquivalence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRequestEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EquivalenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterStudent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterStudent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterStudent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEnrollment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEnrollment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEnrollment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEnrollmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEnrollmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEnrollmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEnrollmentStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEnrollmentStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEnrollmentStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnrollmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnrollmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEnrollmentStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEnrollmentStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEnrollmentStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestSubjectEnrollment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestSubjectEnrollment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestSubjectEnrollment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestSubjectEnrollmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestSubjectEnrollmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestSubjectEnrollmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAcademicTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAcademicTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAcademicTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedTokens = append(m.CompletedTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InProgressTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InProgressTokens = append(m.InProgressTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableTokens = append(m.AvailableTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAcademicTreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAcademicTreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAcademicTreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Semester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Semester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessorSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfessorSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCompleteSubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCompleteSubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCompleteSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressPercentage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ProgressPercentage = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditsCompleted", wireType)
			}
			m.CreditsCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditsCompleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEligibleForGraduation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEligibleForGraduation = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestEquivalence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestEquivalence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
