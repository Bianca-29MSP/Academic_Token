// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/student/student_academic_tree.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ElectiveCompletionGroup struct {
	GroupId           string   `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	CompletedSubjects []string `protobuf:"bytes,2,rep,name=completedSubjects,proto3" json:"completedSubjects,omitempty"`
}

func (m *ElectiveCompletionGroup) Reset()         { *m = ElectiveCompletionGroup{} }
func (m *ElectiveCompletionGroup) String() string { return proto.CompactTextString(m) }
func (*ElectiveCompletionGroup) ProtoMessage()    {}
func (*ElectiveCompletionGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_1146de6bee7f2261, []int{0}
}
func (m *ElectiveCompletionGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElectiveCompletionGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ElectiveCompletionGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ElectiveCompletionGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElectiveCompletionGroup.Merge(m, src)
}
func (m *ElectiveCompletionGroup) XXX_Size() int {
	return m.Size()
}
func (m *ElectiveCompletionGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ElectiveCompletionGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ElectiveCompletionGroup proto.InternalMessageInfo

func (m *ElectiveCompletionGroup) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *ElectiveCompletionGroup) GetCompletedSubjects() []string {
	if m != nil {
		return m.CompletedSubjects
	}
	return nil
}

type StudentAcademicTree struct {
	Index               string                     `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Student             string                     `protobuf:"bytes,2,opt,name=student,proto3" json:"student,omitempty"`
	Institution         string                     `protobuf:"bytes,3,opt,name=institution,proto3" json:"institution,omitempty"`
	CourseId            string                     `protobuf:"bytes,4,opt,name=courseId,proto3" json:"courseId,omitempty"`
	CurriculumVersion   string                     `protobuf:"bytes,5,opt,name=curriculumVersion,proto3" json:"curriculumVersion,omitempty"`
	TotalCredits        uint64                     `protobuf:"varint,6,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	TotalCompletedHours uint64                     `protobuf:"varint,7,opt,name=totalCompletedHours,proto3" json:"totalCompletedHours,omitempty"`
	CoefficientGpa      float32                    `protobuf:"fixed32,8,opt,name=coefficientGpa,proto3" json:"coefficientGpa,omitempty"`
	CompletedTokens     []string                   `protobuf:"bytes,9,rep,name=completedTokens,proto3" json:"completedTokens,omitempty"`
	InProgressTokens    []string                   `protobuf:"bytes,10,rep,name=inProgressTokens,proto3" json:"inProgressTokens,omitempty"`
	AvailableTokens     []string                   `protobuf:"bytes,11,rep,name=availableTokens,proto3" json:"availableTokens,omitempty"`
	AcademicProgress    *AcademicProgress          `protobuf:"bytes,12,opt,name=academicProgress,proto3" json:"academicProgress,omitempty"`
	GraduationStatus    *GraduationStatus          `protobuf:"bytes,13,opt,name=graduationStatus,proto3" json:"graduationStatus,omitempty"`
	TransferredSubjects []string                   `protobuf:"bytes,14,rep,name=transferredSubjects,proto3" json:"transferredSubjects,omitempty"`
	CompletedElectives  []*ElectiveCompletionGroup `protobuf:"bytes,15,rep,name=completedElectives,proto3" json:"completedElectives,omitempty"`
	EquivalenceRequests []*EquivalenceRequest      `protobuf:"bytes,16,rep,name=equivalenceRequests,proto3" json:"equivalenceRequests,omitempty"`
}

func (m *StudentAcademicTree) Reset()         { *m = StudentAcademicTree{} }
func (m *StudentAcademicTree) String() string { return proto.CompactTextString(m) }
func (*StudentAcademicTree) ProtoMessage()    {}
func (*StudentAcademicTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_1146de6bee7f2261, []int{1}
}
func (m *StudentAcademicTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentAcademicTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentAcademicTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentAcademicTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentAcademicTree.Merge(m, src)
}
func (m *StudentAcademicTree) XXX_Size() int {
	return m.Size()
}
func (m *StudentAcademicTree) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentAcademicTree.DiscardUnknown(m)
}

var xxx_messageInfo_StudentAcademicTree proto.InternalMessageInfo

func (m *StudentAcademicTree) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StudentAcademicTree) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *StudentAcademicTree) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *StudentAcademicTree) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *StudentAcademicTree) GetCurriculumVersion() string {
	if m != nil {
		return m.CurriculumVersion
	}
	return ""
}

func (m *StudentAcademicTree) GetTotalCredits() uint64 {
	if m != nil {
		return m.TotalCredits
	}
	return 0
}

func (m *StudentAcademicTree) GetTotalCompletedHours() uint64 {
	if m != nil {
		return m.TotalCompletedHours
	}
	return 0
}

func (m *StudentAcademicTree) GetCoefficientGpa() float32 {
	if m != nil {
		return m.CoefficientGpa
	}
	return 0
}

func (m *StudentAcademicTree) GetCompletedTokens() []string {
	if m != nil {
		return m.CompletedTokens
	}
	return nil
}

func (m *StudentAcademicTree) GetInProgressTokens() []string {
	if m != nil {
		return m.InProgressTokens
	}
	return nil
}

func (m *StudentAcademicTree) GetAvailableTokens() []string {
	if m != nil {
		return m.AvailableTokens
	}
	return nil
}

func (m *StudentAcademicTree) GetAcademicProgress() *AcademicProgress {
	if m != nil {
		return m.AcademicProgress
	}
	return nil
}

func (m *StudentAcademicTree) GetGraduationStatus() *GraduationStatus {
	if m != nil {
		return m.GraduationStatus
	}
	return nil
}

func (m *StudentAcademicTree) GetTransferredSubjects() []string {
	if m != nil {
		return m.TransferredSubjects
	}
	return nil
}

func (m *StudentAcademicTree) GetCompletedElectives() []*ElectiveCompletionGroup {
	if m != nil {
		return m.CompletedElectives
	}
	return nil
}

func (m *StudentAcademicTree) GetEquivalenceRequests() []*EquivalenceRequest {
	if m != nil {
		return m.EquivalenceRequests
	}
	return nil
}

func init() {
	proto.RegisterType((*ElectiveCompletionGroup)(nil), "academictoken.student.ElectiveCompletionGroup")
	proto.RegisterType((*StudentAcademicTree)(nil), "academictoken.student.StudentAcademicTree")
}

func init() {
	proto.RegisterFile("academictoken/student/student_academic_tree.proto", fileDescriptor_1146de6bee7f2261)
}

var fileDescriptor_1146de6bee7f2261 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xe3, 0xa4, 0x4d, 0x9b, 0x4d, 0xdf, 0x36, 0xef, 0x06, 0xc4, 0xaa, 0x12, 0x96, 0x95,
	0x03, 0x18, 0x04, 0x29, 0x94, 0x03, 0xe7, 0x52, 0xa1, 0xd0, 0x1b, 0x72, 0x2a, 0x0e, 0x20, 0x11,
	0x6d, 0xd6, 0x93, 0x68, 0xc1, 0xf1, 0xba, 0xfb, 0x27, 0x2a, 0xdf, 0x82, 0x8f, 0xd5, 0x63, 0x8f,
	0x1c, 0x51, 0xf2, 0x45, 0x90, 0xd7, 0x76, 0x48, 0x62, 0x87, 0x53, 0x32, 0x33, 0xcf, 0xfe, 0x66,
	0xbc, 0xfb, 0x0c, 0x7a, 0x4d, 0x19, 0x0d, 0x61, 0xc6, 0x99, 0x16, 0xdf, 0x21, 0x3e, 0x53, 0xda,
	0x84, 0x10, 0xeb, 0xe2, 0x77, 0x54, 0x54, 0x47, 0x5a, 0x02, 0xf4, 0x13, 0x29, 0xb4, 0xc0, 0x0f,
	0x37, 0x8e, 0xf4, 0x73, 0xe9, 0xe9, 0xcb, 0x6a, 0xd2, 0x8a, 0x90, 0x48, 0x31, 0x95, 0xa0, 0x54,
	0x46, 0xd9, 0x25, 0x9f, 0x4a, 0x1a, 0x1a, 0xaa, 0xb9, 0x88, 0x47, 0x4a, 0x53, 0x6d, 0x0a, 0xf9,
	0x59, 0xb5, 0x1c, 0x6e, 0x0c, 0x9f, 0xd3, 0x08, 0x62, 0x06, 0x23, 0x09, 0x37, 0x06, 0x94, 0xce,
	0x0e, 0xf4, 0x28, 0x7a, 0xf4, 0x3e, 0x02, 0xa6, 0xf9, 0x1c, 0x2e, 0xc5, 0x2c, 0x89, 0x20, 0x65,
	0x0e, 0xa4, 0x30, 0x09, 0x26, 0xe8, 0x60, 0x9a, 0xfe, 0xb9, 0x0a, 0x89, 0xe3, 0x39, 0x7e, 0x2b,
	0x28, 0x42, 0xfc, 0x02, 0xfd, 0xcf, 0x32, 0x31, 0x84, 0x43, 0x33, 0xfe, 0x06, 0x4c, 0x2b, 0x52,
	0xf7, 0x1a, 0x7e, 0x2b, 0x28, 0x17, 0x7a, 0x77, 0x4d, 0xd4, 0x1d, 0x66, 0x83, 0x5c, 0xe4, 0xd3,
	0x5d, 0x4b, 0x00, 0xfc, 0x00, 0xed, 0xf3, 0x38, 0x84, 0xdb, 0x9c, 0x9e, 0x05, 0x69, 0xd7, 0x7c,
	0x6a, 0x52, 0xcf, 0xba, 0xe6, 0x21, 0xf6, 0x50, 0x9b, 0xc7, 0x4a, 0x73, 0x6d, 0xd2, 0x19, 0x49,
	0xc3, 0x56, 0xd7, 0x53, 0xf8, 0x14, 0x1d, 0x32, 0x61, 0xa4, 0x82, 0xab, 0x90, 0xec, 0xd9, 0xf2,
	0x2a, 0xb6, 0x33, 0x1b, 0x29, 0x39, 0x33, 0x91, 0x99, 0x7d, 0x02, 0xa9, 0x52, 0xc6, 0xbe, 0x15,
	0x95, 0x0b, 0xb8, 0x87, 0x8e, 0xb4, 0xd0, 0x34, 0xba, 0x94, 0x10, 0x72, 0xad, 0x48, 0xd3, 0x73,
	0xfc, 0xbd, 0x60, 0x23, 0x87, 0x5f, 0xa1, 0x6e, 0x16, 0x17, 0x5f, 0xfc, 0x21, 0xed, 0x45, 0x0e,
	0xac, 0xb4, 0xaa, 0x84, 0x9f, 0xa0, 0x63, 0x26, 0x60, 0x32, 0xe1, 0x8c, 0x43, 0xac, 0x07, 0x09,
	0x25, 0x87, 0x9e, 0xe3, 0xd7, 0x83, 0xad, 0x2c, 0xf6, 0xd1, 0xc9, 0xea, 0x1a, 0xaf, 0xd3, 0x87,
	0x54, 0xa4, 0x65, 0x6f, 0x77, 0x3b, 0x8d, 0x9f, 0xa3, 0x0e, 0x8f, 0x3f, 0xe6, 0x96, 0xc9, 0xa5,
	0xc8, 0x4a, 0x4b, 0xf9, 0x94, 0x4a, 0xe7, 0x94, 0x47, 0x74, 0x1c, 0x41, 0x2e, 0x6d, 0x67, 0xd4,
	0xad, 0x34, 0x1e, 0xa2, 0x4e, 0xe1, 0xa3, 0x82, 0x41, 0x8e, 0x3c, 0xc7, 0x6f, 0x9f, 0x3f, 0xed,
	0x57, 0xba, 0xba, 0x7f, 0xb1, 0x25, 0x0f, 0x4a, 0x80, 0x14, 0xfa, 0xd7, 0xb5, 0x43, 0x6b, 0x5a,
	0xf2, 0xdf, 0x3f, 0xa1, 0x83, 0x2d, 0x79, 0x50, 0x02, 0xd8, 0x37, 0x90, 0x34, 0x56, 0x13, 0x90,
	0x72, 0xcd, 0x8b, 0xc7, 0xf6, 0xbb, 0xaa, 0x4a, 0xf8, 0x2b, 0xc2, 0xab, 0x4b, 0x2c, 0x9c, 0xaf,
	0xc8, 0x89, 0xd7, 0xf0, 0xdb, 0xe7, 0xfd, 0x1d, 0x83, 0xec, 0xd8, 0x90, 0xa0, 0x82, 0x84, 0xbf,
	0xa0, 0xee, 0xda, 0xb6, 0x05, 0xd9, 0xb2, 0x29, 0xd2, 0xb1, 0x0d, 0x9e, 0xed, 0x6a, 0x50, 0x3a,
	0x11, 0x54, 0x51, 0xde, 0xbd, 0xbd, 0x5b, 0xb8, 0xce, 0xfd, 0xc2, 0x75, 0x7e, 0x2f, 0x5c, 0xe7,
	0xe7, 0xd2, 0xad, 0xdd, 0x2f, 0xdd, 0xda, 0xaf, 0xa5, 0x5b, 0xfb, 0xfc, 0x78, 0x73, 0xf1, 0x6f,
	0x57, 0xab, 0xaf, 0x7f, 0x24, 0xa0, 0xc6, 0x4d, 0xbb, 0xed, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x53, 0xb1, 0xbc, 0x01, 0xc8, 0x04, 0x00, 0x00,
}

func (m *ElectiveCompletionGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElectiveCompletionGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElectiveCompletionGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CompletedSubjects) > 0 {
		for iNdEx := len(m.CompletedSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CompletedSubjects[iNdEx])
			copy(dAtA[i:], m.CompletedSubjects[iNdEx])
			i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.CompletedSubjects[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentAcademicTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentAcademicTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentAcademicTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EquivalenceRequests) > 0 {
		for iNdEx := len(m.EquivalenceRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EquivalenceRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudentAcademicTree(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.CompletedElectives) > 0 {
		for iNdEx := len(m.CompletedElectives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CompletedElectives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudentAcademicTree(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.TransferredSubjects) > 0 {
		for iNdEx := len(m.TransferredSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TransferredSubjects[iNdEx])
			copy(dAtA[i:], m.TransferredSubjects[iNdEx])
			i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.TransferredSubjects[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.GraduationStatus != nil {
		{
			size, err := m.GraduationStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudentAcademicTree(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.AcademicProgress != nil {
		{
			size, err := m.AcademicProgress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudentAcademicTree(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.AvailableTokens) > 0 {
		for iNdEx := len(m.AvailableTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailableTokens[iNdEx])
			copy(dAtA[i:], m.AvailableTokens[iNdEx])
			i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.AvailableTokens[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.InProgressTokens) > 0 {
		for iNdEx := len(m.InProgressTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InProgressTokens[iNdEx])
			copy(dAtA[i:], m.InProgressTokens[iNdEx])
			i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.InProgressTokens[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.CompletedTokens) > 0 {
		for iNdEx := len(m.CompletedTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CompletedTokens[iNdEx])
			copy(dAtA[i:], m.CompletedTokens[iNdEx])
			i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.CompletedTokens[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.CoefficientGpa != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CoefficientGpa))))
		i--
		dAtA[i] = 0x45
	}
	if m.TotalCompletedHours != 0 {
		i = encodeVarintStudentAcademicTree(dAtA, i, uint64(m.TotalCompletedHours))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalCredits != 0 {
		i = encodeVarintStudentAcademicTree(dAtA, i, uint64(m.TotalCredits))
		i--
		dAtA[i] = 0x30
	}
	if len(m.CurriculumVersion) > 0 {
		i -= len(m.CurriculumVersion)
		copy(dAtA[i:], m.CurriculumVersion)
		i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.CurriculumVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStudentAcademicTree(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStudentAcademicTree(dAtA []byte, offset int, v uint64) int {
	offset -= sovStudentAcademicTree(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ElectiveCompletionGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovStudentAcademicTree(uint64(l))
	}
	if len(m.CompletedSubjects) > 0 {
		for _, s := range m.CompletedSubjects {
			l = len(s)
			n += 1 + l + sovStudentAcademicTree(uint64(l))
		}
	}
	return n
}

func (m *StudentAcademicTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStudentAcademicTree(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovStudentAcademicTree(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovStudentAcademicTree(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovStudentAcademicTree(uint64(l))
	}
	l = len(m.CurriculumVersion)
	if l > 0 {
		n += 1 + l + sovStudentAcademicTree(uint64(l))
	}
	if m.TotalCredits != 0 {
		n += 1 + sovStudentAcademicTree(uint64(m.TotalCredits))
	}
	if m.TotalCompletedHours != 0 {
		n += 1 + sovStudentAcademicTree(uint64(m.TotalCompletedHours))
	}
	if m.CoefficientGpa != 0 {
		n += 5
	}
	if len(m.CompletedTokens) > 0 {
		for _, s := range m.CompletedTokens {
			l = len(s)
			n += 1 + l + sovStudentAcademicTree(uint64(l))
		}
	}
	if len(m.InProgressTokens) > 0 {
		for _, s := range m.InProgressTokens {
			l = len(s)
			n += 1 + l + sovStudentAcademicTree(uint64(l))
		}
	}
	if len(m.AvailableTokens) > 0 {
		for _, s := range m.AvailableTokens {
			l = len(s)
			n += 1 + l + sovStudentAcademicTree(uint64(l))
		}
	}
	if m.AcademicProgress != nil {
		l = m.AcademicProgress.Size()
		n += 1 + l + sovStudentAcademicTree(uint64(l))
	}
	if m.GraduationStatus != nil {
		l = m.GraduationStatus.Size()
		n += 1 + l + sovStudentAcademicTree(uint64(l))
	}
	if len(m.TransferredSubjects) > 0 {
		for _, s := range m.TransferredSubjects {
			l = len(s)
			n += 1 + l + sovStudentAcademicTree(uint64(l))
		}
	}
	if len(m.CompletedElectives) > 0 {
		for _, e := range m.CompletedElectives {
			l = e.Size()
			n += 1 + l + sovStudentAcademicTree(uint64(l))
		}
	}
	if len(m.EquivalenceRequests) > 0 {
		for _, e := range m.EquivalenceRequests {
			l = e.Size()
			n += 2 + l + sovStudentAcademicTree(uint64(l))
		}
	}
	return n
}

func sovStudentAcademicTree(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStudentAcademicTree(x uint64) (n int) {
	return sovStudentAcademicTree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ElectiveCompletionGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudentAcademicTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElectiveCompletionGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElectiveCompletionGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedSubjects = append(m.CompletedSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudentAcademicTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentAcademicTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudentAcademicTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentAcademicTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentAcademicTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurriculumVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurriculumVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			m.TotalCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCompletedHours", wireType)
			}
			m.TotalCompletedHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCompletedHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoefficientGpa", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CoefficientGpa = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedTokens = append(m.CompletedTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InProgressTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InProgressTokens = append(m.InProgressTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableTokens = append(m.AvailableTokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcademicProgress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcademicProgress == nil {
				m.AcademicProgress = &AcademicProgress{}
			}
			if err := m.AcademicProgress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraduationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraduationStatus == nil {
				m.GraduationStatus = &GraduationStatus{}
			}
			if err := m.GraduationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferredSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferredSubjects = append(m.TransferredSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedElectives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedElectives = append(m.CompletedElectives, &ElectiveCompletionGroup{})
			if err := m.CompletedElectives[len(m.CompletedElectives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceRequests = append(m.EquivalenceRequests, &EquivalenceRequest{})
			if err := m.EquivalenceRequests[len(m.EquivalenceRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudentAcademicTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudentAcademicTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStudentAcademicTree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStudentAcademicTree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudentAcademicTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStudentAcademicTree
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStudentAcademicTree
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStudentAcademicTree
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStudentAcademicTree        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStudentAcademicTree          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStudentAcademicTree = fmt.Errorf("proto: unexpected end of group")
)
