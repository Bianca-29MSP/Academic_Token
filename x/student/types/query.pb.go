// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/student/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryListStudentsRequest is request type for the Query/ListStudents RPC method.
type QueryListStudentsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListStudentsRequest) Reset()         { *m = QueryListStudentsRequest{} }
func (m *QueryListStudentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListStudentsRequest) ProtoMessage()    {}
func (*QueryListStudentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{2}
}
func (m *QueryListStudentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListStudentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListStudentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListStudentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListStudentsRequest.Merge(m, src)
}
func (m *QueryListStudentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListStudentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListStudentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListStudentsRequest proto.InternalMessageInfo

func (m *QueryListStudentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListStudentsResponse is response type for the Query/ListStudents RPC method.
type QueryListStudentsResponse struct {
	Students   []Student           `protobuf:"bytes,1,rep,name=students,proto3" json:"students"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListStudentsResponse) Reset()         { *m = QueryListStudentsResponse{} }
func (m *QueryListStudentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListStudentsResponse) ProtoMessage()    {}
func (*QueryListStudentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{3}
}
func (m *QueryListStudentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListStudentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListStudentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListStudentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListStudentsResponse.Merge(m, src)
}
func (m *QueryListStudentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListStudentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListStudentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListStudentsResponse proto.InternalMessageInfo

func (m *QueryListStudentsResponse) GetStudents() []Student {
	if m != nil {
		return m.Students
	}
	return nil
}

func (m *QueryListStudentsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetStudentRequest is request type for the Query/GetStudent RPC method.
type QueryGetStudentRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *QueryGetStudentRequest) Reset()         { *m = QueryGetStudentRequest{} }
func (m *QueryGetStudentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentRequest) ProtoMessage()    {}
func (*QueryGetStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{4}
}
func (m *QueryGetStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentRequest.Merge(m, src)
}
func (m *QueryGetStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentRequest proto.InternalMessageInfo

func (m *QueryGetStudentRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// QueryGetStudentResponse is response type for the Query/GetStudent RPC method.
type QueryGetStudentResponse struct {
	Student Student `protobuf:"bytes,1,opt,name=student,proto3" json:"student"`
}

func (m *QueryGetStudentResponse) Reset()         { *m = QueryGetStudentResponse{} }
func (m *QueryGetStudentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentResponse) ProtoMessage()    {}
func (*QueryGetStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{5}
}
func (m *QueryGetStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentResponse.Merge(m, src)
}
func (m *QueryGetStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentResponse proto.InternalMessageInfo

func (m *QueryGetStudentResponse) GetStudent() Student {
	if m != nil {
		return m.Student
	}
	return Student{}
}

// QueryListEnrollmentsRequest is request type for the Query/ListEnrollments RPC method.
type QueryListEnrollmentsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListEnrollmentsRequest) Reset()         { *m = QueryListEnrollmentsRequest{} }
func (m *QueryListEnrollmentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListEnrollmentsRequest) ProtoMessage()    {}
func (*QueryListEnrollmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{6}
}
func (m *QueryListEnrollmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListEnrollmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListEnrollmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListEnrollmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListEnrollmentsRequest.Merge(m, src)
}
func (m *QueryListEnrollmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListEnrollmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListEnrollmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListEnrollmentsRequest proto.InternalMessageInfo

func (m *QueryListEnrollmentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListEnrollmentsResponse is response type for the Query/ListEnrollments RPC method.
type QueryListEnrollmentsResponse struct {
	Enrollments []StudentEnrollment `protobuf:"bytes,1,rep,name=enrollments,proto3" json:"enrollments"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListEnrollmentsResponse) Reset()         { *m = QueryListEnrollmentsResponse{} }
func (m *QueryListEnrollmentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListEnrollmentsResponse) ProtoMessage()    {}
func (*QueryListEnrollmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{7}
}
func (m *QueryListEnrollmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListEnrollmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListEnrollmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListEnrollmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListEnrollmentsResponse.Merge(m, src)
}
func (m *QueryListEnrollmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListEnrollmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListEnrollmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListEnrollmentsResponse proto.InternalMessageInfo

func (m *QueryListEnrollmentsResponse) GetEnrollments() []StudentEnrollment {
	if m != nil {
		return m.Enrollments
	}
	return nil
}

func (m *QueryListEnrollmentsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEnrollmentRequest is request type for the Query/GetEnrollment RPC method.
type QueryGetEnrollmentRequest struct {
	EnrollmentId string `protobuf:"bytes,1,opt,name=enrollment_id,json=enrollmentId,proto3" json:"enrollment_id,omitempty"`
}

func (m *QueryGetEnrollmentRequest) Reset()         { *m = QueryGetEnrollmentRequest{} }
func (m *QueryGetEnrollmentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnrollmentRequest) ProtoMessage()    {}
func (*QueryGetEnrollmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{8}
}
func (m *QueryGetEnrollmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnrollmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnrollmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnrollmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnrollmentRequest.Merge(m, src)
}
func (m *QueryGetEnrollmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnrollmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnrollmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnrollmentRequest proto.InternalMessageInfo

func (m *QueryGetEnrollmentRequest) GetEnrollmentId() string {
	if m != nil {
		return m.EnrollmentId
	}
	return ""
}

// QueryGetEnrollmentResponse is response type for the Query/GetEnrollment RPC method.
type QueryGetEnrollmentResponse struct {
	Enrollment StudentEnrollment `protobuf:"bytes,1,opt,name=enrollment,proto3" json:"enrollment"`
}

func (m *QueryGetEnrollmentResponse) Reset()         { *m = QueryGetEnrollmentResponse{} }
func (m *QueryGetEnrollmentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnrollmentResponse) ProtoMessage()    {}
func (*QueryGetEnrollmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{9}
}
func (m *QueryGetEnrollmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnrollmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnrollmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnrollmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnrollmentResponse.Merge(m, src)
}
func (m *QueryGetEnrollmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnrollmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnrollmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnrollmentResponse proto.InternalMessageInfo

func (m *QueryGetEnrollmentResponse) GetEnrollment() StudentEnrollment {
	if m != nil {
		return m.Enrollment
	}
	return StudentEnrollment{}
}

// QueryGetEnrollmentsByStudentRequest is request type for the Query/GetEnrollmentsByStudent RPC method.
type QueryGetEnrollmentsByStudentRequest struct {
	StudentId  string             `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEnrollmentsByStudentRequest) Reset()         { *m = QueryGetEnrollmentsByStudentRequest{} }
func (m *QueryGetEnrollmentsByStudentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnrollmentsByStudentRequest) ProtoMessage()    {}
func (*QueryGetEnrollmentsByStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{10}
}
func (m *QueryGetEnrollmentsByStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnrollmentsByStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnrollmentsByStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnrollmentsByStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnrollmentsByStudentRequest.Merge(m, src)
}
func (m *QueryGetEnrollmentsByStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnrollmentsByStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnrollmentsByStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnrollmentsByStudentRequest proto.InternalMessageInfo

func (m *QueryGetEnrollmentsByStudentRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *QueryGetEnrollmentsByStudentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEnrollmentsByStudentResponse is response type for the Query/GetEnrollmentsByStudent RPC method.
type QueryGetEnrollmentsByStudentResponse struct {
	Enrollments []StudentEnrollment `protobuf:"bytes,1,rep,name=enrollments,proto3" json:"enrollments"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEnrollmentsByStudentResponse) Reset()         { *m = QueryGetEnrollmentsByStudentResponse{} }
func (m *QueryGetEnrollmentsByStudentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEnrollmentsByStudentResponse) ProtoMessage()    {}
func (*QueryGetEnrollmentsByStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{11}
}
func (m *QueryGetEnrollmentsByStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEnrollmentsByStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEnrollmentsByStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEnrollmentsByStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEnrollmentsByStudentResponse.Merge(m, src)
}
func (m *QueryGetEnrollmentsByStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEnrollmentsByStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEnrollmentsByStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEnrollmentsByStudentResponse proto.InternalMessageInfo

func (m *QueryGetEnrollmentsByStudentResponse) GetEnrollments() []StudentEnrollment {
	if m != nil {
		return m.Enrollments
	}
	return nil
}

func (m *QueryGetEnrollmentsByStudentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetStudentProgressRequest is request type for the Query/GetStudentProgress RPC method.
type QueryGetStudentProgressRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *QueryGetStudentProgressRequest) Reset()         { *m = QueryGetStudentProgressRequest{} }
func (m *QueryGetStudentProgressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentProgressRequest) ProtoMessage()    {}
func (*QueryGetStudentProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{12}
}
func (m *QueryGetStudentProgressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentProgressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentProgressRequest.Merge(m, src)
}
func (m *QueryGetStudentProgressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentProgressRequest proto.InternalMessageInfo

func (m *QueryGetStudentProgressRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// QueryGetStudentProgressResponse is response type for the Query/GetStudentProgress RPC method.
type QueryGetStudentProgressResponse struct {
	Progress AcademicProgress `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress"`
}

func (m *QueryGetStudentProgressResponse) Reset()         { *m = QueryGetStudentProgressResponse{} }
func (m *QueryGetStudentProgressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentProgressResponse) ProtoMessage()    {}
func (*QueryGetStudentProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{13}
}
func (m *QueryGetStudentProgressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentProgressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentProgressResponse.Merge(m, src)
}
func (m *QueryGetStudentProgressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentProgressResponse proto.InternalMessageInfo

func (m *QueryGetStudentProgressResponse) GetProgress() AcademicProgress {
	if m != nil {
		return m.Progress
	}
	return AcademicProgress{}
}

// QueryGetStudentsByInstitutionRequest is request type for the Query/GetStudentsByInstitution RPC method.
type QueryGetStudentsByInstitutionRequest struct {
	InstitutionId string             `protobuf:"bytes,1,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStudentsByInstitutionRequest) Reset()         { *m = QueryGetStudentsByInstitutionRequest{} }
func (m *QueryGetStudentsByInstitutionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentsByInstitutionRequest) ProtoMessage()    {}
func (*QueryGetStudentsByInstitutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{14}
}
func (m *QueryGetStudentsByInstitutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentsByInstitutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentsByInstitutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentsByInstitutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentsByInstitutionRequest.Merge(m, src)
}
func (m *QueryGetStudentsByInstitutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentsByInstitutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentsByInstitutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentsByInstitutionRequest proto.InternalMessageInfo

func (m *QueryGetStudentsByInstitutionRequest) GetInstitutionId() string {
	if m != nil {
		return m.InstitutionId
	}
	return ""
}

func (m *QueryGetStudentsByInstitutionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetStudentsByInstitutionResponse is response type for the Query/GetStudentsByInstitution RPC method.
type QueryGetStudentsByInstitutionResponse struct {
	Students   []Student           `protobuf:"bytes,1,rep,name=students,proto3" json:"students"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStudentsByInstitutionResponse) Reset()         { *m = QueryGetStudentsByInstitutionResponse{} }
func (m *QueryGetStudentsByInstitutionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentsByInstitutionResponse) ProtoMessage()    {}
func (*QueryGetStudentsByInstitutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{15}
}
func (m *QueryGetStudentsByInstitutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentsByInstitutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentsByInstitutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentsByInstitutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentsByInstitutionResponse.Merge(m, src)
}
func (m *QueryGetStudentsByInstitutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentsByInstitutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentsByInstitutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentsByInstitutionResponse proto.InternalMessageInfo

func (m *QueryGetStudentsByInstitutionResponse) GetStudents() []Student {
	if m != nil {
		return m.Students
	}
	return nil
}

func (m *QueryGetStudentsByInstitutionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetStudentsByCourseRequest is request type for the Query/GetStudentsByCourse RPC method.
type QueryGetStudentsByCourseRequest struct {
	CourseId   string             `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStudentsByCourseRequest) Reset()         { *m = QueryGetStudentsByCourseRequest{} }
func (m *QueryGetStudentsByCourseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentsByCourseRequest) ProtoMessage()    {}
func (*QueryGetStudentsByCourseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{16}
}
func (m *QueryGetStudentsByCourseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentsByCourseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentsByCourseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentsByCourseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentsByCourseRequest.Merge(m, src)
}
func (m *QueryGetStudentsByCourseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentsByCourseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentsByCourseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentsByCourseRequest proto.InternalMessageInfo

func (m *QueryGetStudentsByCourseRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *QueryGetStudentsByCourseRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetStudentsByCourseResponse is response type for the Query/GetStudentsByCourse RPC method.
type QueryGetStudentsByCourseResponse struct {
	Students   []Student           `protobuf:"bytes,1,rep,name=students,proto3" json:"students"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStudentsByCourseResponse) Reset()         { *m = QueryGetStudentsByCourseResponse{} }
func (m *QueryGetStudentsByCourseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentsByCourseResponse) ProtoMessage()    {}
func (*QueryGetStudentsByCourseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{17}
}
func (m *QueryGetStudentsByCourseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentsByCourseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentsByCourseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentsByCourseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentsByCourseResponse.Merge(m, src)
}
func (m *QueryGetStudentsByCourseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentsByCourseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentsByCourseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentsByCourseResponse proto.InternalMessageInfo

func (m *QueryGetStudentsByCourseResponse) GetStudents() []Student {
	if m != nil {
		return m.Students
	}
	return nil
}

func (m *QueryGetStudentsByCourseResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetStudentAcademicTreeRequest is request type for the Query/GetStudentAcademicTree RPC method.
type QueryGetStudentAcademicTreeRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *QueryGetStudentAcademicTreeRequest) Reset()         { *m = QueryGetStudentAcademicTreeRequest{} }
func (m *QueryGetStudentAcademicTreeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentAcademicTreeRequest) ProtoMessage()    {}
func (*QueryGetStudentAcademicTreeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{18}
}
func (m *QueryGetStudentAcademicTreeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentAcademicTreeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentAcademicTreeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentAcademicTreeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentAcademicTreeRequest.Merge(m, src)
}
func (m *QueryGetStudentAcademicTreeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentAcademicTreeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentAcademicTreeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentAcademicTreeRequest proto.InternalMessageInfo

func (m *QueryGetStudentAcademicTreeRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// QueryGetStudentAcademicTreeResponse is response type for the Query/GetStudentAcademicTree RPC method.
type QueryGetStudentAcademicTreeResponse struct {
	AcademicTree StudentAcademicTree `protobuf:"bytes,1,opt,name=academic_tree,json=academicTree,proto3" json:"academic_tree"`
}

func (m *QueryGetStudentAcademicTreeResponse) Reset()         { *m = QueryGetStudentAcademicTreeResponse{} }
func (m *QueryGetStudentAcademicTreeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudentAcademicTreeResponse) ProtoMessage()    {}
func (*QueryGetStudentAcademicTreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{19}
}
func (m *QueryGetStudentAcademicTreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudentAcademicTreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudentAcademicTreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudentAcademicTreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudentAcademicTreeResponse.Merge(m, src)
}
func (m *QueryGetStudentAcademicTreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudentAcademicTreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudentAcademicTreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudentAcademicTreeResponse proto.InternalMessageInfo

func (m *QueryGetStudentAcademicTreeResponse) GetAcademicTree() StudentAcademicTree {
	if m != nil {
		return m.AcademicTree
	}
	return StudentAcademicTree{}
}

// QueryCheckGraduationEligibilityRequest is request type for the Query/CheckGraduationEligibility RPC method.
type QueryCheckGraduationEligibilityRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *QueryCheckGraduationEligibilityRequest) Reset() {
	*m = QueryCheckGraduationEligibilityRequest{}
}
func (m *QueryCheckGraduationEligibilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckGraduationEligibilityRequest) ProtoMessage()    {}
func (*QueryCheckGraduationEligibilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{20}
}
func (m *QueryCheckGraduationEligibilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckGraduationEligibilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckGraduationEligibilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckGraduationEligibilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckGraduationEligibilityRequest.Merge(m, src)
}
func (m *QueryCheckGraduationEligibilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckGraduationEligibilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckGraduationEligibilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckGraduationEligibilityRequest proto.InternalMessageInfo

func (m *QueryCheckGraduationEligibilityRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// QueryCheckGraduationEligibilityResponse is response type for the Query/CheckGraduationEligibility RPC method.
type QueryCheckGraduationEligibilityResponse struct {
	GraduationStatus GraduationStatus `protobuf:"bytes,1,opt,name=graduation_status,json=graduationStatus,proto3" json:"graduation_status"`
	IsEligible       bool             `protobuf:"varint,2,opt,name=is_eligible,json=isEligible,proto3" json:"is_eligible,omitempty"`
	Message          string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *QueryCheckGraduationEligibilityResponse) Reset() {
	*m = QueryCheckGraduationEligibilityResponse{}
}
func (m *QueryCheckGraduationEligibilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckGraduationEligibilityResponse) ProtoMessage()    {}
func (*QueryCheckGraduationEligibilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_70d66d97c81cd8b4, []int{21}
}
func (m *QueryCheckGraduationEligibilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckGraduationEligibilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckGraduationEligibilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckGraduationEligibilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckGraduationEligibilityResponse.Merge(m, src)
}
func (m *QueryCheckGraduationEligibilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckGraduationEligibilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckGraduationEligibilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckGraduationEligibilityResponse proto.InternalMessageInfo

func (m *QueryCheckGraduationEligibilityResponse) GetGraduationStatus() GraduationStatus {
	if m != nil {
		return m.GraduationStatus
	}
	return GraduationStatus{}
}

func (m *QueryCheckGraduationEligibilityResponse) GetIsEligible() bool {
	if m != nil {
		return m.IsEligible
	}
	return false
}

func (m *QueryCheckGraduationEligibilityResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "academictoken.student.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "academictoken.student.QueryParamsResponse")
	proto.RegisterType((*QueryListStudentsRequest)(nil), "academictoken.student.QueryListStudentsRequest")
	proto.RegisterType((*QueryListStudentsResponse)(nil), "academictoken.student.QueryListStudentsResponse")
	proto.RegisterType((*QueryGetStudentRequest)(nil), "academictoken.student.QueryGetStudentRequest")
	proto.RegisterType((*QueryGetStudentResponse)(nil), "academictoken.student.QueryGetStudentResponse")
	proto.RegisterType((*QueryListEnrollmentsRequest)(nil), "academictoken.student.QueryListEnrollmentsRequest")
	proto.RegisterType((*QueryListEnrollmentsResponse)(nil), "academictoken.student.QueryListEnrollmentsResponse")
	proto.RegisterType((*QueryGetEnrollmentRequest)(nil), "academictoken.student.QueryGetEnrollmentRequest")
	proto.RegisterType((*QueryGetEnrollmentResponse)(nil), "academictoken.student.QueryGetEnrollmentResponse")
	proto.RegisterType((*QueryGetEnrollmentsByStudentRequest)(nil), "academictoken.student.QueryGetEnrollmentsByStudentRequest")
	proto.RegisterType((*QueryGetEnrollmentsByStudentResponse)(nil), "academictoken.student.QueryGetEnrollmentsByStudentResponse")
	proto.RegisterType((*QueryGetStudentProgressRequest)(nil), "academictoken.student.QueryGetStudentProgressRequest")
	proto.RegisterType((*QueryGetStudentProgressResponse)(nil), "academictoken.student.QueryGetStudentProgressResponse")
	proto.RegisterType((*QueryGetStudentsByInstitutionRequest)(nil), "academictoken.student.QueryGetStudentsByInstitutionRequest")
	proto.RegisterType((*QueryGetStudentsByInstitutionResponse)(nil), "academictoken.student.QueryGetStudentsByInstitutionResponse")
	proto.RegisterType((*QueryGetStudentsByCourseRequest)(nil), "academictoken.student.QueryGetStudentsByCourseRequest")
	proto.RegisterType((*QueryGetStudentsByCourseResponse)(nil), "academictoken.student.QueryGetStudentsByCourseResponse")
	proto.RegisterType((*QueryGetStudentAcademicTreeRequest)(nil), "academictoken.student.QueryGetStudentAcademicTreeRequest")
	proto.RegisterType((*QueryGetStudentAcademicTreeResponse)(nil), "academictoken.student.QueryGetStudentAcademicTreeResponse")
	proto.RegisterType((*QueryCheckGraduationEligibilityRequest)(nil), "academictoken.student.QueryCheckGraduationEligibilityRequest")
	proto.RegisterType((*QueryCheckGraduationEligibilityResponse)(nil), "academictoken.student.QueryCheckGraduationEligibilityResponse")
}

func init() { proto.RegisterFile("academictoken/student/query.proto", fileDescriptor_70d66d97c81cd8b4) }

var fileDescriptor_70d66d97c81cd8b4 = []byte{
	// 1191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x4f, 0x1d, 0xd5,
	0x17, 0xe7, 0xd2, 0xef, 0x97, 0xc2, 0x01, 0xb4, 0xbd, 0xad, 0x2d, 0x4e, 0xcb, 0xa3, 0x1d, 0x4a,
	0x41, 0x22, 0x33, 0x05, 0x4a, 0x51, 0x28, 0x2d, 0x3e, 0x82, 0x84, 0x68, 0x0c, 0xbe, 0x6a, 0x8c,
	0xdd, 0x90, 0x81, 0x77, 0x33, 0x4e, 0xfa, 0xde, 0x9b, 0xd7, 0xb9, 0xf3, 0x8c, 0x2f, 0xc8, 0xc6,
	0x45, 0x57, 0x2e, 0x4c, 0x8c, 0x1b, 0x77, 0x6e, 0x1a, 0x37, 0xc6, 0xc6, 0x9d, 0x3b, 0x7f, 0x6c,
	0xba, 0x6c, 0x52, 0x17, 0x2e, 0x8c, 0x31, 0x60, 0xa2, 0x7f, 0x86, 0x79, 0x77, 0xce, 0x7d, 0x33,
	0xf3, 0xe6, 0xc7, 0x9b, 0x21, 0x2c, 0xd8, 0xc0, 0x70, 0xe6, 0xfc, 0xf8, 0x7c, 0xce, 0x39, 0xf7,
	0xce, 0x27, 0xc0, 0x55, 0x63, 0xd7, 0x28, 0xb3, 0xaa, 0xb5, 0xeb, 0xda, 0x0f, 0x58, 0x4d, 0xe7,
	0x6e, 0xa3, 0xcc, 0x6a, 0xae, 0xfe, 0xb0, 0xc1, 0x9c, 0xa6, 0x56, 0x77, 0x6c, 0xd7, 0xa6, 0x2f,
	0x85, 0x5c, 0x34, 0x74, 0x51, 0xce, 0x1a, 0x55, 0xab, 0x66, 0xeb, 0xe2, 0xa7, 0xe7, 0xa9, 0x9c,
	0x37, 0x6d, 0xd3, 0x16, 0x8f, 0x7a, 0xeb, 0x09, 0xad, 0x97, 0x4d, 0xdb, 0x36, 0x2b, 0x4c, 0x37,
	0xea, 0x96, 0x6e, 0xd4, 0x6a, 0xb6, 0x6b, 0xb8, 0x96, 0x5d, 0xe3, 0xf8, 0x76, 0x7a, 0xd7, 0xe6,
	0x55, 0x9b, 0xeb, 0x3b, 0x06, 0x67, 0x5e, 0x59, 0xfd, 0xe3, 0xd9, 0x1d, 0xe6, 0x1a, 0xb3, 0x7a,
	0xdd, 0x30, 0xad, 0x9a, 0x70, 0x46, 0x5f, 0x35, 0x1e, 0x6c, 0xdd, 0x70, 0x8c, 0xaa, 0xcc, 0x37,
	0x1e, 0xef, 0x83, 0xbf, 0xd1, 0x49, 0x4b, 0x75, 0xda, 0x66, 0x35, 0xc7, 0xae, 0x54, 0xaa, 0xbe,
	0xff, 0x6c, 0xba, 0xbf, 0x7c, 0xbb, 0xed, 0x3a, 0x8c, 0x61, 0xc8, 0x4c, 0x7c, 0x48, 0xdb, 0xb5,
	0xee, 0xd8, 0xa6, 0xc3, 0x38, 0x4f, 0x77, 0x37, 0x1d, 0xa3, 0xdc, 0x10, 0x2d, 0xd8, 0xe6, 0xae,
	0xe1, 0x36, 0xd0, 0x5d, 0x3d, 0x0f, 0xf4, 0xdd, 0x56, 0xaf, 0xb6, 0x04, 0xf5, 0x12, 0x7b, 0xd8,
	0x60, 0xdc, 0x55, 0x3f, 0x80, 0x73, 0x21, 0x2b, 0xaf, 0xdb, 0x35, 0xce, 0xe8, 0x2a, 0xf4, 0x79,
	0x2d, 0x1a, 0x21, 0x57, 0xc8, 0xd4, 0xe0, 0xdc, 0xa8, 0x16, 0x3b, 0x51, 0xcd, 0x0b, 0x2b, 0x0e,
	0x3c, 0xfd, 0x73, 0xac, 0xe7, 0xdb, 0x7f, 0x9e, 0x4c, 0x93, 0x12, 0xc6, 0xa9, 0x3b, 0x30, 0x22,
	0x12, 0xbf, 0x6d, 0x71, 0xf7, 0x9e, 0xe7, 0x2d, 0x8b, 0xd2, 0x37, 0x01, 0xfc, 0x41, 0x61, 0x85,
	0xeb, 0x9a, 0x37, 0x55, 0xad, 0x35, 0x55, 0xcd, 0x5b, 0x26, 0x9c, 0xaa, 0xb6, 0x65, 0x98, 0x0c,
	0x63, 0x4b, 0x81, 0x48, 0xf5, 0x31, 0x81, 0x97, 0x63, 0x8a, 0xb4, 0x39, 0xf4, 0x23, 0xcc, 0x16,
	0x8b, 0x53, 0x53, 0x83, 0x73, 0x85, 0x04, 0x16, 0x18, 0x5a, 0xfc, 0x5f, 0x8b, 0x46, 0xa9, 0x1d,
	0x45, 0x37, 0x42, 0x38, 0x7b, 0x05, 0xce, 0xc9, 0xae, 0x38, 0xbd, 0xf2, 0x21, 0xa0, 0x8b, 0x70,
	0x41, 0xe0, 0xdc, 0x60, 0x12, 0xa6, 0x6c, 0xc5, 0x28, 0x80, 0x5c, 0x09, 0xab, 0x2c, 0x5a, 0x31,
	0x50, 0x1a, 0x40, 0xcb, 0x66, 0x59, 0xfd, 0x10, 0x2e, 0x46, 0x02, 0x91, 0xde, 0x1d, 0x38, 0x8d,
	0x7e, 0xd8, 0xc1, 0x6c, 0xec, 0x64, 0x90, 0xca, 0xe0, 0x52, 0xbb, 0x77, 0xeb, 0xed, 0xed, 0x3d,
	0xf6, 0x19, 0xfd, 0x48, 0xe0, 0x72, 0x7c, 0x1d, 0xe4, 0xb1, 0x05, 0x83, 0xfe, 0xe1, 0x91, 0x93,
	0x9a, 0x4a, 0xe7, 0xe2, 0xe7, 0x41, 0x56, 0xc1, 0x14, 0xc7, 0x37, 0xb6, 0x55, 0x5c, 0xaf, 0x0d,
	0x16, 0xa8, 0x28, 0x1b, 0x34, 0x0e, 0xc3, 0x7e, 0x51, 0x7f, 0x78, 0x43, 0xbe, 0x71, 0xb3, 0xac,
	0x56, 0x40, 0x89, 0xcb, 0x80, 0xd4, 0xdf, 0x01, 0xf0, 0xbd, 0xb1, 0xc7, 0x79, 0x99, 0x07, 0x32,
	0xa8, 0x9f, 0x13, 0x18, 0x8f, 0x96, 0xe3, 0xc5, 0x66, 0xae, 0xa5, 0xeb, 0x18, 0x7d, 0xef, 0x91,
	0x47, 0xff, 0x33, 0x81, 0x6b, 0xe9, 0x70, 0x4e, 0xfe, 0x0a, 0xdc, 0x85, 0x42, 0xc7, 0x01, 0xdc,
	0xc2, 0x5b, 0x38, 0xe3, 0x09, 0xae, 0xc0, 0x58, 0x62, 0x02, 0xa4, 0xbf, 0x09, 0xfd, 0xf2, 0x6a,
	0xc7, 0x25, 0x98, 0x4c, 0xe0, 0xfe, 0x06, 0x5a, 0x65, 0x0a, 0x79, 0x63, 0xc9, 0x70, 0xf5, 0xab,
	0x40, 0xcb, 0xe5, 0x85, 0x58, 0x6c, 0x6e, 0xd6, 0xb8, 0x6b, 0xb9, 0x8d, 0x16, 0x21, 0x89, 0x7a,
	0x02, 0x5e, 0xb0, 0x7c, 0xab, 0x8f, 0x7c, 0x38, 0x60, 0x3d, 0xc6, 0x55, 0xf8, 0x81, 0xc0, 0x44,
	0x17, 0x5c, 0x27, 0xef, 0xd6, 0x7e, 0x44, 0x22, 0xb3, 0xe3, 0xc5, 0xe6, 0x9a, 0xdd, 0x70, 0xb8,
	0x24, 0x49, 0x2f, 0xc1, 0xc0, 0xae, 0x30, 0xf8, 0x2d, 0xec, 0xf7, 0x0c, 0xc7, 0xd8, 0xbd, 0xef,
	0x08, 0x5c, 0x49, 0x06, 0x72, 0xf2, 0x1a, 0xb7, 0x06, 0x6a, 0x07, 0x5c, 0xb9, 0xb8, 0xef, 0x39,
	0x8c, 0x65, 0x3c, 0x38, 0x9f, 0xfa, 0x77, 0x59, 0x6c, 0x12, 0xa4, 0xfd, 0x3e, 0x0c, 0x87, 0xb4,
	0x14, 0x9e, 0xa0, 0xe9, 0x74, 0xee, 0xc1, 0x54, 0xd8, 0x87, 0x21, 0x23, 0x60, 0x53, 0x37, 0xe0,
	0xba, 0xa8, 0xbe, 0xf6, 0x11, 0xdb, 0x7d, 0xb0, 0xd1, 0x96, 0x54, 0xeb, 0x15, 0xcb, 0xb4, 0x76,
	0xac, 0x8a, 0xe5, 0x36, 0x33, 0xd2, 0xf8, 0x89, 0xc0, 0x64, 0xd7, 0x4c, 0xc8, 0xe5, 0x3e, 0x9c,
	0x8d, 0xa8, 0xb7, 0x2e, 0x37, 0x82, 0x9f, 0xf0, 0x9e, 0x70, 0x47, 0x32, 0x67, 0xcc, 0x0e, 0x3b,
	0x1d, 0x83, 0x41, 0x8b, 0x6f, 0x33, 0x51, 0xb5, 0xc2, 0xc4, 0x74, 0xfb, 0x4b, 0x60, 0xf1, 0x75,
	0xb4, 0xd0, 0x11, 0x38, 0x5d, 0x65, 0x9c, 0x1b, 0x26, 0x1b, 0x39, 0x25, 0x48, 0xc8, 0x3f, 0xe7,
	0xbe, 0x3f, 0x03, 0xff, 0x17, 0x14, 0xe8, 0x23, 0x02, 0x7d, 0x9e, 0xe4, 0xa3, 0xaf, 0x24, 0x00,
	0x8a, 0x6a, 0x4c, 0x65, 0x3a, 0x8b, 0xab, 0xd7, 0x02, 0x75, 0xe2, 0xb3, 0xe7, 0x7f, 0x7f, 0xd9,
	0x3b, 0x46, 0x47, 0xf5, 0x34, 0xe1, 0x4e, 0xbf, 0x26, 0x30, 0x14, 0x14, 0x7d, 0x54, 0x4f, 0xab,
	0x11, 0xa3, 0x41, 0x95, 0x1b, 0xd9, 0x03, 0x10, 0xda, 0xa4, 0x80, 0x76, 0x95, 0x8e, 0xe9, 0xa9,
	0xd2, 0x9e, 0xd3, 0x6f, 0x08, 0x80, 0xbf, 0xb5, 0x74, 0x26, 0xad, 0x52, 0x44, 0x11, 0x2a, 0x5a,
	0x56, 0x77, 0x84, 0x75, 0x53, 0xc0, 0xd2, 0xe8, 0xab, 0x5d, 0x60, 0xe9, 0x7b, 0xfe, 0x9a, 0xee,
	0xd3, 0xc7, 0x04, 0x5e, 0xec, 0x50, 0x64, 0x74, 0xae, 0x5b, 0x4b, 0xa2, 0x32, 0x51, 0x99, 0xcf,
	0x15, 0x83, 0x90, 0xa7, 0x05, 0xe4, 0x6b, 0x54, 0x4d, 0x80, 0x1c, 0xfc, 0x92, 0x3f, 0x21, 0x30,
	0x1c, 0xd2, 0x0f, 0xf4, 0x46, 0x97, 0x06, 0x45, 0xa4, 0x9a, 0x32, 0x9b, 0x23, 0x02, 0x21, 0x2e,
	0x09, 0x88, 0x37, 0xe9, 0x5c, 0x77, 0x88, 0xfa, 0x5e, 0x48, 0x07, 0xee, 0xd3, 0xdf, 0x08, 0x5c,
	0x4c, 0x90, 0x3c, 0x74, 0x29, 0x33, 0x94, 0x88, 0x6c, 0x53, 0x96, 0x8f, 0x14, 0x8b, 0x84, 0x56,
	0x05, 0xa1, 0x25, 0xfa, 0x5a, 0x9e, 0x35, 0x09, 0x4d, 0xe2, 0x17, 0x02, 0x34, 0xaa, 0x62, 0xe8,
	0x42, 0xb6, 0x7d, 0xed, 0x90, 0x4d, 0xca, 0xad, 0xbc, 0x61, 0xc8, 0x63, 0x45, 0xf0, 0x58, 0xa4,
	0x0b, 0xb9, 0x78, 0x48, 0x81, 0x44, 0xff, 0x20, 0x30, 0x92, 0xa4, 0x41, 0xe8, 0x72, 0x36, 0x4c,
	0xb1, 0x8a, 0x4a, 0xb9, 0x7d, 0xb4, 0x60, 0xa4, 0xb5, 0x2e, 0x68, 0xdd, 0xa5, 0x2b, 0x09, 0xb4,
	0x02, 0xb2, 0x8c, 0xeb, 0x7b, 0x61, 0xe9, 0xb6, 0xef, 0x5f, 0x3d, 0xbf, 0x12, 0x38, 0x17, 0x23,
	0x12, 0xe8, 0xad, 0xcc, 0xe0, 0x42, 0xf2, 0x46, 0x59, 0xcc, 0x1d, 0x87, 0x7c, 0x96, 0x05, 0x9f,
	0x05, 0x3a, 0x9f, 0xc0, 0xc7, 0xd3, 0x48, 0x5c, 0xdf, 0x6b, 0xab, 0xa7, 0x00, 0x8b, 0xe7, 0x04,
	0x2e, 0xc4, 0x7f, 0xf6, 0xe9, 0xeb, 0xd9, 0x00, 0xc5, 0xe8, 0x0d, 0x65, 0xe9, 0x28, 0xa1, 0x48,
	0xa7, 0x28, 0xe8, 0xdc, 0xa6, 0x4b, 0xb9, 0xb6, 0x4e, 0xfa, 0xce, 0xb4, 0x84, 0x09, 0xfd, 0x97,
	0x80, 0x92, 0x2c, 0x02, 0xe8, 0x4a, 0x1a, 0xbc, 0xae, 0x32, 0x44, 0xb9, 0x73, 0xd4, 0x70, 0x64,
	0xf8, 0x96, 0x60, 0xb8, 0x4e, 0xd7, 0x72, 0x31, 0xf4, 0x65, 0xc6, 0x0c, 0xf3, 0x93, 0x16, 0x17,
	0x9f, 0x1e, 0x14, 0xc8, 0xb3, 0x83, 0x02, 0xf9, 0xeb, 0xa0, 0x40, 0xbe, 0x38, 0x2c, 0xf4, 0x3c,
	0x3b, 0x2c, 0xf4, 0xfc, 0x7e, 0x58, 0xe8, 0xb9, 0x3f, 0x1a, 0xce, 0xfe, 0x49, 0x3b, 0xbf, 0xdb,
	0xac, 0x33, 0xbe, 0xd3, 0x27, 0xfe, 0x57, 0x35, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5,
	0x61, 0xb6, 0x31, 0x64, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListStudents queries all students with pagination
	ListStudents(ctx context.Context, in *QueryListStudentsRequest, opts ...grpc.CallOption) (*QueryListStudentsResponse, error)
	// GetStudent queries a student by index
	GetStudent(ctx context.Context, in *QueryGetStudentRequest, opts ...grpc.CallOption) (*QueryGetStudentResponse, error)
	// ListEnrollments queries all enrollments with pagination
	ListEnrollments(ctx context.Context, in *QueryListEnrollmentsRequest, opts ...grpc.CallOption) (*QueryListEnrollmentsResponse, error)
	// GetEnrollment queries an enrollment by index
	GetEnrollment(ctx context.Context, in *QueryGetEnrollmentRequest, opts ...grpc.CallOption) (*QueryGetEnrollmentResponse, error)
	// GetEnrollmentsByStudent queries all enrollments for a specific student
	GetEnrollmentsByStudent(ctx context.Context, in *QueryGetEnrollmentsByStudentRequest, opts ...grpc.CallOption) (*QueryGetEnrollmentsByStudentResponse, error)
	// GetStudentProgress queries academic progress for a specific student
	GetStudentProgress(ctx context.Context, in *QueryGetStudentProgressRequest, opts ...grpc.CallOption) (*QueryGetStudentProgressResponse, error)
	// GetStudentsByInstitution queries students enrolled in a specific institution
	GetStudentsByInstitution(ctx context.Context, in *QueryGetStudentsByInstitutionRequest, opts ...grpc.CallOption) (*QueryGetStudentsByInstitutionResponse, error)
	// GetStudentsByCourse queries students enrolled in a specific course
	GetStudentsByCourse(ctx context.Context, in *QueryGetStudentsByCourseRequest, opts ...grpc.CallOption) (*QueryGetStudentsByCourseResponse, error)
	// GetStudentAcademicTree queries the academic tree for a specific student
	GetStudentAcademicTree(ctx context.Context, in *QueryGetStudentAcademicTreeRequest, opts ...grpc.CallOption) (*QueryGetStudentAcademicTreeResponse, error)
	// CheckGraduationEligibility checks if a student is eligible for graduation
	CheckGraduationEligibility(ctx context.Context, in *QueryCheckGraduationEligibilityRequest, opts ...grpc.CallOption) (*QueryCheckGraduationEligibilityResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListStudents(ctx context.Context, in *QueryListStudentsRequest, opts ...grpc.CallOption) (*QueryListStudentsResponse, error) {
	out := new(QueryListStudentsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/ListStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStudent(ctx context.Context, in *QueryGetStudentRequest, opts ...grpc.CallOption) (*QueryGetStudentResponse, error) {
	out := new(QueryGetStudentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListEnrollments(ctx context.Context, in *QueryListEnrollmentsRequest, opts ...grpc.CallOption) (*QueryListEnrollmentsResponse, error) {
	out := new(QueryListEnrollmentsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/ListEnrollments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEnrollment(ctx context.Context, in *QueryGetEnrollmentRequest, opts ...grpc.CallOption) (*QueryGetEnrollmentResponse, error) {
	out := new(QueryGetEnrollmentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/GetEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEnrollmentsByStudent(ctx context.Context, in *QueryGetEnrollmentsByStudentRequest, opts ...grpc.CallOption) (*QueryGetEnrollmentsByStudentResponse, error) {
	out := new(QueryGetEnrollmentsByStudentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/GetEnrollmentsByStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStudentProgress(ctx context.Context, in *QueryGetStudentProgressRequest, opts ...grpc.CallOption) (*QueryGetStudentProgressResponse, error) {
	out := new(QueryGetStudentProgressResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/GetStudentProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStudentsByInstitution(ctx context.Context, in *QueryGetStudentsByInstitutionRequest, opts ...grpc.CallOption) (*QueryGetStudentsByInstitutionResponse, error) {
	out := new(QueryGetStudentsByInstitutionResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/GetStudentsByInstitution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStudentsByCourse(ctx context.Context, in *QueryGetStudentsByCourseRequest, opts ...grpc.CallOption) (*QueryGetStudentsByCourseResponse, error) {
	out := new(QueryGetStudentsByCourseResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/GetStudentsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStudentAcademicTree(ctx context.Context, in *QueryGetStudentAcademicTreeRequest, opts ...grpc.CallOption) (*QueryGetStudentAcademicTreeResponse, error) {
	out := new(QueryGetStudentAcademicTreeResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/GetStudentAcademicTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckGraduationEligibility(ctx context.Context, in *QueryCheckGraduationEligibilityRequest, opts ...grpc.CallOption) (*QueryCheckGraduationEligibilityResponse, error) {
	out := new(QueryCheckGraduationEligibilityResponse)
	err := c.cc.Invoke(ctx, "/academictoken.student.Query/CheckGraduationEligibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListStudents queries all students with pagination
	ListStudents(context.Context, *QueryListStudentsRequest) (*QueryListStudentsResponse, error)
	// GetStudent queries a student by index
	GetStudent(context.Context, *QueryGetStudentRequest) (*QueryGetStudentResponse, error)
	// ListEnrollments queries all enrollments with pagination
	ListEnrollments(context.Context, *QueryListEnrollmentsRequest) (*QueryListEnrollmentsResponse, error)
	// GetEnrollment queries an enrollment by index
	GetEnrollment(context.Context, *QueryGetEnrollmentRequest) (*QueryGetEnrollmentResponse, error)
	// GetEnrollmentsByStudent queries all enrollments for a specific student
	GetEnrollmentsByStudent(context.Context, *QueryGetEnrollmentsByStudentRequest) (*QueryGetEnrollmentsByStudentResponse, error)
	// GetStudentProgress queries academic progress for a specific student
	GetStudentProgress(context.Context, *QueryGetStudentProgressRequest) (*QueryGetStudentProgressResponse, error)
	// GetStudentsByInstitution queries students enrolled in a specific institution
	GetStudentsByInstitution(context.Context, *QueryGetStudentsByInstitutionRequest) (*QueryGetStudentsByInstitutionResponse, error)
	// GetStudentsByCourse queries students enrolled in a specific course
	GetStudentsByCourse(context.Context, *QueryGetStudentsByCourseRequest) (*QueryGetStudentsByCourseResponse, error)
	// GetStudentAcademicTree queries the academic tree for a specific student
	GetStudentAcademicTree(context.Context, *QueryGetStudentAcademicTreeRequest) (*QueryGetStudentAcademicTreeResponse, error)
	// CheckGraduationEligibility checks if a student is eligible for graduation
	CheckGraduationEligibility(context.Context, *QueryCheckGraduationEligibilityRequest) (*QueryCheckGraduationEligibilityResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ListStudents(ctx context.Context, req *QueryListStudentsRequest) (*QueryListStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudents not implemented")
}
func (*UnimplementedQueryServer) GetStudent(ctx context.Context, req *QueryGetStudentRequest) (*QueryGetStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (*UnimplementedQueryServer) ListEnrollments(ctx context.Context, req *QueryListEnrollmentsRequest) (*QueryListEnrollmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnrollments not implemented")
}
func (*UnimplementedQueryServer) GetEnrollment(ctx context.Context, req *QueryGetEnrollmentRequest) (*QueryGetEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollment not implemented")
}
func (*UnimplementedQueryServer) GetEnrollmentsByStudent(ctx context.Context, req *QueryGetEnrollmentsByStudentRequest) (*QueryGetEnrollmentsByStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentsByStudent not implemented")
}
func (*UnimplementedQueryServer) GetStudentProgress(ctx context.Context, req *QueryGetStudentProgressRequest) (*QueryGetStudentProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentProgress not implemented")
}
func (*UnimplementedQueryServer) GetStudentsByInstitution(ctx context.Context, req *QueryGetStudentsByInstitutionRequest) (*QueryGetStudentsByInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByInstitution not implemented")
}
func (*UnimplementedQueryServer) GetStudentsByCourse(ctx context.Context, req *QueryGetStudentsByCourseRequest) (*QueryGetStudentsByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByCourse not implemented")
}
func (*UnimplementedQueryServer) GetStudentAcademicTree(ctx context.Context, req *QueryGetStudentAcademicTreeRequest) (*QueryGetStudentAcademicTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentAcademicTree not implemented")
}
func (*UnimplementedQueryServer) CheckGraduationEligibility(ctx context.Context, req *QueryCheckGraduationEligibilityRequest) (*QueryCheckGraduationEligibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGraduationEligibility not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/ListStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListStudents(ctx, req.(*QueryListStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStudent(ctx, req.(*QueryGetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListEnrollmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/ListEnrollments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListEnrollments(ctx, req.(*QueryListEnrollmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/GetEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEnrollment(ctx, req.(*QueryGetEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEnrollmentsByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEnrollmentsByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEnrollmentsByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/GetEnrollmentsByStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEnrollmentsByStudent(ctx, req.(*QueryGetEnrollmentsByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStudentProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudentProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStudentProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/GetStudentProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStudentProgress(ctx, req.(*QueryGetStudentProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStudentsByInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudentsByInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStudentsByInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/GetStudentsByInstitution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStudentsByInstitution(ctx, req.(*QueryGetStudentsByInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStudentsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudentsByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStudentsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/GetStudentsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStudentsByCourse(ctx, req.(*QueryGetStudentsByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStudentAcademicTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudentAcademicTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStudentAcademicTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/GetStudentAcademicTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStudentAcademicTree(ctx, req.(*QueryGetStudentAcademicTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckGraduationEligibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckGraduationEligibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckGraduationEligibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.student.Query/CheckGraduationEligibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckGraduationEligibility(ctx, req.(*QueryCheckGraduationEligibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.student.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListStudents",
			Handler:    _Query_ListStudents_Handler,
		},
		{
			MethodName: "GetStudent",
			Handler:    _Query_GetStudent_Handler,
		},
		{
			MethodName: "ListEnrollments",
			Handler:    _Query_ListEnrollments_Handler,
		},
		{
			MethodName: "GetEnrollment",
			Handler:    _Query_GetEnrollment_Handler,
		},
		{
			MethodName: "GetEnrollmentsByStudent",
			Handler:    _Query_GetEnrollmentsByStudent_Handler,
		},
		{
			MethodName: "GetStudentProgress",
			Handler:    _Query_GetStudentProgress_Handler,
		},
		{
			MethodName: "GetStudentsByInstitution",
			Handler:    _Query_GetStudentsByInstitution_Handler,
		},
		{
			MethodName: "GetStudentsByCourse",
			Handler:    _Query_GetStudentsByCourse_Handler,
		},
		{
			MethodName: "GetStudentAcademicTree",
			Handler:    _Query_GetStudentAcademicTree_Handler,
		},
		{
			MethodName: "CheckGraduationEligibility",
			Handler:    _Query_CheckGraduationEligibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/student/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListStudentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListStudentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListStudentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListStudentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListStudentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListStudentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Students) > 0 {
		for iNdEx := len(m.Students) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Students[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Student.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListEnrollmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListEnrollmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListEnrollmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListEnrollmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListEnrollmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListEnrollmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Enrollments) > 0 {
		for iNdEx := len(m.Enrollments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Enrollments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEnrollmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnrollmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnrollmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnrollmentId) > 0 {
		i -= len(m.EnrollmentId)
		copy(dAtA[i:], m.EnrollmentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EnrollmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEnrollmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnrollmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnrollmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Enrollment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEnrollmentsByStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnrollmentsByStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnrollmentsByStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEnrollmentsByStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEnrollmentsByStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEnrollmentsByStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Enrollments) > 0 {
		for iNdEx := len(m.Enrollments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Enrollments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentProgressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentProgressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentProgressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentProgressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentProgressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentProgressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Progress.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentsByInstitutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentsByInstitutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentsByInstitutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InstitutionId) > 0 {
		i -= len(m.InstitutionId)
		copy(dAtA[i:], m.InstitutionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InstitutionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentsByInstitutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentsByInstitutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentsByInstitutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Students) > 0 {
		for iNdEx := len(m.Students) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Students[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentsByCourseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentsByCourseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentsByCourseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentsByCourseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentsByCourseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentsByCourseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Students) > 0 {
		for iNdEx := len(m.Students) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Students[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentAcademicTreeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentAcademicTreeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentAcademicTreeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudentAcademicTreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudentAcademicTreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudentAcademicTreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AcademicTree.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCheckGraduationEligibilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckGraduationEligibilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckGraduationEligibilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckGraduationEligibilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckGraduationEligibilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckGraduationEligibilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsEligible {
		i--
		if m.IsEligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.GraduationStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListStudentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListStudentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Students) > 0 {
		for _, e := range m.Students {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Student.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListEnrollmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListEnrollmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Enrollments) > 0 {
		for _, e := range m.Enrollments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEnrollmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EnrollmentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEnrollmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Enrollment.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEnrollmentsByStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEnrollmentsByStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Enrollments) > 0 {
		for _, e := range m.Enrollments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentProgressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentProgressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Progress.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStudentsByInstitutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InstitutionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentsByInstitutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Students) > 0 {
		for _, e := range m.Students {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentsByCourseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentsByCourseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Students) > 0 {
		for _, e := range m.Students {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentAcademicTreeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudentAcademicTreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AcademicTree.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckGraduationEligibilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckGraduationEligibilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GraduationStatus.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.IsEligible {
		n += 2
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListStudentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListStudentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListStudentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListStudentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListStudentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListStudentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Students", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Students = append(m.Students, Student{})
			if err := m.Students[len(m.Students)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Student.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListEnrollmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListEnrollmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListEnrollmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListEnrollmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListEnrollmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListEnrollmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enrollments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enrollments = append(m.Enrollments, StudentEnrollment{})
			if err := m.Enrollments[len(m.Enrollments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnrollmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnrollmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnrollmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnrollmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnrollmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnrollmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnrollmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnrollmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enrollment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Enrollment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnrollmentsByStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnrollmentsByStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnrollmentsByStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEnrollmentsByStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEnrollmentsByStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEnrollmentsByStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enrollments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Enrollments = append(m.Enrollments, StudentEnrollment{})
			if err := m.Enrollments[len(m.Enrollments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentProgressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentProgressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentProgressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentProgressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentProgressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentProgressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentsByInstitutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentsByInstitutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentsByInstitutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstitutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstitutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentsByInstitutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentsByInstitutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentsByInstitutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Students", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Students = append(m.Students, Student{})
			if err := m.Students[len(m.Students)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentsByCourseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentsByCourseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentsByCourseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentsByCourseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentsByCourseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentsByCourseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Students", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Students = append(m.Students, Student{})
			if err := m.Students[len(m.Students)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentAcademicTreeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentAcademicTreeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentAcademicTreeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudentAcademicTreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudentAcademicTreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudentAcademicTreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcademicTree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AcademicTree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckGraduationEligibilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckGraduationEligibilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckGraduationEligibilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckGraduationEligibilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckGraduationEligibilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckGraduationEligibilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraduationStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GraduationStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEligible = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
