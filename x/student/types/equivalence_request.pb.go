// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/student/equivalence_request.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EquivalenceRequest struct {
	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StudentId            string `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
	SourceSubjectId      string `protobuf:"bytes,3,opt,name=sourceSubjectId,proto3" json:"sourceSubjectId,omitempty"`
	TargetSubjectId      string `protobuf:"bytes,4,opt,name=targetSubjectId,proto3" json:"targetSubjectId,omitempty"`
	Status               string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	RequestDate          string `protobuf:"bytes,6,opt,name=requestDate,proto3" json:"requestDate,omitempty"`
	ProcessedDate        string `protobuf:"bytes,7,opt,name=processedDate,proto3" json:"processedDate,omitempty"`
	Reason               string `protobuf:"bytes,8,opt,name=reason,proto3" json:"reason,omitempty"`
	CreatedBy            string `protobuf:"bytes,9,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	EquivalenceType      string `protobuf:"bytes,10,opt,name=equivalenceType,proto3" json:"equivalenceType,omitempty"`
	SimilarityPercentage uint32 `protobuf:"varint,11,opt,name=similarityPercentage,proto3" json:"similarityPercentage,omitempty"`
	Notes                string `protobuf:"bytes,12,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (m *EquivalenceRequest) Reset()         { *m = EquivalenceRequest{} }
func (m *EquivalenceRequest) String() string { return proto.CompactTextString(m) }
func (*EquivalenceRequest) ProtoMessage()    {}
func (*EquivalenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0719778b710af1de, []int{0}
}
func (m *EquivalenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquivalenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquivalenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquivalenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquivalenceRequest.Merge(m, src)
}
func (m *EquivalenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *EquivalenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquivalenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquivalenceRequest proto.InternalMessageInfo

func (m *EquivalenceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EquivalenceRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *EquivalenceRequest) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *EquivalenceRequest) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

func (m *EquivalenceRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *EquivalenceRequest) GetRequestDate() string {
	if m != nil {
		return m.RequestDate
	}
	return ""
}

func (m *EquivalenceRequest) GetProcessedDate() string {
	if m != nil {
		return m.ProcessedDate
	}
	return ""
}

func (m *EquivalenceRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *EquivalenceRequest) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *EquivalenceRequest) GetEquivalenceType() string {
	if m != nil {
		return m.EquivalenceType
	}
	return ""
}

func (m *EquivalenceRequest) GetSimilarityPercentage() uint32 {
	if m != nil {
		return m.SimilarityPercentage
	}
	return 0
}

func (m *EquivalenceRequest) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func init() {
	proto.RegisterType((*EquivalenceRequest)(nil), "academictoken.student.EquivalenceRequest")
}

func init() {
	proto.RegisterFile("academictoken/student/equivalence_request.proto", fileDescriptor_0719778b710af1de)
}

var fileDescriptor_0719778b710af1de = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x4e, 0x02, 0x31,
	0x10, 0x87, 0x59, 0x10, 0x94, 0x22, 0x9a, 0x34, 0x68, 0x7a, 0xd0, 0x0d, 0x31, 0x1e, 0x38, 0x41,
	0xa2, 0x07, 0xef, 0x44, 0x0f, 0xde, 0x0c, 0x7a, 0xf2, 0x62, 0x4a, 0x3b, 0x21, 0x55, 0xd8, 0x2e,
	0xed, 0xd4, 0xb8, 0x6f, 0xe1, 0x23, 0xf8, 0x38, 0x1e, 0x39, 0x7a, 0x34, 0xf0, 0x22, 0x66, 0xdb,
	0x0d, 0x7f, 0x36, 0x1e, 0xe7, 0xeb, 0xf7, 0x9b, 0xcc, 0xec, 0x0e, 0x19, 0x70, 0xc1, 0x25, 0xcc,
	0x94, 0x40, 0xfd, 0x06, 0xc9, 0xc0, 0xa2, 0x93, 0x90, 0xe0, 0x00, 0xe6, 0x4e, 0xbd, 0xf3, 0x29,
	0x24, 0x02, 0x5e, 0x0c, 0xcc, 0x1d, 0x58, 0xec, 0xa7, 0x46, 0xa3, 0xa6, 0x27, 0x3b, 0x81, 0x7e,
	0x11, 0xb8, 0xf8, 0xaa, 0x11, 0x7a, 0xb7, 0x09, 0x8d, 0x42, 0x86, 0x1e, 0x91, 0xaa, 0x92, 0x2c,
	0xea, 0x46, 0xbd, 0xe6, 0xa8, 0xaa, 0x24, 0x3d, 0x23, 0xcd, 0x22, 0x71, 0x2f, 0x59, 0xd5, 0xe3,
	0x0d, 0xa0, 0x3d, 0x72, 0x6c, 0xb5, 0x33, 0x02, 0x1e, 0xdd, 0xf8, 0x15, 0x44, 0xee, 0xd4, 0xbc,
	0x53, 0xc6, 0xb9, 0x89, 0xdc, 0x4c, 0x00, 0x37, 0xe6, 0x5e, 0x30, 0x4b, 0x98, 0x9e, 0x92, 0x86,
	0x45, 0x8e, 0xce, 0xb2, 0xba, 0x17, 0x8a, 0x8a, 0x76, 0x49, 0xab, 0x58, 0xec, 0x96, 0x23, 0xb0,
	0x86, 0x7f, 0xdc, 0x46, 0xf4, 0x92, 0xb4, 0x53, 0xa3, 0x05, 0x58, 0x0b, 0xd2, 0x3b, 0xfb, 0xde,
	0xd9, 0x85, 0x79, 0x7f, 0x03, 0xdc, 0xea, 0x84, 0x1d, 0x84, 0xfe, 0xa1, 0xca, 0x37, 0x15, 0x06,
	0x38, 0x82, 0x1c, 0x66, 0xac, 0x19, 0x36, 0x5d, 0x83, 0x7c, 0xfe, 0xad, 0x4f, 0xfc, 0x94, 0xa5,
	0xc0, 0x48, 0x98, 0xbf, 0x84, 0xe9, 0x15, 0xe9, 0x58, 0x35, 0x53, 0x53, 0x6e, 0x14, 0x66, 0x0f,
	0x60, 0x04, 0x24, 0xc8, 0x27, 0xc0, 0x5a, 0xdd, 0xa8, 0xd7, 0x1e, 0xfd, 0xfb, 0x46, 0x3b, 0xa4,
	0x9e, 0x68, 0x04, 0xcb, 0x0e, 0x7d, 0xcf, 0x50, 0x0c, 0x6f, 0xbe, 0x97, 0x71, 0xb4, 0x58, 0xc6,
	0xd1, 0xef, 0x32, 0x8e, 0x3e, 0x57, 0x71, 0x65, 0xb1, 0x8a, 0x2b, 0x3f, 0xab, 0xb8, 0xf2, 0x7c,
	0xbe, 0x7b, 0x04, 0x1f, 0xeb, 0x33, 0xc0, 0x2c, 0x05, 0x3b, 0x6e, 0xf8, 0x3f, 0x7f, 0xfd, 0x17,
	0x00, 0x00, 0xff, 0xff, 0x0f, 0xf1, 0xe2, 0xf2, 0x2c, 0x02, 0x00, 0x00,
}

func (m *EquivalenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquivalenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquivalenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x62
	}
	if m.SimilarityPercentage != 0 {
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(m.SimilarityPercentage))
		i--
		dAtA[i] = 0x58
	}
	if len(m.EquivalenceType) > 0 {
		i -= len(m.EquivalenceType)
		copy(dAtA[i:], m.EquivalenceType)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.EquivalenceType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CreatedBy) > 0 {
		i -= len(m.CreatedBy)
		copy(dAtA[i:], m.CreatedBy)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.CreatedBy)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ProcessedDate) > 0 {
		i -= len(m.ProcessedDate)
		copy(dAtA[i:], m.ProcessedDate)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.ProcessedDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RequestDate) > 0 {
		i -= len(m.RequestDate)
		copy(dAtA[i:], m.RequestDate)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.RequestDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEquivalenceRequest(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEquivalenceRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovEquivalenceRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EquivalenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.RequestDate)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.ProcessedDate)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.CreatedBy)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	l = len(m.EquivalenceType)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	if m.SimilarityPercentage != 0 {
		n += 1 + sovEquivalenceRequest(uint64(m.SimilarityPercentage))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovEquivalenceRequest(uint64(l))
	}
	return n
}

func sovEquivalenceRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEquivalenceRequest(x uint64) (n int) {
	return sovEquivalenceRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EquivalenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquivalenceRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquivalenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquivalenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessedDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessedDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimilarityPercentage", wireType)
			}
			m.SimilarityPercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SimilarityPercentage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquivalenceRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEquivalenceRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquivalenceRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquivalenceRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquivalenceRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEquivalenceRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEquivalenceRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEquivalenceRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEquivalenceRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquivalenceRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEquivalenceRequest = fmt.Errorf("proto: unexpected end of group")
)
