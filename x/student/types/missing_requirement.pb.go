// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/student/missing_requirement.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MissingRequirement struct {
	RequirementType string   `protobuf:"bytes,1,opt,name=requirementType,proto3" json:"requirementType,omitempty"`
	Description     string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SubjectsNeeded  []string `protobuf:"bytes,3,rep,name=subjectsNeeded,proto3" json:"subjectsNeeded,omitempty"`
	CreditsNeeded   uint64   `protobuf:"varint,4,opt,name=creditsNeeded,proto3" json:"creditsNeeded,omitempty"`
	GroupId         string   `protobuf:"bytes,5,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (m *MissingRequirement) Reset()         { *m = MissingRequirement{} }
func (m *MissingRequirement) String() string { return proto.CompactTextString(m) }
func (*MissingRequirement) ProtoMessage()    {}
func (*MissingRequirement) Descriptor() ([]byte, []int) {
	return fileDescriptor_c274fcd66abc9ade, []int{0}
}
func (m *MissingRequirement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissingRequirement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissingRequirement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MissingRequirement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissingRequirement.Merge(m, src)
}
func (m *MissingRequirement) XXX_Size() int {
	return m.Size()
}
func (m *MissingRequirement) XXX_DiscardUnknown() {
	xxx_messageInfo_MissingRequirement.DiscardUnknown(m)
}

var xxx_messageInfo_MissingRequirement proto.InternalMessageInfo

func (m *MissingRequirement) GetRequirementType() string {
	if m != nil {
		return m.RequirementType
	}
	return ""
}

func (m *MissingRequirement) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MissingRequirement) GetSubjectsNeeded() []string {
	if m != nil {
		return m.SubjectsNeeded
	}
	return nil
}

func (m *MissingRequirement) GetCreditsNeeded() uint64 {
	if m != nil {
		return m.CreditsNeeded
	}
	return 0
}

func (m *MissingRequirement) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func init() {
	proto.RegisterType((*MissingRequirement)(nil), "academictoken.student.MissingRequirement")
}

func init() {
	proto.RegisterFile("academictoken/student/missing_requirement.proto", fileDescriptor_c274fcd66abc9ade)
}

var fileDescriptor_c274fcd66abc9ade = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4b, 0x03, 0x31,
	0x18, 0x86, 0x2f, 0xb6, 0x2a, 0x8d, 0xa8, 0x10, 0x10, 0xb2, 0x18, 0x82, 0x88, 0x64, 0xea, 0x0d,
	0x0e, 0xee, 0x6e, 0x0e, 0x3a, 0x04, 0x27, 0x17, 0x69, 0x93, 0x8f, 0x12, 0xe5, 0x92, 0x98, 0x7c,
	0x01, 0xfb, 0x2f, 0xfc, 0x59, 0x1d, 0x3b, 0x3a, 0xca, 0xdd, 0x1f, 0x11, 0x4e, 0xad, 0xbd, 0x8e,
	0x79, 0x78, 0x9f, 0x7c, 0xf0, 0xd0, 0x7a, 0x66, 0x66, 0x16, 0x1a, 0x67, 0x30, 0xbc, 0x82, 0xaf,
	0x33, 0x16, 0x0b, 0x1e, 0xeb, 0xc6, 0xe5, 0xec, 0xfc, 0xe2, 0x39, 0xc1, 0x5b, 0x71, 0x09, 0x1a,
	0xf0, 0x38, 0x8d, 0x29, 0x60, 0x60, 0x67, 0x03, 0x61, 0xfa, 0x2b, 0x5c, 0xac, 0x08, 0x65, 0xf7,
	0x3f, 0x92, 0xfe, 0x77, 0x98, 0xa2, 0xa7, 0x5b, 0x5f, 0x3c, 0x2e, 0x23, 0x70, 0x22, 0x89, 0x9a,
	0xe8, 0x5d, 0xcc, 0x24, 0x3d, 0xb2, 0x90, 0x4d, 0x72, 0x11, 0x5d, 0xf0, 0x7c, 0xaf, 0x5f, 0x6d,
	0x23, 0x76, 0x45, 0x4f, 0x72, 0x99, 0xbf, 0x80, 0xc1, 0xfc, 0x00, 0x60, 0xc1, 0xf2, 0x91, 0x1c,
	0xa9, 0x89, 0xde, 0xa1, 0xec, 0x92, 0x1e, 0x9b, 0x04, 0xd6, 0x6d, 0x66, 0x63, 0x49, 0xd4, 0x58,
	0x0f, 0x21, 0xe3, 0xf4, 0x70, 0x91, 0x42, 0x89, 0x77, 0x96, 0xef, 0xf7, 0xb7, 0xfe, 0x9e, 0xb7,
	0x37, 0xab, 0x56, 0x90, 0x75, 0x2b, 0xc8, 0x57, 0x2b, 0xc8, 0x47, 0x27, 0xaa, 0x75, 0x27, 0xaa,
	0xcf, 0x4e, 0x54, 0x4f, 0xe7, 0xc3, 0x58, 0xef, 0x9b, 0x5c, 0xb8, 0x8c, 0x90, 0xe7, 0x07, 0x7d,
	0xa1, 0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x19, 0xdf, 0xe8, 0x54, 0x01, 0x00, 0x00,
}

func (m *MissingRequirement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissingRequirement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MissingRequirement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintMissingRequirement(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreditsNeeded != 0 {
		i = encodeVarintMissingRequirement(dAtA, i, uint64(m.CreditsNeeded))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SubjectsNeeded) > 0 {
		for iNdEx := len(m.SubjectsNeeded) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectsNeeded[iNdEx])
			copy(dAtA[i:], m.SubjectsNeeded[iNdEx])
			i = encodeVarintMissingRequirement(dAtA, i, uint64(len(m.SubjectsNeeded[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMissingRequirement(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequirementType) > 0 {
		i -= len(m.RequirementType)
		copy(dAtA[i:], m.RequirementType)
		i = encodeVarintMissingRequirement(dAtA, i, uint64(len(m.RequirementType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMissingRequirement(dAtA []byte, offset int, v uint64) int {
	offset -= sovMissingRequirement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MissingRequirement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequirementType)
	if l > 0 {
		n += 1 + l + sovMissingRequirement(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMissingRequirement(uint64(l))
	}
	if len(m.SubjectsNeeded) > 0 {
		for _, s := range m.SubjectsNeeded {
			l = len(s)
			n += 1 + l + sovMissingRequirement(uint64(l))
		}
	}
	if m.CreditsNeeded != 0 {
		n += 1 + sovMissingRequirement(uint64(m.CreditsNeeded))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovMissingRequirement(uint64(l))
	}
	return n
}

func sovMissingRequirement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMissingRequirement(x uint64) (n int) {
	return sovMissingRequirement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MissingRequirement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissingRequirement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissingRequirement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissingRequirement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequirementType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissingRequirement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequirementType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissingRequirement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectsNeeded", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissingRequirement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectsNeeded = append(m.SubjectsNeeded, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditsNeeded", wireType)
			}
			m.CreditsNeeded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissingRequirement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditsNeeded |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissingRequirement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMissingRequirement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMissingRequirement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMissingRequirement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMissingRequirement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMissingRequirement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMissingRequirement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMissingRequirement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMissingRequirement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMissingRequirement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMissingRequirement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMissingRequirement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMissingRequirement = fmt.Errorf("proto: unexpected end of group")
)
