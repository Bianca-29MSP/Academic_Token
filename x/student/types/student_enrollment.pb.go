// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/student/student_enrollment.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StudentEnrollment struct {
	Index          string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Student        string `protobuf:"bytes,2,opt,name=student,proto3" json:"student,omitempty"`
	Institution    string `protobuf:"bytes,3,opt,name=institution,proto3" json:"institution,omitempty"`
	CourseId       string `protobuf:"bytes,4,opt,name=courseId,proto3" json:"courseId,omitempty"`
	EnrollmentDate string `protobuf:"bytes,5,opt,name=enrollmentDate,proto3" json:"enrollmentDate,omitempty"`
	Status         string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	AcademicTreeId string `protobuf:"bytes,7,opt,name=academicTreeId,proto3" json:"academicTreeId,omitempty"`
}

func (m *StudentEnrollment) Reset()         { *m = StudentEnrollment{} }
func (m *StudentEnrollment) String() string { return proto.CompactTextString(m) }
func (*StudentEnrollment) ProtoMessage()    {}
func (*StudentEnrollment) Descriptor() ([]byte, []int) {
	return fileDescriptor_52449f9ee4aa1da4, []int{0}
}
func (m *StudentEnrollment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentEnrollment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentEnrollment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentEnrollment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentEnrollment.Merge(m, src)
}
func (m *StudentEnrollment) XXX_Size() int {
	return m.Size()
}
func (m *StudentEnrollment) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentEnrollment.DiscardUnknown(m)
}

var xxx_messageInfo_StudentEnrollment proto.InternalMessageInfo

func (m *StudentEnrollment) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StudentEnrollment) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *StudentEnrollment) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *StudentEnrollment) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *StudentEnrollment) GetEnrollmentDate() string {
	if m != nil {
		return m.EnrollmentDate
	}
	return ""
}

func (m *StudentEnrollment) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *StudentEnrollment) GetAcademicTreeId() string {
	if m != nil {
		return m.AcademicTreeId
	}
	return ""
}

func init() {
	proto.RegisterType((*StudentEnrollment)(nil), "academictoken.student.StudentEnrollment")
}

func init() {
	proto.RegisterFile("academictoken/student/student_enrollment.proto", fileDescriptor_52449f9ee4aa1da4)
}

var fileDescriptor_52449f9ee4aa1da4 = []byte{
	// 244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4b, 0x4c, 0x4e, 0x4c,
	0x49, 0xcd, 0xcd, 0x4c, 0x2e, 0xc9, 0xcf, 0x4e, 0xcd, 0xd3, 0x2f, 0x2e, 0x29, 0x4d, 0x49, 0xcd,
	0x2b, 0x81, 0xd1, 0xf1, 0xa9, 0x79, 0x45, 0xf9, 0x39, 0x39, 0xb9, 0xa9, 0x79, 0x25, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0xa2, 0x28, 0xea, 0xf5, 0xa0, 0xea, 0x94, 0x5e, 0x32, 0x72, 0x09,
	0x06, 0x43, 0xd8, 0xae, 0x70, 0x2d, 0x42, 0x22, 0x5c, 0xac, 0x99, 0x79, 0x29, 0xa9, 0x15, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x90, 0x04, 0x17, 0x3b, 0x54, 0x9b, 0x04, 0x13,
	0x58, 0x1c, 0xc6, 0x15, 0x52, 0xe0, 0xe2, 0xce, 0xcc, 0x2b, 0x2e, 0xc9, 0x2c, 0x29, 0x2d, 0xc9,
	0xcc, 0xcf, 0x93, 0x60, 0x06, 0xcb, 0x22, 0x0b, 0x09, 0x49, 0x71, 0x71, 0x24, 0xe7, 0x97, 0x16,
	0x15, 0xa7, 0x7a, 0xa6, 0x48, 0xb0, 0x80, 0xa5, 0xe1, 0x7c, 0x21, 0x35, 0x2e, 0x3e, 0x84, 0x73,
	0x5d, 0x12, 0x4b, 0x52, 0x25, 0x58, 0xc1, 0x2a, 0xd0, 0x44, 0x85, 0xc4, 0xb8, 0xd8, 0x8a, 0x4b,
	0x12, 0x4b, 0x4a, 0x8b, 0x25, 0xd8, 0xc0, 0xf2, 0x50, 0x1e, 0x48, 0x3f, 0xcc, 0x73, 0x21, 0x45,
	0xa9, 0x20, 0x1b, 0xd8, 0x21, 0xfa, 0x51, 0x45, 0x9d, 0xcc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0,
	0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8,
	0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x16, 0x35, 0x30, 0x2b, 0xe0, 0xc1, 0x59, 0x52, 0x59, 0x90, 0x5a,
	0x9c, 0xc4, 0x06, 0x0e, 0x42, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x65, 0xc0, 0x39,
	0x74, 0x01, 0x00, 0x00,
}

func (m *StudentEnrollment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentEnrollment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentEnrollment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcademicTreeId) > 0 {
		i -= len(m.AcademicTreeId)
		copy(dAtA[i:], m.AcademicTreeId)
		i = encodeVarintStudentEnrollment(dAtA, i, uint64(len(m.AcademicTreeId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintStudentEnrollment(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EnrollmentDate) > 0 {
		i -= len(m.EnrollmentDate)
		copy(dAtA[i:], m.EnrollmentDate)
		i = encodeVarintStudentEnrollment(dAtA, i, uint64(len(m.EnrollmentDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintStudentEnrollment(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintStudentEnrollment(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintStudentEnrollment(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStudentEnrollment(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStudentEnrollment(dAtA []byte, offset int, v uint64) int {
	offset -= sovStudentEnrollment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StudentEnrollment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStudentEnrollment(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovStudentEnrollment(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovStudentEnrollment(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovStudentEnrollment(uint64(l))
	}
	l = len(m.EnrollmentDate)
	if l > 0 {
		n += 1 + l + sovStudentEnrollment(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovStudentEnrollment(uint64(l))
	}
	l = len(m.AcademicTreeId)
	if l > 0 {
		n += 1 + l + sovStudentEnrollment(uint64(l))
	}
	return n
}

func sovStudentEnrollment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStudentEnrollment(x uint64) (n int) {
	return sovStudentEnrollment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StudentEnrollment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudentEnrollment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentEnrollment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentEnrollment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnrollmentDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnrollmentDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcademicTreeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcademicTreeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudentEnrollment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudentEnrollment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStudentEnrollment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStudentEnrollment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudentEnrollment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStudentEnrollment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStudentEnrollment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStudentEnrollment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStudentEnrollment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStudentEnrollment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStudentEnrollment = fmt.Errorf("proto: unexpected end of group")
)
