// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/student/academic_progress.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AcademicProgress struct {
	RequiredCreditsCompleted   uint64            `protobuf:"varint,1,opt,name=requiredCreditsCompleted,proto3" json:"requiredCreditsCompleted,omitempty"`
	ElectiveCreditsCompleted   uint64            `protobuf:"varint,2,opt,name=electiveCreditsCompleted,proto3" json:"electiveCreditsCompleted,omitempty"`
	RequiredSubjectsPercentage float32           `protobuf:"fixed32,3,opt,name=requiredSubjectsPercentage,proto3" json:"requiredSubjectsPercentage,omitempty"`
	CurrentSemester            uint64            `protobuf:"varint,4,opt,name=currentSemester,proto3" json:"currentSemester,omitempty"`
	CurrentYear                uint64            `protobuf:"varint,5,opt,name=currentYear,proto3" json:"currentYear,omitempty"`
	EnrollmentYears            float32           `protobuf:"fixed32,6,opt,name=enrollmentYears,proto3" json:"enrollmentYears,omitempty"`
	ElectivesByAreaCompleted   map[string]uint64 `protobuf:"bytes,7,rep,name=electivesByAreaCompleted,proto3" json:"electivesByAreaCompleted,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *AcademicProgress) Reset()         { *m = AcademicProgress{} }
func (m *AcademicProgress) String() string { return proto.CompactTextString(m) }
func (*AcademicProgress) ProtoMessage()    {}
func (*AcademicProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f9fe4db970fc36c, []int{0}
}
func (m *AcademicProgress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcademicProgress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcademicProgress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcademicProgress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcademicProgress.Merge(m, src)
}
func (m *AcademicProgress) XXX_Size() int {
	return m.Size()
}
func (m *AcademicProgress) XXX_DiscardUnknown() {
	xxx_messageInfo_AcademicProgress.DiscardUnknown(m)
}

var xxx_messageInfo_AcademicProgress proto.InternalMessageInfo

func (m *AcademicProgress) GetRequiredCreditsCompleted() uint64 {
	if m != nil {
		return m.RequiredCreditsCompleted
	}
	return 0
}

func (m *AcademicProgress) GetElectiveCreditsCompleted() uint64 {
	if m != nil {
		return m.ElectiveCreditsCompleted
	}
	return 0
}

func (m *AcademicProgress) GetRequiredSubjectsPercentage() float32 {
	if m != nil {
		return m.RequiredSubjectsPercentage
	}
	return 0
}

func (m *AcademicProgress) GetCurrentSemester() uint64 {
	if m != nil {
		return m.CurrentSemester
	}
	return 0
}

func (m *AcademicProgress) GetCurrentYear() uint64 {
	if m != nil {
		return m.CurrentYear
	}
	return 0
}

func (m *AcademicProgress) GetEnrollmentYears() float32 {
	if m != nil {
		return m.EnrollmentYears
	}
	return 0
}

func (m *AcademicProgress) GetElectivesByAreaCompleted() map[string]uint64 {
	if m != nil {
		return m.ElectivesByAreaCompleted
	}
	return nil
}

func init() {
	proto.RegisterType((*AcademicProgress)(nil), "academictoken.student.AcademicProgress")
	proto.RegisterMapType((map[string]uint64)(nil), "academictoken.student.AcademicProgress.ElectivesByAreaCompletedEntry")
}

func init() {
	proto.RegisterFile("academictoken/student/academic_progress.proto", fileDescriptor_2f9fe4db970fc36c)
}

var fileDescriptor_2f9fe4db970fc36c = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xbd, 0x4e, 0xc2, 0x50,
	0x14, 0xc7, 0xb9, 0x7c, 0x19, 0x2f, 0x83, 0xe4, 0x46, 0x93, 0x86, 0x84, 0xa6, 0x71, 0xea, 0x62,
	0x49, 0x74, 0xd0, 0x30, 0x98, 0x00, 0x61, 0x72, 0x21, 0x65, 0xd2, 0xc5, 0x94, 0xf6, 0x84, 0x54,
	0xfa, 0xe5, 0xb9, 0xa7, 0xc4, 0x8e, 0xbe, 0x81, 0xbe, 0x95, 0x23, 0xa3, 0xa3, 0x81, 0x17, 0x31,
	0x94, 0x22, 0x52, 0x2d, 0x5b, 0xfb, 0x3b, 0xff, 0xff, 0x39, 0xf7, 0x7c, 0xf0, 0x0b, 0xcb, 0xb6,
	0x1c, 0xf0, 0x5d, 0x9b, 0xc2, 0x19, 0x04, 0x1d, 0x49, 0xb1, 0x03, 0x01, 0x75, 0xb6, 0xf4, 0x31,
	0xc2, 0x70, 0x8a, 0x20, 0xa5, 0x11, 0x61, 0x48, 0xa1, 0x38, 0xdb, 0x93, 0x1b, 0x99, 0xfc, 0xfc,
	0xbd, 0xca, 0x9b, 0xbd, 0x2c, 0x32, 0xca, 0x1c, 0xa2, 0xcb, 0x15, 0x84, 0xe7, 0xd8, 0x45, 0x70,
	0x06, 0x08, 0x8e, 0x4b, 0x72, 0x10, 0xfa, 0x91, 0x07, 0x04, 0x8e, 0xc2, 0x34, 0xa6, 0x57, 0xcd,
	0xc2, 0xf8, 0xda, 0x0b, 0x1e, 0xd8, 0xe4, 0xce, 0xe1, 0x8f, 0xb7, 0xbc, 0xf1, 0x16, 0xc5, 0xc5,
	0x2d, 0x6f, 0x6d, 0xf3, 0x8e, 0xe3, 0xc9, 0x13, 0xd8, 0x24, 0x47, 0x80, 0x36, 0x04, 0x64, 0x4d,
	0x41, 0xa9, 0x68, 0x4c, 0x2f, 0x9b, 0x07, 0x14, 0x42, 0xe7, 0x27, 0x76, 0x8c, 0x08, 0x01, 0x8d,
	0xc1, 0x07, 0x49, 0x80, 0x4a, 0x35, 0x2d, 0x99, 0xc7, 0x42, 0xe3, 0x8d, 0x0c, 0xdd, 0x83, 0x85,
	0x4a, 0x2d, 0x55, 0xfd, 0x46, 0xeb, 0x5c, 0x10, 0x60, 0xe8, 0x79, 0x7e, 0x46, 0xa4, 0x52, 0x4f,
	0x1f, 0x90, 0xc7, 0xe2, 0x95, 0xed, 0x5a, 0x96, 0xfd, 0xa4, 0x87, 0x60, 0xed, 0x5a, 0x3e, 0xd2,
	0x2a, 0x7a, 0xe3, 0x72, 0x68, 0xfc, 0x3b, 0x7d, 0x23, 0x3f, 0x79, 0x63, 0x58, 0x90, 0x67, 0x18,
	0x10, 0x26, 0x66, 0x61, 0x99, 0xd6, 0x1d, 0x6f, 0x1f, 0xb4, 0x8a, 0x26, 0xaf, 0xcc, 0x20, 0x49,
	0xb7, 0x77, 0x6c, 0xae, 0x3f, 0xc5, 0x29, 0xaf, 0xcd, 0x2d, 0x2f, 0x86, 0x6c, 0x2b, 0x9b, 0x9f,
	0x6e, 0xf9, 0x86, 0xf5, 0xaf, 0x3f, 0x96, 0x2a, 0x5b, 0x2c, 0x55, 0xf6, 0xb5, 0x54, 0xd9, 0xdb,
	0x4a, 0x2d, 0x2d, 0x56, 0x6a, 0xe9, 0x73, 0xa5, 0x96, 0x1e, 0xda, 0xfb, 0x37, 0xf7, 0xf2, 0x73,
	0x75, 0x94, 0x44, 0x20, 0x27, 0xf5, 0xf4, 0xd4, 0xae, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x21,
	0xae, 0x92, 0xee, 0x9b, 0x02, 0x00, 0x00,
}

func (m *AcademicProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcademicProgress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcademicProgress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ElectivesByAreaCompleted) > 0 {
		for k := range m.ElectivesByAreaCompleted {
			v := m.ElectivesByAreaCompleted[k]
			baseI := i
			i = encodeVarintAcademicProgress(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAcademicProgress(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAcademicProgress(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.EnrollmentYears != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.EnrollmentYears))))
		i--
		dAtA[i] = 0x35
	}
	if m.CurrentYear != 0 {
		i = encodeVarintAcademicProgress(dAtA, i, uint64(m.CurrentYear))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentSemester != 0 {
		i = encodeVarintAcademicProgress(dAtA, i, uint64(m.CurrentSemester))
		i--
		dAtA[i] = 0x20
	}
	if m.RequiredSubjectsPercentage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RequiredSubjectsPercentage))))
		i--
		dAtA[i] = 0x1d
	}
	if m.ElectiveCreditsCompleted != 0 {
		i = encodeVarintAcademicProgress(dAtA, i, uint64(m.ElectiveCreditsCompleted))
		i--
		dAtA[i] = 0x10
	}
	if m.RequiredCreditsCompleted != 0 {
		i = encodeVarintAcademicProgress(dAtA, i, uint64(m.RequiredCreditsCompleted))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAcademicProgress(dAtA []byte, offset int, v uint64) int {
	offset -= sovAcademicProgress(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AcademicProgress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequiredCreditsCompleted != 0 {
		n += 1 + sovAcademicProgress(uint64(m.RequiredCreditsCompleted))
	}
	if m.ElectiveCreditsCompleted != 0 {
		n += 1 + sovAcademicProgress(uint64(m.ElectiveCreditsCompleted))
	}
	if m.RequiredSubjectsPercentage != 0 {
		n += 5
	}
	if m.CurrentSemester != 0 {
		n += 1 + sovAcademicProgress(uint64(m.CurrentSemester))
	}
	if m.CurrentYear != 0 {
		n += 1 + sovAcademicProgress(uint64(m.CurrentYear))
	}
	if m.EnrollmentYears != 0 {
		n += 5
	}
	if len(m.ElectivesByAreaCompleted) > 0 {
		for k, v := range m.ElectivesByAreaCompleted {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAcademicProgress(uint64(len(k))) + 1 + sovAcademicProgress(uint64(v))
			n += mapEntrySize + 1 + sovAcademicProgress(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAcademicProgress(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAcademicProgress(x uint64) (n int) {
	return sovAcademicProgress(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AcademicProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAcademicProgress
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcademicProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcademicProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredCreditsCompleted", wireType)
			}
			m.RequiredCreditsCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicProgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredCreditsCompleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectiveCreditsCompleted", wireType)
			}
			m.ElectiveCreditsCompleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicProgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElectiveCreditsCompleted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredSubjectsPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RequiredSubjectsPercentage = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSemester", wireType)
			}
			m.CurrentSemester = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicProgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentSemester |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentYear", wireType)
			}
			m.CurrentYear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicProgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentYear |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnrollmentYears", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.EnrollmentYears = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectivesByAreaCompleted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAcademicProgress
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAcademicProgress
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAcademicProgress
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElectivesByAreaCompleted == nil {
				m.ElectivesByAreaCompleted = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAcademicProgress
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAcademicProgress
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAcademicProgress
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAcademicProgress
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAcademicProgress
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAcademicProgress(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAcademicProgress
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ElectivesByAreaCompleted[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAcademicProgress(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAcademicProgress
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAcademicProgress(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAcademicProgress
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAcademicProgress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAcademicProgress
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAcademicProgress
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAcademicProgress
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAcademicProgress
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAcademicProgress        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAcademicProgress          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAcademicProgress = fmt.Errorf("proto: unexpected end of group")
)
