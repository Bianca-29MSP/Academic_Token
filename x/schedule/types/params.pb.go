// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/schedule/params.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// Maximum credits allowed per semester
	MaxCreditsPerSemester uint64 `protobuf:"varint,1,opt,name=max_credits_per_semester,json=maxCreditsPerSemester,proto3" json:"max_credits_per_semester,omitempty" yaml:"max_credits_per_semester"`
	// Maximum number of planned semesters
	MaxPlannedSemesters uint64 `protobuf:"varint,2,opt,name=max_planned_semesters,json=maxPlannedSemesters,proto3" json:"max_planned_semesters,omitempty" yaml:"max_planned_semesters"`
	// Weight for recommendation algorithm (0.0 to 1.0)
	RecommendationWeight float32 `protobuf:"fixed32,3,opt,name=recommendation_weight,json=recommendationWeight,proto3" json:"recommendation_weight,omitempty" yaml:"recommendation_weight"`
	// IPFS timeout duration as string
	IpfsTimeout string `protobuf:"bytes,4,opt,name=ipfs_timeout,json=ipfsTimeout,proto3" json:"ipfs_timeout,omitempty" yaml:"ipfs_timeout"`
	// Minimum grade required for academic progress
	MinimumGradeForProgress float32 `protobuf:"fixed32,5,opt,name=minimum_grade_for_progress,json=minimumGradeForProgress,proto3" json:"minimum_grade_for_progress,omitempty" yaml:"minimum_grade_for_progress"`
	// Allowed recommendation types
	AllowedRecommendationTypes []string `protobuf:"bytes,6,rep,name=allowed_recommendation_types,json=allowedRecommendationTypes,proto3" json:"allowed_recommendation_types,omitempty" yaml:"allowed_recommendation_types"`
	// Default difficulty levels available
	DefaultDifficultyLevels []string `protobuf:"bytes,7,rep,name=default_difficulty_levels,json=defaultDifficultyLevels,proto3" json:"default_difficulty_levels,omitempty" yaml:"default_difficulty_levels"`
	// Maximum study plans per student
	MaxStudyPlansPerStudent uint64 `protobuf:"varint,8,opt,name=max_study_plans_per_student,json=maxStudyPlansPerStudent,proto3" json:"max_study_plans_per_student,omitempty" yaml:"max_study_plans_per_student"`
	// Threshold score for recommendations (0.0 to 1.0)
	RecommendationScoreThreshold float32 `protobuf:"fixed32,9,opt,name=recommendation_score_threshold,json=recommendationScoreThreshold,proto3" json:"recommendation_score_threshold,omitempty" yaml:"recommendation_score_threshold"`
	// Default semester duration in months
	DefaultSemesterDuration uint64 `protobuf:"varint,10,opt,name=default_semester_duration,json=defaultSemesterDuration,proto3" json:"default_semester_duration,omitempty" yaml:"default_semester_duration"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_795ea1183c03b65d, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxCreditsPerSemester() uint64 {
	if m != nil {
		return m.MaxCreditsPerSemester
	}
	return 0
}

func (m *Params) GetMaxPlannedSemesters() uint64 {
	if m != nil {
		return m.MaxPlannedSemesters
	}
	return 0
}

func (m *Params) GetRecommendationWeight() float32 {
	if m != nil {
		return m.RecommendationWeight
	}
	return 0
}

func (m *Params) GetIpfsTimeout() string {
	if m != nil {
		return m.IpfsTimeout
	}
	return ""
}

func (m *Params) GetMinimumGradeForProgress() float32 {
	if m != nil {
		return m.MinimumGradeForProgress
	}
	return 0
}

func (m *Params) GetAllowedRecommendationTypes() []string {
	if m != nil {
		return m.AllowedRecommendationTypes
	}
	return nil
}

func (m *Params) GetDefaultDifficultyLevels() []string {
	if m != nil {
		return m.DefaultDifficultyLevels
	}
	return nil
}

func (m *Params) GetMaxStudyPlansPerStudent() uint64 {
	if m != nil {
		return m.MaxStudyPlansPerStudent
	}
	return 0
}

func (m *Params) GetRecommendationScoreThreshold() float32 {
	if m != nil {
		return m.RecommendationScoreThreshold
	}
	return 0
}

func (m *Params) GetDefaultSemesterDuration() uint64 {
	if m != nil {
		return m.DefaultSemesterDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "academictoken.schedule.Params")
}

func init() {
	proto.RegisterFile("academictoken/schedule/params.proto", fileDescriptor_795ea1183c03b65d)
}

var fileDescriptor_795ea1183c03b65d = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0x97, 0x6d, 0x6c, 0xcc, 0x70, 0x21, 0xdb, 0x58, 0x28, 0x53, 0x12, 0x32, 0x06, 0x85,
	0xc3, 0x7a, 0xe0, 0x82, 0x76, 0x2c, 0x13, 0x5c, 0x38, 0x54, 0x59, 0x11, 0x12, 0x42, 0x32, 0x5e,
	0xfc, 0xb5, 0xb5, 0x88, 0xe3, 0xc8, 0x76, 0x58, 0xfb, 0x0a, 0x9c, 0x78, 0x04, 0x1e, 0x81, 0xc7,
	0xe0, 0xb8, 0x23, 0xa7, 0x08, 0xad, 0x07, 0x38, 0xe7, 0x09, 0x50, 0x9c, 0x74, 0x5d, 0xbb, 0x96,
	0x4b, 0x95, 0x7c, 0xbf, 0x5f, 0x3f, 0xd7, 0x9f, 0xff, 0x35, 0x3a, 0x20, 0x11, 0xa1, 0xc0, 0x59,
	0xa4, 0xc5, 0x67, 0x48, 0x5a, 0x2a, 0x1a, 0x00, 0xcd, 0x62, 0x68, 0xa5, 0x44, 0x12, 0xae, 0x8e,
	0x52, 0x29, 0xb4, 0xb0, 0xef, 0xcf, 0x48, 0x47, 0x13, 0xa9, 0x71, 0x8f, 0x70, 0x96, 0x88, 0x96,
	0xf9, 0xac, 0xd4, 0xc6, 0x4e, 0x5f, 0xf4, 0x85, 0x79, 0x6c, 0x95, 0x4f, 0x55, 0x35, 0x18, 0x6f,
	0xa2, 0x8d, 0x8e, 0xe9, 0x68, 0x7f, 0x44, 0x0e, 0x27, 0x43, 0x1c, 0x49, 0xa0, 0x4c, 0x2b, 0x9c,
	0x82, 0xc4, 0x0a, 0x38, 0x28, 0x0d, 0xd2, 0xb1, 0x7c, 0xab, 0xb9, 0xde, 0x3e, 0x28, 0x72, 0xcf,
	0x1b, 0x11, 0x1e, 0x1f, 0x07, 0xcb, 0xcc, 0x20, 0xdc, 0xe5, 0x64, 0xf8, 0xaa, 0x22, 0x1d, 0x90,
	0xa7, 0x75, 0xdd, 0xee, 0xa2, 0x12, 0xe0, 0x34, 0x26, 0x49, 0x02, 0xf4, 0xca, 0x57, 0xce, 0xaa,
	0x69, 0xed, 0x17, 0xb9, 0xb7, 0x3f, 0x6d, 0x7d, 0x43, 0x0b, 0xc2, 0x6d, 0x4e, 0x86, 0x9d, 0xaa,
	0x3c, 0x69, 0xaa, 0xec, 0x77, 0x68, 0x57, 0x42, 0x24, 0x38, 0x87, 0x84, 0x12, 0xcd, 0x44, 0x82,
	0xcf, 0x81, 0xf5, 0x07, 0xda, 0x59, 0xf3, 0xad, 0xe6, 0xea, 0xf5, 0xae, 0x0b, 0xb5, 0x20, 0xdc,
	0x99, 0xad, 0xbf, 0x37, 0x65, 0xfb, 0x18, 0xdd, 0x65, 0x69, 0x4f, 0x61, 0xcd, 0x38, 0x88, 0x4c,
	0x3b, 0xeb, 0xbe, 0xd5, 0xdc, 0x6a, 0xef, 0x15, 0xb9, 0xb7, 0x5d, 0x75, 0xbb, 0x4e, 0x83, 0xf0,
	0x4e, 0xf9, 0xda, 0xad, 0xde, 0xec, 0x33, 0xd4, 0xe0, 0x2c, 0x61, 0x3c, 0xe3, 0xb8, 0x2f, 0x09,
	0x05, 0xdc, 0x13, 0x12, 0xa7, 0x52, 0xf4, 0x25, 0x28, 0xe5, 0xdc, 0x32, 0xbf, 0xeb, 0xb0, 0xc8,
	0xbd, 0x47, 0xf5, 0x6e, 0x97, 0xba, 0x41, 0xb8, 0x57, 0xc3, 0x37, 0x25, 0x7b, 0x2d, 0x64, 0xa7,
	0x26, 0x36, 0x43, 0xfb, 0x24, 0x8e, 0xc5, 0x39, 0x50, 0x3c, 0xb7, 0x2f, 0x3d, 0x4a, 0x41, 0x39,
	0x1b, 0xfe, 0x5a, 0x73, 0xab, 0xfd, 0xb4, 0xc8, 0xbd, 0x83, 0x6a, 0x95, 0xff, 0xd9, 0x41, 0xd8,
	0xa8, 0x71, 0x38, 0x43, 0xbb, 0x25, 0xb4, 0x3f, 0xa1, 0x07, 0x14, 0x7a, 0x24, 0x8b, 0x35, 0xa6,
	0xac, 0xd7, 0x63, 0x51, 0x16, 0xeb, 0x11, 0x8e, 0xe1, 0x0b, 0xc4, 0xca, 0xd9, 0x34, 0xeb, 0x3c,
	0x2e, 0x72, 0xcf, 0xaf, 0xd6, 0x59, 0xaa, 0x06, 0xe1, 0x5e, 0xcd, 0x4e, 0xae, 0xd0, 0x5b, 0x43,
	0x6c, 0x8a, 0x1e, 0x96, 0x47, 0xae, 0x74, 0x46, 0x47, 0xe6, 0xe0, 0xeb, 0x44, 0xe9, 0x8c, 0x42,
	0xa2, 0x9d, 0xdb, 0x26, 0x1f, 0x4f, 0x8a, 0xdc, 0x0b, 0xa6, 0xf9, 0x58, 0x22, 0x97, 0x23, 0x23,
	0xc3, 0xd3, 0x12, 0x96, 0x51, 0x31, 0x01, 0xac, 0x88, 0x2d, 0x90, 0x3b, 0xb7, 0x79, 0x15, 0x09,
	0x09, 0x58, 0x0f, 0x24, 0xa8, 0x81, 0x88, 0xa9, 0xb3, 0x65, 0x8e, 0xe6, 0x59, 0x91, 0x7b, 0x87,
	0x0b, 0x23, 0x33, 0xe7, 0x07, 0xe1, 0xfe, 0xac, 0x70, 0x5a, 0xf2, 0xee, 0x04, 0x5f, 0x1f, 0xdc,
	0x24, 0xc5, 0x98, 0x66, 0xd2, 0xa8, 0x0e, 0x32, 0x9b, 0x5a, 0x30, 0xb8, 0x1b, 0xea, 0x74, 0x70,
	0x93, 0xd4, 0x9f, 0xd4, 0xe4, 0xb8, 0xf9, 0xf7, 0xbb, 0x67, 0x7d, 0xfd, 0xf3, 0xe3, 0xb9, 0x37,
	0x7b, 0x55, 0x0c, 0xa7, 0x97, 0x45, 0xf5, 0xd7, 0x6e, 0xbf, 0xfc, 0x79, 0xe9, 0x5a, 0x17, 0x97,
	0xae, 0xf5, 0xfb, 0xd2, 0xb5, 0xbe, 0x8d, 0xdd, 0x95, 0x8b, 0xb1, 0xbb, 0xf2, 0x6b, 0xec, 0xae,
	0x7c, 0x70, 0x97, 0x7e, 0xd5, 0x64, 0xe3, 0x6c, 0xc3, 0x5c, 0x13, 0x2f, 0xfe, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0x0e, 0xcc, 0xf5, 0x8e, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxCreditsPerSemester != that1.MaxCreditsPerSemester {
		return false
	}
	if this.MaxPlannedSemesters != that1.MaxPlannedSemesters {
		return false
	}
	if this.RecommendationWeight != that1.RecommendationWeight {
		return false
	}
	if this.IpfsTimeout != that1.IpfsTimeout {
		return false
	}
	if this.MinimumGradeForProgress != that1.MinimumGradeForProgress {
		return false
	}
	if len(this.AllowedRecommendationTypes) != len(that1.AllowedRecommendationTypes) {
		return false
	}
	for i := range this.AllowedRecommendationTypes {
		if this.AllowedRecommendationTypes[i] != that1.AllowedRecommendationTypes[i] {
			return false
		}
	}
	if len(this.DefaultDifficultyLevels) != len(that1.DefaultDifficultyLevels) {
		return false
	}
	for i := range this.DefaultDifficultyLevels {
		if this.DefaultDifficultyLevels[i] != that1.DefaultDifficultyLevels[i] {
			return false
		}
	}
	if this.MaxStudyPlansPerStudent != that1.MaxStudyPlansPerStudent {
		return false
	}
	if this.RecommendationScoreThreshold != that1.RecommendationScoreThreshold {
		return false
	}
	if this.DefaultSemesterDuration != that1.DefaultSemesterDuration {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultSemesterDuration != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DefaultSemesterDuration))
		i--
		dAtA[i] = 0x50
	}
	if m.RecommendationScoreThreshold != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RecommendationScoreThreshold))))
		i--
		dAtA[i] = 0x4d
	}
	if m.MaxStudyPlansPerStudent != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxStudyPlansPerStudent))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DefaultDifficultyLevels) > 0 {
		for iNdEx := len(m.DefaultDifficultyLevels) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DefaultDifficultyLevels[iNdEx])
			copy(dAtA[i:], m.DefaultDifficultyLevels[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.DefaultDifficultyLevels[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.AllowedRecommendationTypes) > 0 {
		for iNdEx := len(m.AllowedRecommendationTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedRecommendationTypes[iNdEx])
			copy(dAtA[i:], m.AllowedRecommendationTypes[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.AllowedRecommendationTypes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MinimumGradeForProgress != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinimumGradeForProgress))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.IpfsTimeout) > 0 {
		i -= len(m.IpfsTimeout)
		copy(dAtA[i:], m.IpfsTimeout)
		i = encodeVarintParams(dAtA, i, uint64(len(m.IpfsTimeout)))
		i--
		dAtA[i] = 0x22
	}
	if m.RecommendationWeight != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RecommendationWeight))))
		i--
		dAtA[i] = 0x1d
	}
	if m.MaxPlannedSemesters != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxPlannedSemesters))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxCreditsPerSemester != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxCreditsPerSemester))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxCreditsPerSemester != 0 {
		n += 1 + sovParams(uint64(m.MaxCreditsPerSemester))
	}
	if m.MaxPlannedSemesters != 0 {
		n += 1 + sovParams(uint64(m.MaxPlannedSemesters))
	}
	if m.RecommendationWeight != 0 {
		n += 5
	}
	l = len(m.IpfsTimeout)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MinimumGradeForProgress != 0 {
		n += 5
	}
	if len(m.AllowedRecommendationTypes) > 0 {
		for _, s := range m.AllowedRecommendationTypes {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.DefaultDifficultyLevels) > 0 {
		for _, s := range m.DefaultDifficultyLevels {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.MaxStudyPlansPerStudent != 0 {
		n += 1 + sovParams(uint64(m.MaxStudyPlansPerStudent))
	}
	if m.RecommendationScoreThreshold != 0 {
		n += 5
	}
	if m.DefaultSemesterDuration != 0 {
		n += 1 + sovParams(uint64(m.DefaultSemesterDuration))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCreditsPerSemester", wireType)
			}
			m.MaxCreditsPerSemester = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCreditsPerSemester |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlannedSemesters", wireType)
			}
			m.MaxPlannedSemesters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlannedSemesters |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendationWeight", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RecommendationWeight = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumGradeForProgress", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinimumGradeForProgress = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedRecommendationTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedRecommendationTypes = append(m.AllowedRecommendationTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDifficultyLevels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultDifficultyLevels = append(m.DefaultDifficultyLevels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStudyPlansPerStudent", wireType)
			}
			m.MaxStudyPlansPerStudent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStudyPlansPerStudent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendationScoreThreshold", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RecommendationScoreThreshold = float32(math.Float32frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSemesterDuration", wireType)
			}
			m.DefaultSemesterDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultSemesterDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
