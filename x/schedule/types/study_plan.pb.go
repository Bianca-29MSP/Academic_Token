// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/schedule/study_plan.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StudyPlan struct {
	Index            string             `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Student          string             `protobuf:"bytes,2,opt,name=student,proto3" json:"student,omitempty"`
	CreationDate     string             `protobuf:"bytes,3,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	CompletionTarget string             `protobuf:"bytes,4,opt,name=completionTarget,proto3" json:"completionTarget,omitempty"`
	AdditionalNotes  string             `protobuf:"bytes,5,opt,name=additionalNotes,proto3" json:"additionalNotes,omitempty"`
	Status           string             `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	PlannedSemesters []*PlannedSemester `protobuf:"bytes,7,rep,name=plannedSemesters,proto3" json:"plannedSemesters,omitempty"`
}

func (m *StudyPlan) Reset()         { *m = StudyPlan{} }
func (m *StudyPlan) String() string { return proto.CompactTextString(m) }
func (*StudyPlan) ProtoMessage()    {}
func (*StudyPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_420295452cb6ea96, []int{0}
}
func (m *StudyPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudyPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudyPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudyPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyPlan.Merge(m, src)
}
func (m *StudyPlan) XXX_Size() int {
	return m.Size()
}
func (m *StudyPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyPlan.DiscardUnknown(m)
}

var xxx_messageInfo_StudyPlan proto.InternalMessageInfo

func (m *StudyPlan) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StudyPlan) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *StudyPlan) GetCreationDate() string {
	if m != nil {
		return m.CreationDate
	}
	return ""
}

func (m *StudyPlan) GetCompletionTarget() string {
	if m != nil {
		return m.CompletionTarget
	}
	return ""
}

func (m *StudyPlan) GetAdditionalNotes() string {
	if m != nil {
		return m.AdditionalNotes
	}
	return ""
}

func (m *StudyPlan) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *StudyPlan) GetPlannedSemesters() []*PlannedSemester {
	if m != nil {
		return m.PlannedSemesters
	}
	return nil
}

func init() {
	proto.RegisterType((*StudyPlan)(nil), "academictoken.schedule.StudyPlan")
}

func init() {
	proto.RegisterFile("academictoken/schedule/study_plan.proto", fileDescriptor_420295452cb6ea96)
}

var fileDescriptor_420295452cb6ea96 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0xd7, 0xcd, 0x75, 0x2c, 0x0a, 0x8e, 0x20, 0x23, 0x78, 0x08, 0x63, 0x97, 0x15, 0xc1,
	0x0e, 0xf4, 0xe2, 0x59, 0x3c, 0xcb, 0x58, 0x3d, 0x79, 0x19, 0xb1, 0xf9, 0xd0, 0x62, 0x9b, 0x94,
	0xe6, 0x2b, 0x6c, 0xff, 0xc2, 0xdf, 0xe0, 0xaf, 0xf1, 0xb8, 0xa3, 0x47, 0x69, 0xff, 0x88, 0x24,
	0xeb, 0x90, 0x3a, 0x3d, 0xbe, 0x4f, 0x9f, 0xbe, 0xe1, 0x7b, 0xc9, 0x4c, 0xc4, 0x42, 0x42, 0x96,
	0xc4, 0xa8, 0x5f, 0x41, 0xcd, 0x4d, 0xfc, 0x02, 0xb2, 0x4c, 0x61, 0x6e, 0xb0, 0x94, 0x9b, 0x55,
	0x9e, 0x0a, 0x15, 0xe6, 0x85, 0x46, 0x4d, 0xc7, 0x2d, 0x31, 0xdc, 0x8b, 0xe7, 0x97, 0xff, 0x14,
	0xd8, 0x5f, 0x15, 0xc8, 0x95, 0x81, 0x0c, 0x0c, 0x42, 0xb1, 0xab, 0x99, 0xbe, 0x77, 0xc9, 0x30,
	0xb2, 0xdd, 0x8b, 0x54, 0x28, 0x7a, 0x46, 0xfa, 0x89, 0x92, 0xb0, 0x66, 0xde, 0xc4, 0x0b, 0x86,
	0xcb, 0x5d, 0xa0, 0x8c, 0x0c, 0xec, 0xf3, 0xa0, 0x90, 0x75, 0x1d, 0xdf, 0x47, 0x3a, 0x25, 0x27,
	0x71, 0x01, 0x02, 0x13, 0xad, 0xee, 0x04, 0x02, 0xeb, 0xb9, 0xcf, 0x2d, 0x46, 0x2f, 0xc8, 0x28,
	0xd6, 0x59, 0x9e, 0x82, 0x25, 0x0f, 0xa2, 0x78, 0x06, 0x64, 0x47, 0xce, 0x3b, 0xe0, 0x34, 0x20,
	0xa7, 0x42, 0xca, 0xc4, 0x12, 0x91, 0xde, 0x6b, 0x04, 0xc3, 0xfa, 0x4e, 0xfd, 0x8d, 0xe9, 0x98,
	0xf8, 0x06, 0x05, 0x96, 0x86, 0xf9, 0x4e, 0x68, 0x12, 0x8d, 0xc8, 0xa8, 0xb9, 0x34, 0x6a, 0x0e,
	0x35, 0x6c, 0x30, 0xe9, 0x05, 0xc7, 0x57, 0xb3, 0xf0, 0xef, 0xc5, 0xc2, 0x45, 0xdb, 0x5f, 0x1e,
	0x14, 0xdc, 0xde, 0x7c, 0x54, 0xdc, 0xdb, 0x56, 0xdc, 0xfb, 0xaa, 0xb8, 0xf7, 0x56, 0xf3, 0xce,
	0xb6, 0xe6, 0x9d, 0xcf, 0x9a, 0x77, 0x1e, 0x79, 0x7b, 0xed, 0xf5, 0xcf, 0xde, 0xb8, 0xc9, 0xc1,
	0x3c, 0xf9, 0x6e, 0xe5, 0xeb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x28, 0xd7, 0x1d, 0xd7,
	0x01, 0x00, 0x00,
}

func (m *StudyPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudyPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudyPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlannedSemesters) > 0 {
		for iNdEx := len(m.PlannedSemesters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlannedSemesters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudyPlan(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintStudyPlan(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AdditionalNotes) > 0 {
		i -= len(m.AdditionalNotes)
		copy(dAtA[i:], m.AdditionalNotes)
		i = encodeVarintStudyPlan(dAtA, i, uint64(len(m.AdditionalNotes)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CompletionTarget) > 0 {
		i -= len(m.CompletionTarget)
		copy(dAtA[i:], m.CompletionTarget)
		i = encodeVarintStudyPlan(dAtA, i, uint64(len(m.CompletionTarget)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CreationDate) > 0 {
		i -= len(m.CreationDate)
		copy(dAtA[i:], m.CreationDate)
		i = encodeVarintStudyPlan(dAtA, i, uint64(len(m.CreationDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintStudyPlan(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStudyPlan(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStudyPlan(dAtA []byte, offset int, v uint64) int {
	offset -= sovStudyPlan(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StudyPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStudyPlan(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovStudyPlan(uint64(l))
	}
	l = len(m.CreationDate)
	if l > 0 {
		n += 1 + l + sovStudyPlan(uint64(l))
	}
	l = len(m.CompletionTarget)
	if l > 0 {
		n += 1 + l + sovStudyPlan(uint64(l))
	}
	l = len(m.AdditionalNotes)
	if l > 0 {
		n += 1 + l + sovStudyPlan(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovStudyPlan(uint64(l))
	}
	if len(m.PlannedSemesters) > 0 {
		for _, e := range m.PlannedSemesters {
			l = e.Size()
			n += 1 + l + sovStudyPlan(uint64(l))
		}
	}
	return n
}

func sovStudyPlan(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStudyPlan(x uint64) (n int) {
	return sovStudyPlan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StudyPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudyPlan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudyPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudyPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudyPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudyPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudyPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudyPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudyPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudyPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudyPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudyPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalNotes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudyPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudyPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalNotes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudyPlan
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudyPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlannedSemesters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudyPlan
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudyPlan
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlannedSemesters = append(m.PlannedSemesters, &PlannedSemester{})
			if err := m.PlannedSemesters[len(m.PlannedSemesters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudyPlan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudyPlan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStudyPlan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStudyPlan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudyPlan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStudyPlan
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStudyPlan
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStudyPlan
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStudyPlan        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStudyPlan          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStudyPlan = fmt.Errorf("proto: unexpected end of group")
)
