// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/schedule/planned_semester.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlannedSemester struct {
	SemesterCode    string   `protobuf:"bytes,1,opt,name=semesterCode,proto3" json:"semesterCode,omitempty"`
	PlannedSubjects []string `protobuf:"bytes,2,rep,name=plannedSubjects,proto3" json:"plannedSubjects,omitempty"`
	TotalCredits    string   `protobuf:"bytes,3,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	TotalHours      string   `protobuf:"bytes,4,opt,name=totalHours,proto3" json:"totalHours,omitempty"`
	Status          string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *PlannedSemester) Reset()         { *m = PlannedSemester{} }
func (m *PlannedSemester) String() string { return proto.CompactTextString(m) }
func (*PlannedSemester) ProtoMessage()    {}
func (*PlannedSemester) Descriptor() ([]byte, []int) {
	return fileDescriptor_10742c89712c0c2d, []int{0}
}
func (m *PlannedSemester) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlannedSemester) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlannedSemester.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlannedSemester) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlannedSemester.Merge(m, src)
}
func (m *PlannedSemester) XXX_Size() int {
	return m.Size()
}
func (m *PlannedSemester) XXX_DiscardUnknown() {
	xxx_messageInfo_PlannedSemester.DiscardUnknown(m)
}

var xxx_messageInfo_PlannedSemester proto.InternalMessageInfo

func (m *PlannedSemester) GetSemesterCode() string {
	if m != nil {
		return m.SemesterCode
	}
	return ""
}

func (m *PlannedSemester) GetPlannedSubjects() []string {
	if m != nil {
		return m.PlannedSubjects
	}
	return nil
}

func (m *PlannedSemester) GetTotalCredits() string {
	if m != nil {
		return m.TotalCredits
	}
	return ""
}

func (m *PlannedSemester) GetTotalHours() string {
	if m != nil {
		return m.TotalHours
	}
	return ""
}

func (m *PlannedSemester) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*PlannedSemester)(nil), "academictoken.schedule.PlannedSemester")
}

func init() {
	proto.RegisterFile("academictoken/schedule/planned_semester.proto", fileDescriptor_10742c89712c0c2d)
}

var fileDescriptor_10742c89712c0c2d = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4d, 0x4c, 0x4e, 0x4c,
	0x49, 0xcd, 0xcd, 0x4c, 0x2e, 0xc9, 0xcf, 0x4e, 0xcd, 0xd3, 0x2f, 0x4e, 0xce, 0x48, 0x4d, 0x29,
	0xcd, 0x49, 0xd5, 0x2f, 0xc8, 0x49, 0xcc, 0xcb, 0x4b, 0x4d, 0x89, 0x2f, 0x4e, 0xcd, 0x4d, 0x2d,
	0x2e, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x43, 0x51, 0xae, 0x07, 0x53,
	0xae, 0xb4, 0x9b, 0x91, 0x8b, 0x3f, 0x00, 0xa2, 0x25, 0x18, 0xaa, 0x43, 0x48, 0x89, 0x8b, 0x07,
	0xa6, 0xdb, 0x39, 0x3f, 0x25, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0x45, 0x4c, 0x48,
	0x83, 0x8b, 0x1f, 0x6a, 0x53, 0x70, 0x69, 0x52, 0x56, 0x6a, 0x72, 0x49, 0xb1, 0x04, 0x93, 0x02,
	0xb3, 0x06, 0x67, 0x10, 0xba, 0x30, 0xc8, 0xb4, 0x92, 0xfc, 0x92, 0xc4, 0x1c, 0xe7, 0xa2, 0xd4,
	0x94, 0xcc, 0x92, 0x62, 0x09, 0x66, 0x88, 0x69, 0xc8, 0x62, 0x42, 0x72, 0x5c, 0x5c, 0x60, 0xbe,
	0x47, 0x7e, 0x69, 0x51, 0xb1, 0x04, 0x0b, 0x58, 0x05, 0x92, 0x88, 0x90, 0x18, 0x17, 0x5b, 0x71,
	0x49, 0x62, 0x49, 0x69, 0xb1, 0x04, 0x2b, 0x58, 0x0e, 0xca, 0x73, 0xb2, 0x38, 0xf1, 0x48, 0x8e,
	0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58,
	0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x39, 0xd4, 0xe0, 0xa9, 0x40, 0x04, 0x50, 0x49, 0x65,
	0x41, 0x6a, 0x71, 0x12, 0x1b, 0x38, 0x58, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x90,
	0xf9, 0xca, 0x47, 0x01, 0x00, 0x00,
}

func (m *PlannedSemester) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlannedSemester) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlannedSemester) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPlannedSemester(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalHours) > 0 {
		i -= len(m.TotalHours)
		copy(dAtA[i:], m.TotalHours)
		i = encodeVarintPlannedSemester(dAtA, i, uint64(len(m.TotalHours)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalCredits) > 0 {
		i -= len(m.TotalCredits)
		copy(dAtA[i:], m.TotalCredits)
		i = encodeVarintPlannedSemester(dAtA, i, uint64(len(m.TotalCredits)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlannedSubjects) > 0 {
		for iNdEx := len(m.PlannedSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PlannedSubjects[iNdEx])
			copy(dAtA[i:], m.PlannedSubjects[iNdEx])
			i = encodeVarintPlannedSemester(dAtA, i, uint64(len(m.PlannedSubjects[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SemesterCode) > 0 {
		i -= len(m.SemesterCode)
		copy(dAtA[i:], m.SemesterCode)
		i = encodeVarintPlannedSemester(dAtA, i, uint64(len(m.SemesterCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlannedSemester(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlannedSemester(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlannedSemester) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SemesterCode)
	if l > 0 {
		n += 1 + l + sovPlannedSemester(uint64(l))
	}
	if len(m.PlannedSubjects) > 0 {
		for _, s := range m.PlannedSubjects {
			l = len(s)
			n += 1 + l + sovPlannedSemester(uint64(l))
		}
	}
	l = len(m.TotalCredits)
	if l > 0 {
		n += 1 + l + sovPlannedSemester(uint64(l))
	}
	l = len(m.TotalHours)
	if l > 0 {
		n += 1 + l + sovPlannedSemester(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPlannedSemester(uint64(l))
	}
	return n
}

func sovPlannedSemester(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlannedSemester(x uint64) (n int) {
	return sovPlannedSemester(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlannedSemester) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlannedSemester
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlannedSemester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlannedSemester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemesterCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlannedSemester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SemesterCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlannedSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlannedSemester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlannedSubjects = append(m.PlannedSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlannedSemester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCredits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlannedSemester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalHours = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlannedSemester
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlannedSemester(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlannedSemester
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlannedSemester(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlannedSemester
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlannedSemester
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlannedSemester
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlannedSemester
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlannedSemester
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlannedSemester
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlannedSemester        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlannedSemester          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlannedSemester = fmt.Errorf("proto: unexpected end of group")
)
