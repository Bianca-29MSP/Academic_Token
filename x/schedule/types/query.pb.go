// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/schedule/query.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetStudyPlanRequest is request type for the Query/StudyPlan RPC method.
type QueryGetStudyPlanRequest struct {
	StudyPlanId string `protobuf:"bytes,1,opt,name=studyPlanId,proto3" json:"studyPlanId,omitempty"`
}

func (m *QueryGetStudyPlanRequest) Reset()         { *m = QueryGetStudyPlanRequest{} }
func (m *QueryGetStudyPlanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudyPlanRequest) ProtoMessage()    {}
func (*QueryGetStudyPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{2}
}
func (m *QueryGetStudyPlanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudyPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudyPlanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudyPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudyPlanRequest.Merge(m, src)
}
func (m *QueryGetStudyPlanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudyPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudyPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudyPlanRequest proto.InternalMessageInfo

func (m *QueryGetStudyPlanRequest) GetStudyPlanId() string {
	if m != nil {
		return m.StudyPlanId
	}
	return ""
}

// QueryGetStudyPlanResponse is response type for the Query/StudyPlan RPC method.
type QueryGetStudyPlanResponse struct {
	StudyPlan StudyPlan `protobuf:"bytes,1,opt,name=studyPlan,proto3" json:"studyPlan"`
}

func (m *QueryGetStudyPlanResponse) Reset()         { *m = QueryGetStudyPlanResponse{} }
func (m *QueryGetStudyPlanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStudyPlanResponse) ProtoMessage()    {}
func (*QueryGetStudyPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{3}
}
func (m *QueryGetStudyPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStudyPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStudyPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStudyPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStudyPlanResponse.Merge(m, src)
}
func (m *QueryGetStudyPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStudyPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStudyPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStudyPlanResponse proto.InternalMessageInfo

func (m *QueryGetStudyPlanResponse) GetStudyPlan() StudyPlan {
	if m != nil {
		return m.StudyPlan
	}
	return StudyPlan{}
}

// QueryAllStudyPlanRequest is request type for the Query/StudyPlanAll RPC method.
type QueryAllStudyPlanRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStudyPlanRequest) Reset()         { *m = QueryAllStudyPlanRequest{} }
func (m *QueryAllStudyPlanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStudyPlanRequest) ProtoMessage()    {}
func (*QueryAllStudyPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{4}
}
func (m *QueryAllStudyPlanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStudyPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStudyPlanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStudyPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStudyPlanRequest.Merge(m, src)
}
func (m *QueryAllStudyPlanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStudyPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStudyPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStudyPlanRequest proto.InternalMessageInfo

func (m *QueryAllStudyPlanRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllStudyPlanResponse is response type for the Query/StudyPlanAll RPC method.
type QueryAllStudyPlanResponse struct {
	StudyPlan  []StudyPlan         `protobuf:"bytes,1,rep,name=studyPlan,proto3" json:"studyPlan"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStudyPlanResponse) Reset()         { *m = QueryAllStudyPlanResponse{} }
func (m *QueryAllStudyPlanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStudyPlanResponse) ProtoMessage()    {}
func (*QueryAllStudyPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{5}
}
func (m *QueryAllStudyPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStudyPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStudyPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStudyPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStudyPlanResponse.Merge(m, src)
}
func (m *QueryAllStudyPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStudyPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStudyPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStudyPlanResponse proto.InternalMessageInfo

func (m *QueryAllStudyPlanResponse) GetStudyPlan() []StudyPlan {
	if m != nil {
		return m.StudyPlan
	}
	return nil
}

func (m *QueryAllStudyPlanResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStudyPlansByStudentRequest is request type for the Query/StudyPlansByStudent RPC method.
type QueryStudyPlansByStudentRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
}

func (m *QueryStudyPlansByStudentRequest) Reset()         { *m = QueryStudyPlansByStudentRequest{} }
func (m *QueryStudyPlansByStudentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStudyPlansByStudentRequest) ProtoMessage()    {}
func (*QueryStudyPlansByStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{6}
}
func (m *QueryStudyPlansByStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStudyPlansByStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStudyPlansByStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStudyPlansByStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStudyPlansByStudentRequest.Merge(m, src)
}
func (m *QueryStudyPlansByStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStudyPlansByStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStudyPlansByStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStudyPlansByStudentRequest proto.InternalMessageInfo

func (m *QueryStudyPlansByStudentRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// QueryStudyPlansByStudentResponse is response type for the Query/StudyPlansByStudent RPC method.
type QueryStudyPlansByStudentResponse struct {
	StudyPlans []StudyPlan `protobuf:"bytes,1,rep,name=studyPlans,proto3" json:"studyPlans"`
	StudentId  string      `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
}

func (m *QueryStudyPlansByStudentResponse) Reset()         { *m = QueryStudyPlansByStudentResponse{} }
func (m *QueryStudyPlansByStudentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStudyPlansByStudentResponse) ProtoMessage()    {}
func (*QueryStudyPlansByStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{7}
}
func (m *QueryStudyPlansByStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStudyPlansByStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStudyPlansByStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStudyPlansByStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStudyPlansByStudentResponse.Merge(m, src)
}
func (m *QueryStudyPlansByStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStudyPlansByStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStudyPlansByStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStudyPlansByStudentResponse proto.InternalMessageInfo

func (m *QueryStudyPlansByStudentResponse) GetStudyPlans() []StudyPlan {
	if m != nil {
		return m.StudyPlans
	}
	return nil
}

func (m *QueryStudyPlansByStudentResponse) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// QueryGetPlannedSemesterRequest is request type for the Query/PlannedSemester RPC method.
type QueryGetPlannedSemesterRequest struct {
	PlannedSemesterId string `protobuf:"bytes,1,opt,name=plannedSemesterId,proto3" json:"plannedSemesterId,omitempty"`
}

func (m *QueryGetPlannedSemesterRequest) Reset()         { *m = QueryGetPlannedSemesterRequest{} }
func (m *QueryGetPlannedSemesterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlannedSemesterRequest) ProtoMessage()    {}
func (*QueryGetPlannedSemesterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{8}
}
func (m *QueryGetPlannedSemesterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlannedSemesterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlannedSemesterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlannedSemesterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlannedSemesterRequest.Merge(m, src)
}
func (m *QueryGetPlannedSemesterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlannedSemesterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlannedSemesterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlannedSemesterRequest proto.InternalMessageInfo

func (m *QueryGetPlannedSemesterRequest) GetPlannedSemesterId() string {
	if m != nil {
		return m.PlannedSemesterId
	}
	return ""
}

// QueryGetPlannedSemesterResponse is response type for the Query/PlannedSemester RPC method.
type QueryGetPlannedSemesterResponse struct {
	PlannedSemester PlannedSemester `protobuf:"bytes,1,opt,name=plannedSemester,proto3" json:"plannedSemester"`
}

func (m *QueryGetPlannedSemesterResponse) Reset()         { *m = QueryGetPlannedSemesterResponse{} }
func (m *QueryGetPlannedSemesterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlannedSemesterResponse) ProtoMessage()    {}
func (*QueryGetPlannedSemesterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{9}
}
func (m *QueryGetPlannedSemesterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlannedSemesterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlannedSemesterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlannedSemesterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlannedSemesterResponse.Merge(m, src)
}
func (m *QueryGetPlannedSemesterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlannedSemesterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlannedSemesterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlannedSemesterResponse proto.InternalMessageInfo

func (m *QueryGetPlannedSemesterResponse) GetPlannedSemester() PlannedSemester {
	if m != nil {
		return m.PlannedSemester
	}
	return PlannedSemester{}
}

// QueryGetSubjectRecommendationRequest is request type for the Query/SubjectRecommendation RPC method.
type QueryGetSubjectRecommendationRequest struct {
	RecommendationId string `protobuf:"bytes,1,opt,name=recommendationId,proto3" json:"recommendationId,omitempty"`
}

func (m *QueryGetSubjectRecommendationRequest) Reset()         { *m = QueryGetSubjectRecommendationRequest{} }
func (m *QueryGetSubjectRecommendationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubjectRecommendationRequest) ProtoMessage()    {}
func (*QueryGetSubjectRecommendationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{10}
}
func (m *QueryGetSubjectRecommendationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubjectRecommendationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubjectRecommendationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubjectRecommendationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubjectRecommendationRequest.Merge(m, src)
}
func (m *QueryGetSubjectRecommendationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubjectRecommendationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubjectRecommendationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubjectRecommendationRequest proto.InternalMessageInfo

func (m *QueryGetSubjectRecommendationRequest) GetRecommendationId() string {
	if m != nil {
		return m.RecommendationId
	}
	return ""
}

// QueryGetSubjectRecommendationResponse is response type for the Query/SubjectRecommendation RPC method.
type QueryGetSubjectRecommendationResponse struct {
	SubjectRecommendation SubjectRecommendation `protobuf:"bytes,1,opt,name=subjectRecommendation,proto3" json:"subjectRecommendation"`
}

func (m *QueryGetSubjectRecommendationResponse) Reset()         { *m = QueryGetSubjectRecommendationResponse{} }
func (m *QueryGetSubjectRecommendationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubjectRecommendationResponse) ProtoMessage()    {}
func (*QueryGetSubjectRecommendationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{11}
}
func (m *QueryGetSubjectRecommendationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubjectRecommendationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubjectRecommendationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubjectRecommendationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubjectRecommendationResponse.Merge(m, src)
}
func (m *QueryGetSubjectRecommendationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubjectRecommendationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubjectRecommendationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubjectRecommendationResponse proto.InternalMessageInfo

func (m *QueryGetSubjectRecommendationResponse) GetSubjectRecommendation() SubjectRecommendation {
	if m != nil {
		return m.SubjectRecommendation
	}
	return SubjectRecommendation{}
}

// QuerySubjectRecommendationsByStudentRequest is request type for the Query/SubjectRecommendationsByStudent RPC method.
type QuerySubjectRecommendationsByStudentRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
}

func (m *QuerySubjectRecommendationsByStudentRequest) Reset() {
	*m = QuerySubjectRecommendationsByStudentRequest{}
}
func (m *QuerySubjectRecommendationsByStudentRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySubjectRecommendationsByStudentRequest) ProtoMessage() {}
func (*QuerySubjectRecommendationsByStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{12}
}
func (m *QuerySubjectRecommendationsByStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectRecommendationsByStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectRecommendationsByStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectRecommendationsByStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectRecommendationsByStudentRequest.Merge(m, src)
}
func (m *QuerySubjectRecommendationsByStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectRecommendationsByStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectRecommendationsByStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectRecommendationsByStudentRequest proto.InternalMessageInfo

func (m *QuerySubjectRecommendationsByStudentRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// QuerySubjectRecommendationsByStudentResponse is response type for the Query/SubjectRecommendationsByStudent RPC method.
type QuerySubjectRecommendationsByStudentResponse struct {
	SubjectRecommendations []SubjectRecommendation `protobuf:"bytes,1,rep,name=subjectRecommendations,proto3" json:"subjectRecommendations"`
	StudentId              string                  `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
}

func (m *QuerySubjectRecommendationsByStudentResponse) Reset() {
	*m = QuerySubjectRecommendationsByStudentResponse{}
}
func (m *QuerySubjectRecommendationsByStudentResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySubjectRecommendationsByStudentResponse) ProtoMessage() {}
func (*QuerySubjectRecommendationsByStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{13}
}
func (m *QuerySubjectRecommendationsByStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectRecommendationsByStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectRecommendationsByStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectRecommendationsByStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectRecommendationsByStudentResponse.Merge(m, src)
}
func (m *QuerySubjectRecommendationsByStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectRecommendationsByStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectRecommendationsByStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectRecommendationsByStudentResponse proto.InternalMessageInfo

func (m *QuerySubjectRecommendationsByStudentResponse) GetSubjectRecommendations() []SubjectRecommendation {
	if m != nil {
		return m.SubjectRecommendations
	}
	return nil
}

func (m *QuerySubjectRecommendationsByStudentResponse) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// QueryGenerateRecommendationsRequest is request type for the Query/GenerateRecommendations RPC method.
type QueryGenerateRecommendationsRequest struct {
	StudentId    string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	SemesterCode string `protobuf:"bytes,2,opt,name=semesterCode,proto3" json:"semesterCode,omitempty"`
}

func (m *QueryGenerateRecommendationsRequest) Reset()         { *m = QueryGenerateRecommendationsRequest{} }
func (m *QueryGenerateRecommendationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGenerateRecommendationsRequest) ProtoMessage()    {}
func (*QueryGenerateRecommendationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{14}
}
func (m *QueryGenerateRecommendationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGenerateRecommendationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGenerateRecommendationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGenerateRecommendationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGenerateRecommendationsRequest.Merge(m, src)
}
func (m *QueryGenerateRecommendationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGenerateRecommendationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGenerateRecommendationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGenerateRecommendationsRequest proto.InternalMessageInfo

func (m *QueryGenerateRecommendationsRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *QueryGenerateRecommendationsRequest) GetSemesterCode() string {
	if m != nil {
		return m.SemesterCode
	}
	return ""
}

// QueryGenerateRecommendationsResponse is response type for the Query/GenerateRecommendations RPC method.
type QueryGenerateRecommendationsResponse struct {
	Recommendations []SubjectRecommendation `protobuf:"bytes,1,rep,name=recommendations,proto3" json:"recommendations"`
	StudentId       string                  `protobuf:"bytes,2,opt,name=studentId,proto3" json:"studentId,omitempty"`
	SemesterCode    string                  `protobuf:"bytes,3,opt,name=semesterCode,proto3" json:"semesterCode,omitempty"`
}

func (m *QueryGenerateRecommendationsResponse) Reset()         { *m = QueryGenerateRecommendationsResponse{} }
func (m *QueryGenerateRecommendationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGenerateRecommendationsResponse) ProtoMessage()    {}
func (*QueryGenerateRecommendationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{15}
}
func (m *QueryGenerateRecommendationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGenerateRecommendationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGenerateRecommendationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGenerateRecommendationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGenerateRecommendationsResponse.Merge(m, src)
}
func (m *QueryGenerateRecommendationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGenerateRecommendationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGenerateRecommendationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGenerateRecommendationsResponse proto.InternalMessageInfo

func (m *QueryGenerateRecommendationsResponse) GetRecommendations() []SubjectRecommendation {
	if m != nil {
		return m.Recommendations
	}
	return nil
}

func (m *QueryGenerateRecommendationsResponse) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *QueryGenerateRecommendationsResponse) GetSemesterCode() string {
	if m != nil {
		return m.SemesterCode
	}
	return ""
}

// AcademicTree represents a simplified academic tree structure for progress tracking
type AcademicTree struct {
	StudentId          string   `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	CourseId           string   `protobuf:"bytes,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	CurriculumVersion  string   `protobuf:"bytes,3,opt,name=curriculumVersion,proto3" json:"curriculumVersion,omitempty"`
	TotalCredits       uint64   `protobuf:"varint,4,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	CoefficientGPA     float32  `protobuf:"fixed32,5,opt,name=coefficientGPA,proto3" json:"coefficientGPA,omitempty"`
	CompletedSubjects  []string `protobuf:"bytes,6,rep,name=completedSubjects,proto3" json:"completedSubjects,omitempty"`
	InProgressSubjects []string `protobuf:"bytes,7,rep,name=inProgressSubjects,proto3" json:"inProgressSubjects,omitempty"`
}

func (m *AcademicTree) Reset()         { *m = AcademicTree{} }
func (m *AcademicTree) String() string { return proto.CompactTextString(m) }
func (*AcademicTree) ProtoMessage()    {}
func (*AcademicTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{16}
}
func (m *AcademicTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcademicTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcademicTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcademicTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcademicTree.Merge(m, src)
}
func (m *AcademicTree) XXX_Size() int {
	return m.Size()
}
func (m *AcademicTree) XXX_DiscardUnknown() {
	xxx_messageInfo_AcademicTree.DiscardUnknown(m)
}

var xxx_messageInfo_AcademicTree proto.InternalMessageInfo

func (m *AcademicTree) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *AcademicTree) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *AcademicTree) GetCurriculumVersion() string {
	if m != nil {
		return m.CurriculumVersion
	}
	return ""
}

func (m *AcademicTree) GetTotalCredits() uint64 {
	if m != nil {
		return m.TotalCredits
	}
	return 0
}

func (m *AcademicTree) GetCoefficientGPA() float32 {
	if m != nil {
		return m.CoefficientGPA
	}
	return 0
}

func (m *AcademicTree) GetCompletedSubjects() []string {
	if m != nil {
		return m.CompletedSubjects
	}
	return nil
}

func (m *AcademicTree) GetInProgressSubjects() []string {
	if m != nil {
		return m.InProgressSubjects
	}
	return nil
}

// QueryCheckStudentProgressRequest is request type for the Query/CheckStudentProgress RPC method.
type QueryCheckStudentProgressRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	CourseId  string `protobuf:"bytes,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
}

func (m *QueryCheckStudentProgressRequest) Reset()         { *m = QueryCheckStudentProgressRequest{} }
func (m *QueryCheckStudentProgressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckStudentProgressRequest) ProtoMessage()    {}
func (*QueryCheckStudentProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{17}
}
func (m *QueryCheckStudentProgressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckStudentProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckStudentProgressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckStudentProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckStudentProgressRequest.Merge(m, src)
}
func (m *QueryCheckStudentProgressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckStudentProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckStudentProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckStudentProgressRequest proto.InternalMessageInfo

func (m *QueryCheckStudentProgressRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *QueryCheckStudentProgressRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

// QueryCheckStudentProgressResponse is response type for the Query/CheckStudentProgress RPC method.
type QueryCheckStudentProgressResponse struct {
	StudentId            string       `protobuf:"bytes,1,opt,name=studentId,proto3" json:"studentId,omitempty"`
	CourseId             string       `protobuf:"bytes,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	CompletedCredits     uint64       `protobuf:"varint,3,opt,name=completedCredits,proto3" json:"completedCredits,omitempty"`
	TotalRequiredCredits uint64       `protobuf:"varint,4,opt,name=totalRequiredCredits,proto3" json:"totalRequiredCredits,omitempty"`
	CompletionPercentage float32      `protobuf:"fixed32,5,opt,name=completionPercentage,proto3" json:"completionPercentage,omitempty"`
	RemainingSemesters   uint64       `protobuf:"varint,6,opt,name=remainingSemesters,proto3" json:"remainingSemesters,omitempty"`
	CurrentGPA           float32      `protobuf:"fixed32,7,opt,name=currentGPA,proto3" json:"currentGPA,omitempty"`
	AcademicTree         AcademicTree `protobuf:"bytes,8,opt,name=academicTree,proto3" json:"academicTree"`
}

func (m *QueryCheckStudentProgressResponse) Reset()         { *m = QueryCheckStudentProgressResponse{} }
func (m *QueryCheckStudentProgressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckStudentProgressResponse) ProtoMessage()    {}
func (*QueryCheckStudentProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{18}
}
func (m *QueryCheckStudentProgressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckStudentProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckStudentProgressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckStudentProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckStudentProgressResponse.Merge(m, src)
}
func (m *QueryCheckStudentProgressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckStudentProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckStudentProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckStudentProgressResponse proto.InternalMessageInfo

func (m *QueryCheckStudentProgressResponse) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *QueryCheckStudentProgressResponse) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *QueryCheckStudentProgressResponse) GetCompletedCredits() uint64 {
	if m != nil {
		return m.CompletedCredits
	}
	return 0
}

func (m *QueryCheckStudentProgressResponse) GetTotalRequiredCredits() uint64 {
	if m != nil {
		return m.TotalRequiredCredits
	}
	return 0
}

func (m *QueryCheckStudentProgressResponse) GetCompletionPercentage() float32 {
	if m != nil {
		return m.CompletionPercentage
	}
	return 0
}

func (m *QueryCheckStudentProgressResponse) GetRemainingSemesters() uint64 {
	if m != nil {
		return m.RemainingSemesters
	}
	return 0
}

func (m *QueryCheckStudentProgressResponse) GetCurrentGPA() float32 {
	if m != nil {
		return m.CurrentGPA
	}
	return 0
}

func (m *QueryCheckStudentProgressResponse) GetAcademicTree() AcademicTree {
	if m != nil {
		return m.AcademicTree
	}
	return AcademicTree{}
}

// QueryOptimizeScheduleRequest is request type for the Query/OptimizeSchedule RPC method.
type QueryOptimizeScheduleRequest struct {
	StudyPlanId string `protobuf:"bytes,1,opt,name=studyPlanId,proto3" json:"studyPlanId,omitempty"`
}

func (m *QueryOptimizeScheduleRequest) Reset()         { *m = QueryOptimizeScheduleRequest{} }
func (m *QueryOptimizeScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOptimizeScheduleRequest) ProtoMessage()    {}
func (*QueryOptimizeScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{19}
}
func (m *QueryOptimizeScheduleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOptimizeScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOptimizeScheduleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOptimizeScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOptimizeScheduleRequest.Merge(m, src)
}
func (m *QueryOptimizeScheduleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOptimizeScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOptimizeScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOptimizeScheduleRequest proto.InternalMessageInfo

func (m *QueryOptimizeScheduleRequest) GetStudyPlanId() string {
	if m != nil {
		return m.StudyPlanId
	}
	return ""
}

// QueryOptimizeScheduleResponse is response type for the Query/OptimizeSchedule RPC method.
type QueryOptimizeScheduleResponse struct {
	StudyPlanId      string    `protobuf:"bytes,1,opt,name=studyPlanId,proto3" json:"studyPlanId,omitempty"`
	OptimizedPlan    StudyPlan `protobuf:"bytes,2,opt,name=optimizedPlan,proto3" json:"optimizedPlan"`
	Suggestions      []string  `protobuf:"bytes,3,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
	EstimatedSavings string    `protobuf:"bytes,4,opt,name=estimatedSavings,proto3" json:"estimatedSavings,omitempty"`
}

func (m *QueryOptimizeScheduleResponse) Reset()         { *m = QueryOptimizeScheduleResponse{} }
func (m *QueryOptimizeScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOptimizeScheduleResponse) ProtoMessage()    {}
func (*QueryOptimizeScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_261dc604687f149b, []int{20}
}
func (m *QueryOptimizeScheduleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOptimizeScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOptimizeScheduleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOptimizeScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOptimizeScheduleResponse.Merge(m, src)
}
func (m *QueryOptimizeScheduleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOptimizeScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOptimizeScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOptimizeScheduleResponse proto.InternalMessageInfo

func (m *QueryOptimizeScheduleResponse) GetStudyPlanId() string {
	if m != nil {
		return m.StudyPlanId
	}
	return ""
}

func (m *QueryOptimizeScheduleResponse) GetOptimizedPlan() StudyPlan {
	if m != nil {
		return m.OptimizedPlan
	}
	return StudyPlan{}
}

func (m *QueryOptimizeScheduleResponse) GetSuggestions() []string {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

func (m *QueryOptimizeScheduleResponse) GetEstimatedSavings() string {
	if m != nil {
		return m.EstimatedSavings
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "academictoken.schedule.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "academictoken.schedule.QueryParamsResponse")
	proto.RegisterType((*QueryGetStudyPlanRequest)(nil), "academictoken.schedule.QueryGetStudyPlanRequest")
	proto.RegisterType((*QueryGetStudyPlanResponse)(nil), "academictoken.schedule.QueryGetStudyPlanResponse")
	proto.RegisterType((*QueryAllStudyPlanRequest)(nil), "academictoken.schedule.QueryAllStudyPlanRequest")
	proto.RegisterType((*QueryAllStudyPlanResponse)(nil), "academictoken.schedule.QueryAllStudyPlanResponse")
	proto.RegisterType((*QueryStudyPlansByStudentRequest)(nil), "academictoken.schedule.QueryStudyPlansByStudentRequest")
	proto.RegisterType((*QueryStudyPlansByStudentResponse)(nil), "academictoken.schedule.QueryStudyPlansByStudentResponse")
	proto.RegisterType((*QueryGetPlannedSemesterRequest)(nil), "academictoken.schedule.QueryGetPlannedSemesterRequest")
	proto.RegisterType((*QueryGetPlannedSemesterResponse)(nil), "academictoken.schedule.QueryGetPlannedSemesterResponse")
	proto.RegisterType((*QueryGetSubjectRecommendationRequest)(nil), "academictoken.schedule.QueryGetSubjectRecommendationRequest")
	proto.RegisterType((*QueryGetSubjectRecommendationResponse)(nil), "academictoken.schedule.QueryGetSubjectRecommendationResponse")
	proto.RegisterType((*QuerySubjectRecommendationsByStudentRequest)(nil), "academictoken.schedule.QuerySubjectRecommendationsByStudentRequest")
	proto.RegisterType((*QuerySubjectRecommendationsByStudentResponse)(nil), "academictoken.schedule.QuerySubjectRecommendationsByStudentResponse")
	proto.RegisterType((*QueryGenerateRecommendationsRequest)(nil), "academictoken.schedule.QueryGenerateRecommendationsRequest")
	proto.RegisterType((*QueryGenerateRecommendationsResponse)(nil), "academictoken.schedule.QueryGenerateRecommendationsResponse")
	proto.RegisterType((*AcademicTree)(nil), "academictoken.schedule.AcademicTree")
	proto.RegisterType((*QueryCheckStudentProgressRequest)(nil), "academictoken.schedule.QueryCheckStudentProgressRequest")
	proto.RegisterType((*QueryCheckStudentProgressResponse)(nil), "academictoken.schedule.QueryCheckStudentProgressResponse")
	proto.RegisterType((*QueryOptimizeScheduleRequest)(nil), "academictoken.schedule.QueryOptimizeScheduleRequest")
	proto.RegisterType((*QueryOptimizeScheduleResponse)(nil), "academictoken.schedule.QueryOptimizeScheduleResponse")
}

func init() {
	proto.RegisterFile("academictoken/schedule/query.proto", fileDescriptor_261dc604687f149b)
}

var fileDescriptor_261dc604687f149b = []byte{
	// 1350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcb, 0x6f, 0x1b, 0xd5,
	0x17, 0xce, 0xd8, 0x6d, 0xda, 0x9c, 0xe6, 0xf7, 0x4b, 0x7b, 0x9b, 0x16, 0x33, 0x0a, 0x8e, 0x3b,
	0x0d, 0x49, 0xe4, 0xb6, 0x9e, 0x24, 0x85, 0x34, 0x88, 0xd0, 0xe2, 0x24, 0x10, 0x15, 0x44, 0x31,
	0x0e, 0x02, 0x84, 0x40, 0xd1, 0x78, 0x7c, 0x3b, 0x1d, 0x32, 0x0f, 0x77, 0xee, 0xb8, 0x22, 0x8d,
	0xb2, 0x61, 0xd7, 0x1d, 0x8f, 0x3f, 0x00, 0x96, 0x08, 0x36, 0xec, 0x10, 0x6b, 0x16, 0x64, 0x59,
	0x09, 0x16, 0x88, 0x45, 0x41, 0x09, 0x12, 0xff, 0x02, 0x4b, 0x34, 0x77, 0xce, 0x4c, 0x3c, 0xf6,
	0x3c, 0x6c, 0xc3, 0x26, 0x9a, 0xdc, 0x7b, 0x1e, 0xdf, 0x77, 0xce, 0xb9, 0x77, 0xbe, 0x31, 0x48,
	0x8a, 0xaa, 0x34, 0xa9, 0xa9, 0xab, 0xae, 0xbd, 0x43, 0x2d, 0x99, 0xa9, 0xf7, 0x68, 0xb3, 0x6d,
	0x50, 0xf9, 0x7e, 0x9b, 0x3a, 0xbb, 0x95, 0x96, 0x63, 0xbb, 0x36, 0xb9, 0x18, 0xb1, 0xa9, 0x04,
	0x36, 0xe2, 0x39, 0xc5, 0xd4, 0x2d, 0x5b, 0xe6, 0x7f, 0x7d, 0x53, 0x71, 0x52, 0xb3, 0x35, 0x9b,
	0x3f, 0xca, 0xde, 0x13, 0xae, 0x4e, 0x69, 0xb6, 0xad, 0x19, 0x54, 0x56, 0x5a, 0xba, 0xac, 0x58,
	0x96, 0xed, 0x2a, 0xae, 0x6e, 0x5b, 0x0c, 0x77, 0xcb, 0xaa, 0xcd, 0x4c, 0x9b, 0xc9, 0x0d, 0x85,
	0x61, 0x5e, 0xf9, 0xc1, 0x62, 0x83, 0xba, 0xca, 0xa2, 0xdc, 0x52, 0x34, 0xdd, 0xe2, 0xc6, 0x68,
	0x7b, 0x39, 0x01, 0x6e, 0x4b, 0x71, 0x14, 0x33, 0x08, 0x38, 0x97, 0x60, 0xc4, 0xdc, 0x76, 0x73,
	0x77, 0xbb, 0x65, 0x28, 0x41, 0xb4, 0x6b, 0x49, 0xd1, 0x0c, 0xc5, 0xb2, 0x68, 0x73, 0x9b, 0x51,
	0x93, 0x32, 0x97, 0x3a, 0x68, 0x7e, 0x3d, 0x29, 0x6e, 0xbb, 0xf1, 0x11, 0x55, 0xdd, 0x6d, 0x87,
	0xaa, 0xb6, 0x69, 0x52, 0xab, 0xd9, 0x81, 0x58, 0x9a, 0x04, 0xf2, 0x96, 0xc7, 0xa9, 0xc6, 0x11,
	0xd6, 0xe9, 0xfd, 0x36, 0x65, 0xae, 0xf4, 0x1e, 0x9c, 0x8f, 0xac, 0xb2, 0x96, 0x6d, 0x31, 0x4a,
	0xaa, 0x30, 0xea, 0x33, 0x29, 0x08, 0x25, 0x61, 0xfe, 0xcc, 0x52, 0xb1, 0x12, 0x5f, 0xfa, 0x8a,
	0xef, 0xb7, 0x36, 0x76, 0xf0, 0x64, 0x7a, 0xe4, 0xeb, 0xbf, 0xbe, 0x2b, 0x0b, 0x75, 0x74, 0x94,
	0x56, 0xa1, 0xc0, 0x23, 0x6f, 0x52, 0x77, 0xcb, 0xe3, 0x5b, 0x33, 0x14, 0x0b, 0xb3, 0x92, 0x12,
	0x9c, 0x61, 0xc1, 0xda, 0xed, 0x26, 0xcf, 0x31, 0x56, 0xef, 0x5c, 0x92, 0x1a, 0xf0, 0x74, 0x8c,
	0x37, 0xa2, 0x7b, 0x05, 0xc6, 0x42, 0x5b, 0x04, 0x78, 0x29, 0x09, 0x60, 0xe8, 0xbd, 0x76, 0xc2,
	0xc3, 0x58, 0x3f, 0xf6, 0x94, 0x1a, 0x88, 0xb0, 0x6a, 0x18, 0x3d, 0x08, 0x5f, 0x05, 0x38, 0xee,
	0x39, 0xe6, 0x98, 0xad, 0xf8, 0x03, 0x52, 0xf1, 0x06, 0xa4, 0xe2, 0x0f, 0x26, 0x0e, 0x48, 0xa5,
	0xa6, 0x68, 0x14, 0x7d, 0xeb, 0x1d, 0x9e, 0xd2, 0xb7, 0x02, 0x12, 0x89, 0x26, 0x89, 0x27, 0x92,
	0x1f, 0x8e, 0x08, 0xd9, 0x8c, 0x80, 0xcd, 0x71, 0xb0, 0x73, 0x99, 0x60, 0x7d, 0x0c, 0x11, 0xb4,
	0xb7, 0x60, 0x9a, 0x83, 0x0d, 0x73, 0xb1, 0x35, 0xfe, 0x4c, 0x2d, 0x37, 0x28, 0xcc, 0x94, 0x0f,
	0x99, 0x5a, 0x6e, 0xd8, 0xb8, 0xe3, 0x05, 0xe9, 0x91, 0x00, 0xa5, 0xe4, 0x08, 0xc8, 0x7a, 0x13,
	0x20, 0xc4, 0xce, 0x06, 0xa5, 0xdd, 0xe1, 0x1a, 0xc5, 0x92, 0xeb, 0xc6, 0x72, 0x07, 0x8a, 0xc1,
	0x08, 0xd5, 0xfc, 0x73, 0xb4, 0x85, 0xc7, 0x28, 0xe0, 0x72, 0x15, 0xce, 0xb5, 0xa2, 0x3b, 0x21,
	0xa7, 0xde, 0x0d, 0xe9, 0x21, 0x16, 0x27, 0x2e, 0x1e, 0x32, 0x7b, 0x17, 0x26, 0xba, 0xfc, 0x70,
	0x74, 0xe6, 0x12, 0xcf, 0x4f, 0xd4, 0x1c, 0x49, 0x76, 0x47, 0x91, 0xea, 0x30, 0x13, 0x1e, 0x07,
	0xff, 0x90, 0xd7, 0x23, 0x67, 0x3c, 0x60, 0x54, 0x86, 0xb3, 0xd1, 0xc3, 0x1f, 0x12, 0xea, 0x59,
	0x97, 0x3e, 0x17, 0xe0, 0xd9, 0x8c, 0xa0, 0x48, 0x4b, 0x87, 0x0b, 0x2c, 0xce, 0x00, 0xc9, 0x5d,
	0x4b, 0xec, 0x5d, 0x9c, 0x13, 0x52, 0x8c, 0x8f, 0x28, 0xbd, 0x0e, 0x57, 0xfc, 0xf9, 0x89, 0xdb,
	0x1d, 0x74, 0x1a, 0x7f, 0x10, 0xe0, 0x6a, 0x7f, 0xd1, 0x90, 0xe8, 0x0e, 0x5c, 0x8c, 0x85, 0x15,
	0x4c, 0xe9, 0x50, 0x4c, 0x13, 0x42, 0x66, 0x4c, 0xaf, 0x06, 0x97, 0xb1, 0x39, 0x16, 0x75, 0x14,
	0x97, 0x76, 0x79, 0xf7, 0x55, 0x00, 0x22, 0xc1, 0x78, 0xf0, 0xea, 0x58, 0xb7, 0x9b, 0x14, 0xb3,
	0x44, 0xd6, 0xa4, 0x9f, 0x84, 0x70, 0xb6, 0x12, 0x32, 0x61, 0x71, 0x3e, 0x84, 0x09, 0xe7, 0xbf,
	0xab, 0x4a, 0x77, 0xac, 0xf4, 0x72, 0xf4, 0x30, 0xc9, 0xc7, 0x30, 0xf9, 0x2a, 0x07, 0xe3, 0x55,
	0x44, 0xf2, 0xb6, 0x43, 0x69, 0x46, 0x71, 0x44, 0x38, 0xad, 0xda, 0x6d, 0x87, 0xd1, 0x30, 0x5f,
	0xf8, 0xbf, 0x77, 0x33, 0xa8, 0x6d, 0xc7, 0xd1, 0xd5, 0xb6, 0xd1, 0x36, 0xdf, 0xa1, 0x0e, 0xf3,
	0xa6, 0xdd, 0xcf, 0xd9, 0xbb, 0xe1, 0x81, 0x73, 0x6d, 0x57, 0x31, 0xd6, 0x1d, 0xda, 0xd4, 0x5d,
	0x56, 0x38, 0x51, 0x12, 0xe6, 0x4f, 0xd4, 0x23, 0x6b, 0x64, 0x16, 0xfe, 0xaf, 0xda, 0xf4, 0xee,
	0x5d, 0x5d, 0xd5, 0xa9, 0xe5, 0x6e, 0xd6, 0xaa, 0x85, 0x93, 0x25, 0x61, 0x3e, 0x57, 0xef, 0x5a,
	0xe5, 0x99, 0x6d, 0xb3, 0x65, 0x50, 0x97, 0x36, 0xb1, 0x7e, 0xac, 0x30, 0x5a, 0xca, 0xf3, 0xcc,
	0xdd, 0x1b, 0xa4, 0x02, 0x44, 0xb7, 0x6a, 0x8e, 0xad, 0x39, 0x94, 0xb1, 0xd0, 0xfc, 0x14, 0x37,
	0x8f, 0xd9, 0x91, 0x3e, 0xc0, 0xeb, 0x79, 0xfd, 0x1e, 0x55, 0x77, 0x70, 0xfa, 0x03, 0xa3, 0xfe,
	0x46, 0x2a, 0xa5, 0x6a, 0xd2, 0x67, 0x79, 0xb8, 0x94, 0x12, 0x1e, 0xe7, 0x68, 0xf8, 0xae, 0x94,
	0xe1, 0x6c, 0x58, 0x82, 0xa0, 0xd6, 0x79, 0x5e, 0xeb, 0x9e, 0x75, 0xb2, 0x04, 0x93, 0xbc, 0xfe,
	0x1e, 0x2b, 0xdd, 0x39, 0xb6, 0xf7, 0x7b, 0x13, 0xbb, 0xe7, 0xf9, 0x60, 0x1c, 0xdd, 0xb6, 0x6a,
	0xd4, 0x51, 0xa9, 0xe5, 0x2a, 0x1a, 0xc5, 0x4e, 0xc5, 0xee, 0x79, 0x1d, 0x70, 0xa8, 0xa9, 0xe8,
	0x96, 0x6e, 0x69, 0xc1, 0x75, 0xed, 0x35, 0xcc, 0xcb, 0x12, 0xb3, 0x43, 0x8a, 0x00, 0xde, 0x00,
	0xe1, 0x0c, 0x9c, 0xe2, 0x91, 0x3b, 0x56, 0xc8, 0x1d, 0x18, 0x57, 0x3a, 0x66, 0xb8, 0x70, 0x9a,
	0x5f, 0xb1, 0x33, 0x49, 0x47, 0xac, 0x73, 0xde, 0xf1, 0x64, 0x45, 0xfc, 0xa5, 0x97, 0x61, 0x8a,
	0xb7, 0xe4, 0xcd, 0x96, 0xab, 0x9b, 0xfa, 0x43, 0xba, 0x85, 0x9e, 0xfd, 0x4b, 0xb1, 0x27, 0x02,
	0x3c, 0x93, 0x10, 0x02, 0x3b, 0x9a, 0x19, 0x83, 0xbc, 0x01, 0xff, 0xb3, 0xd1, 0xbb, 0xc9, 0xc5,
	0x4e, 0x6e, 0x30, 0xd5, 0x16, 0xf5, 0xe6, 0x09, 0xdb, 0x9a, 0x46, 0x99, 0x7f, 0x0d, 0xe5, 0xf9,
	0xbc, 0x77, 0x2e, 0x79, 0xa3, 0xe2, 0x3d, 0x9a, 0x8a, 0x77, 0x5a, 0x94, 0x07, 0xba, 0xa5, 0xf9,
	0xad, 0x1f, 0xab, 0xf7, 0xac, 0x2f, 0xfd, 0x38, 0x01, 0x27, 0x39, 0x41, 0xf2, 0x48, 0x80, 0x51,
	0x5f, 0xd1, 0x92, 0x72, 0x12, 0xb4, 0x5e, 0x11, 0x2d, 0x5e, 0xe9, 0xcb, 0xd6, 0x2f, 0x96, 0x34,
	0xfb, 0xc9, 0xcf, 0x7f, 0x7e, 0x91, 0x2b, 0x91, 0xa2, 0x9c, 0xfa, 0x09, 0x41, 0xbe, 0x11, 0x60,
	0x2c, 0x2c, 0x03, 0x59, 0x48, 0x4d, 0x11, 0xa3, 0xb1, 0xc5, 0xc5, 0x01, 0x3c, 0x10, 0xda, 0x0a,
	0x87, 0xb6, 0x44, 0x16, 0xe4, 0xcc, 0x0f, 0x17, 0x79, 0xaf, 0xa3, 0xbd, 0xfb, 0xe4, 0x4b, 0x01,
	0xc6, 0xc3, 0x78, 0x55, 0xc3, 0xc8, 0xc0, 0x1b, 0xa3, 0xb8, 0x33, 0xf0, 0xc6, 0xc9, 0x67, 0xa9,
	0xcc, 0xf1, 0xce, 0x10, 0x29, 0x1b, 0x2f, 0x39, 0x10, 0xe0, 0x7c, 0x8c, 0x28, 0x25, 0x37, 0x52,
	0xd3, 0x26, 0x0b, 0x61, 0x71, 0x65, 0x70, 0x47, 0x84, 0x7d, 0x93, 0xc3, 0x5e, 0x21, 0xcb, 0x7d,
	0x94, 0x19, 0x2f, 0x46, 0xbf, 0xdc, 0xfc, 0x86, 0xdc, 0xf7, 0xa8, 0x4c, 0x74, 0xe9, 0x46, 0xb2,
	0x9c, 0xd5, 0xed, 0x78, 0x09, 0x2c, 0xde, 0x18, 0xd8, 0x0f, 0x49, 0x6c, 0x70, 0x12, 0x37, 0xc9,
	0xaa, 0xdc, 0xe7, 0xb7, 0xab, 0xbc, 0xd7, 0x23, 0xa9, 0xf7, 0xc9, 0xef, 0x02, 0x5c, 0x88, 0x55,
	0x09, 0x64, 0x35, 0x73, 0x7c, 0x53, 0x74, 0xb0, 0xf8, 0xd2, 0x90, 0xde, 0x48, 0xee, 0x36, 0x27,
	0xb7, 0x4e, 0xaa, 0xf2, 0x40, 0x5f, 0xda, 0xf2, 0x5e, 0xb7, 0xc8, 0xde, 0x27, 0x7f, 0x0b, 0x30,
	0x9d, 0x21, 0x3f, 0xc9, 0x7a, 0xfa, 0x28, 0xf5, 0x25, 0x85, 0xc5, 0x8d, 0x7f, 0x17, 0x04, 0x99,
	0xbf, 0xc6, 0x99, 0x6f, 0x90, 0xb5, 0x01, 0x99, 0xc7, 0xcd, 0xe9, 0x6f, 0x02, 0x3c, 0x95, 0x20,
	0x2a, 0xc9, 0x8b, 0x19, 0x0d, 0x4a, 0x13, 0xbd, 0xe2, 0xea, 0x70, 0xce, 0xfd, 0x4e, 0xae, 0x86,
	0x01, 0xba, 0x38, 0xb2, 0x08, 0xb9, 0x5f, 0x04, 0x98, 0x8c, 0x93, 0x39, 0x24, 0xfd, 0x5e, 0x48,
	0x11, 0x5e, 0xe2, 0x0b, 0x43, 0x78, 0x22, 0xa7, 0x4d, 0xce, 0xa9, 0x4a, 0x6e, 0xa5, 0x5d, 0x29,
	0xd4, 0x72, 0xb7, 0x5b, 0xe8, 0xd9, 0xc9, 0x45, 0xde, 0x0b, 0x14, 0xd6, 0x3e, 0xf9, 0x5e, 0x80,
	0xb3, 0xdd, 0xef, 0x79, 0xf2, 0x5c, 0x2a, 0xb0, 0x04, 0x65, 0x21, 0x3e, 0x3f, 0xa0, 0x17, 0x52,
	0x59, 0xe6, 0x54, 0x16, 0x48, 0x25, 0x89, 0x4a, 0x20, 0x05, 0xa2, 0xaf, 0xa0, 0xb5, 0x95, 0x83,
	0xc3, 0xa2, 0xf0, 0xf8, 0xb0, 0x28, 0xfc, 0x71, 0x58, 0x14, 0x3e, 0x3d, 0x2a, 0x8e, 0x3c, 0x3e,
	0x2a, 0x8e, 0xfc, 0x7a, 0x54, 0x1c, 0x79, 0xbf, 0x18, 0x0d, 0xf4, 0xf1, 0x71, 0x28, 0x77, 0xb7,
	0x45, 0x59, 0x63, 0x94, 0xff, 0x40, 0x76, 0xfd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0xe2,
	0x6f, 0x40, 0x83, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// StudyPlan queries a study plan by id
	StudyPlan(ctx context.Context, in *QueryGetStudyPlanRequest, opts ...grpc.CallOption) (*QueryGetStudyPlanResponse, error)
	// StudyPlanAll queries all study plans
	StudyPlanAll(ctx context.Context, in *QueryAllStudyPlanRequest, opts ...grpc.CallOption) (*QueryAllStudyPlanResponse, error)
	// StudyPlansByStudent queries study plans by student id
	StudyPlansByStudent(ctx context.Context, in *QueryStudyPlansByStudentRequest, opts ...grpc.CallOption) (*QueryStudyPlansByStudentResponse, error)
	// PlannedSemester queries a planned semester by id
	PlannedSemester(ctx context.Context, in *QueryGetPlannedSemesterRequest, opts ...grpc.CallOption) (*QueryGetPlannedSemesterResponse, error)
	// SubjectRecommendation queries a subject recommendation by id
	SubjectRecommendation(ctx context.Context, in *QueryGetSubjectRecommendationRequest, opts ...grpc.CallOption) (*QueryGetSubjectRecommendationResponse, error)
	// SubjectRecommendationsByStudent queries subject recommendations by student id
	SubjectRecommendationsByStudent(ctx context.Context, in *QuerySubjectRecommendationsByStudentRequest, opts ...grpc.CallOption) (*QuerySubjectRecommendationsByStudentResponse, error)
	// GenerateRecommendations generates automatic recommendations for a student
	GenerateRecommendations(ctx context.Context, in *QueryGenerateRecommendationsRequest, opts ...grpc.CallOption) (*QueryGenerateRecommendationsResponse, error)
	// CheckStudentProgress checks the academic progress of a student
	CheckStudentProgress(ctx context.Context, in *QueryCheckStudentProgressRequest, opts ...grpc.CallOption) (*QueryCheckStudentProgressResponse, error)
	// OptimizeSchedule optimizes a student's schedule for better graduation path
	OptimizeSchedule(ctx context.Context, in *QueryOptimizeScheduleRequest, opts ...grpc.CallOption) (*QueryOptimizeScheduleResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StudyPlan(ctx context.Context, in *QueryGetStudyPlanRequest, opts ...grpc.CallOption) (*QueryGetStudyPlanResponse, error) {
	out := new(QueryGetStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/StudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StudyPlanAll(ctx context.Context, in *QueryAllStudyPlanRequest, opts ...grpc.CallOption) (*QueryAllStudyPlanResponse, error) {
	out := new(QueryAllStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/StudyPlanAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StudyPlansByStudent(ctx context.Context, in *QueryStudyPlansByStudentRequest, opts ...grpc.CallOption) (*QueryStudyPlansByStudentResponse, error) {
	out := new(QueryStudyPlansByStudentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/StudyPlansByStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlannedSemester(ctx context.Context, in *QueryGetPlannedSemesterRequest, opts ...grpc.CallOption) (*QueryGetPlannedSemesterResponse, error) {
	out := new(QueryGetPlannedSemesterResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/PlannedSemester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectRecommendation(ctx context.Context, in *QueryGetSubjectRecommendationRequest, opts ...grpc.CallOption) (*QueryGetSubjectRecommendationResponse, error) {
	out := new(QueryGetSubjectRecommendationResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/SubjectRecommendation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectRecommendationsByStudent(ctx context.Context, in *QuerySubjectRecommendationsByStudentRequest, opts ...grpc.CallOption) (*QuerySubjectRecommendationsByStudentResponse, error) {
	out := new(QuerySubjectRecommendationsByStudentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/SubjectRecommendationsByStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GenerateRecommendations(ctx context.Context, in *QueryGenerateRecommendationsRequest, opts ...grpc.CallOption) (*QueryGenerateRecommendationsResponse, error) {
	out := new(QueryGenerateRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/GenerateRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckStudentProgress(ctx context.Context, in *QueryCheckStudentProgressRequest, opts ...grpc.CallOption) (*QueryCheckStudentProgressResponse, error) {
	out := new(QueryCheckStudentProgressResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/CheckStudentProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptimizeSchedule(ctx context.Context, in *QueryOptimizeScheduleRequest, opts ...grpc.CallOption) (*QueryOptimizeScheduleResponse, error) {
	out := new(QueryOptimizeScheduleResponse)
	err := c.cc.Invoke(ctx, "/academictoken.schedule.Query/OptimizeSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// StudyPlan queries a study plan by id
	StudyPlan(context.Context, *QueryGetStudyPlanRequest) (*QueryGetStudyPlanResponse, error)
	// StudyPlanAll queries all study plans
	StudyPlanAll(context.Context, *QueryAllStudyPlanRequest) (*QueryAllStudyPlanResponse, error)
	// StudyPlansByStudent queries study plans by student id
	StudyPlansByStudent(context.Context, *QueryStudyPlansByStudentRequest) (*QueryStudyPlansByStudentResponse, error)
	// PlannedSemester queries a planned semester by id
	PlannedSemester(context.Context, *QueryGetPlannedSemesterRequest) (*QueryGetPlannedSemesterResponse, error)
	// SubjectRecommendation queries a subject recommendation by id
	SubjectRecommendation(context.Context, *QueryGetSubjectRecommendationRequest) (*QueryGetSubjectRecommendationResponse, error)
	// SubjectRecommendationsByStudent queries subject recommendations by student id
	SubjectRecommendationsByStudent(context.Context, *QuerySubjectRecommendationsByStudentRequest) (*QuerySubjectRecommendationsByStudentResponse, error)
	// GenerateRecommendations generates automatic recommendations for a student
	GenerateRecommendations(context.Context, *QueryGenerateRecommendationsRequest) (*QueryGenerateRecommendationsResponse, error)
	// CheckStudentProgress checks the academic progress of a student
	CheckStudentProgress(context.Context, *QueryCheckStudentProgressRequest) (*QueryCheckStudentProgressResponse, error)
	// OptimizeSchedule optimizes a student's schedule for better graduation path
	OptimizeSchedule(context.Context, *QueryOptimizeScheduleRequest) (*QueryOptimizeScheduleResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) StudyPlan(ctx context.Context, req *QueryGetStudyPlanRequest) (*QueryGetStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyPlan not implemented")
}
func (*UnimplementedQueryServer) StudyPlanAll(ctx context.Context, req *QueryAllStudyPlanRequest) (*QueryAllStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyPlanAll not implemented")
}
func (*UnimplementedQueryServer) StudyPlansByStudent(ctx context.Context, req *QueryStudyPlansByStudentRequest) (*QueryStudyPlansByStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyPlansByStudent not implemented")
}
func (*UnimplementedQueryServer) PlannedSemester(ctx context.Context, req *QueryGetPlannedSemesterRequest) (*QueryGetPlannedSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlannedSemester not implemented")
}
func (*UnimplementedQueryServer) SubjectRecommendation(ctx context.Context, req *QueryGetSubjectRecommendationRequest) (*QueryGetSubjectRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectRecommendation not implemented")
}
func (*UnimplementedQueryServer) SubjectRecommendationsByStudent(ctx context.Context, req *QuerySubjectRecommendationsByStudentRequest) (*QuerySubjectRecommendationsByStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectRecommendationsByStudent not implemented")
}
func (*UnimplementedQueryServer) GenerateRecommendations(ctx context.Context, req *QueryGenerateRecommendationsRequest) (*QueryGenerateRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRecommendations not implemented")
}
func (*UnimplementedQueryServer) CheckStudentProgress(ctx context.Context, req *QueryCheckStudentProgressRequest) (*QueryCheckStudentProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStudentProgress not implemented")
}
func (*UnimplementedQueryServer) OptimizeSchedule(ctx context.Context, req *QueryOptimizeScheduleRequest) (*QueryOptimizeScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeSchedule not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/StudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StudyPlan(ctx, req.(*QueryGetStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StudyPlanAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StudyPlanAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/StudyPlanAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StudyPlanAll(ctx, req.(*QueryAllStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StudyPlansByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStudyPlansByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StudyPlansByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/StudyPlansByStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StudyPlansByStudent(ctx, req.(*QueryStudyPlansByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlannedSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlannedSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlannedSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/PlannedSemester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlannedSemester(ctx, req.(*QueryGetPlannedSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubjectRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/SubjectRecommendation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectRecommendation(ctx, req.(*QueryGetSubjectRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectRecommendationsByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectRecommendationsByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectRecommendationsByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/SubjectRecommendationsByStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectRecommendationsByStudent(ctx, req.(*QuerySubjectRecommendationsByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GenerateRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGenerateRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GenerateRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/GenerateRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GenerateRecommendations(ctx, req.(*QueryGenerateRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckStudentProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckStudentProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckStudentProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/CheckStudentProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckStudentProgress(ctx, req.(*QueryCheckStudentProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptimizeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOptimizeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptimizeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.schedule.Query/OptimizeSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptimizeSchedule(ctx, req.(*QueryOptimizeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.schedule.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StudyPlan",
			Handler:    _Query_StudyPlan_Handler,
		},
		{
			MethodName: "StudyPlanAll",
			Handler:    _Query_StudyPlanAll_Handler,
		},
		{
			MethodName: "StudyPlansByStudent",
			Handler:    _Query_StudyPlansByStudent_Handler,
		},
		{
			MethodName: "PlannedSemester",
			Handler:    _Query_PlannedSemester_Handler,
		},
		{
			MethodName: "SubjectRecommendation",
			Handler:    _Query_SubjectRecommendation_Handler,
		},
		{
			MethodName: "SubjectRecommendationsByStudent",
			Handler:    _Query_SubjectRecommendationsByStudent_Handler,
		},
		{
			MethodName: "GenerateRecommendations",
			Handler:    _Query_GenerateRecommendations_Handler,
		},
		{
			MethodName: "CheckStudentProgress",
			Handler:    _Query_CheckStudentProgress_Handler,
		},
		{
			MethodName: "OptimizeSchedule",
			Handler:    _Query_OptimizeSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/schedule/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStudyPlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudyPlanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudyPlanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudyPlanId) > 0 {
		i -= len(m.StudyPlanId)
		copy(dAtA[i:], m.StudyPlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudyPlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStudyPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStudyPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStudyPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StudyPlan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStudyPlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStudyPlanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStudyPlanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStudyPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStudyPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStudyPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudyPlan) > 0 {
		for iNdEx := len(m.StudyPlan) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StudyPlan[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStudyPlansByStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStudyPlansByStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStudyPlansByStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStudyPlansByStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStudyPlansByStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStudyPlansByStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudyPlans) > 0 {
		for iNdEx := len(m.StudyPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StudyPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlannedSemesterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlannedSemesterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlannedSemesterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlannedSemesterId) > 0 {
		i -= len(m.PlannedSemesterId)
		copy(dAtA[i:], m.PlannedSemesterId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PlannedSemesterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlannedSemesterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlannedSemesterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlannedSemesterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PlannedSemester.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSubjectRecommendationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubjectRecommendationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubjectRecommendationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecommendationId) > 0 {
		i -= len(m.RecommendationId)
		copy(dAtA[i:], m.RecommendationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RecommendationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSubjectRecommendationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubjectRecommendationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubjectRecommendationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SubjectRecommendation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubjectRecommendationsByStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectRecommendationsByStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectRecommendationsByStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectRecommendationsByStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectRecommendationsByStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectRecommendationsByStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubjectRecommendations) > 0 {
		for iNdEx := len(m.SubjectRecommendations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubjectRecommendations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGenerateRecommendationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGenerateRecommendationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGenerateRecommendationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SemesterCode) > 0 {
		i -= len(m.SemesterCode)
		copy(dAtA[i:], m.SemesterCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SemesterCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGenerateRecommendationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGenerateRecommendationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGenerateRecommendationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SemesterCode) > 0 {
		i -= len(m.SemesterCode)
		copy(dAtA[i:], m.SemesterCode)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SemesterCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Recommendations) > 0 {
		for iNdEx := len(m.Recommendations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Recommendations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AcademicTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcademicTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcademicTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InProgressSubjects) > 0 {
		for iNdEx := len(m.InProgressSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InProgressSubjects[iNdEx])
			copy(dAtA[i:], m.InProgressSubjects[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.InProgressSubjects[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.CompletedSubjects) > 0 {
		for iNdEx := len(m.CompletedSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CompletedSubjects[iNdEx])
			copy(dAtA[i:], m.CompletedSubjects[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.CompletedSubjects[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.CoefficientGPA != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CoefficientGPA))))
		i--
		dAtA[i] = 0x2d
	}
	if m.TotalCredits != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCredits))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CurriculumVersion) > 0 {
		i -= len(m.CurriculumVersion)
		copy(dAtA[i:], m.CurriculumVersion)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurriculumVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckStudentProgressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckStudentProgressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckStudentProgressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckStudentProgressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckStudentProgressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckStudentProgressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AcademicTree.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.CurrentGPA != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CurrentGPA))))
		i--
		dAtA[i] = 0x3d
	}
	if m.RemainingSemesters != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RemainingSemesters))
		i--
		dAtA[i] = 0x30
	}
	if m.CompletionPercentage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CompletionPercentage))))
		i--
		dAtA[i] = 0x2d
	}
	if m.TotalRequiredCredits != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalRequiredCredits))
		i--
		dAtA[i] = 0x20
	}
	if m.CompletedCredits != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CompletedCredits))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOptimizeScheduleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOptimizeScheduleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOptimizeScheduleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudyPlanId) > 0 {
		i -= len(m.StudyPlanId)
		copy(dAtA[i:], m.StudyPlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudyPlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOptimizeScheduleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOptimizeScheduleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOptimizeScheduleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EstimatedSavings) > 0 {
		i -= len(m.EstimatedSavings)
		copy(dAtA[i:], m.EstimatedSavings)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EstimatedSavings)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Suggestions) > 0 {
		for iNdEx := len(m.Suggestions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Suggestions[iNdEx])
			copy(dAtA[i:], m.Suggestions[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Suggestions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.OptimizedPlan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.StudyPlanId) > 0 {
		i -= len(m.StudyPlanId)
		copy(dAtA[i:], m.StudyPlanId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudyPlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStudyPlanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudyPlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStudyPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StudyPlan.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStudyPlanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStudyPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudyPlan) > 0 {
		for _, e := range m.StudyPlan {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStudyPlansByStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStudyPlansByStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudyPlans) > 0 {
		for _, e := range m.StudyPlans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlannedSemesterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PlannedSemesterId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlannedSemesterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PlannedSemester.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSubjectRecommendationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecommendationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubjectRecommendationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SubjectRecommendation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubjectRecommendationsByStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectRecommendationsByStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubjectRecommendations) > 0 {
		for _, e := range m.SubjectRecommendations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGenerateRecommendationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SemesterCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGenerateRecommendationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Recommendations) > 0 {
		for _, e := range m.Recommendations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SemesterCode)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AcademicTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CurriculumVersion)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalCredits != 0 {
		n += 1 + sovQuery(uint64(m.TotalCredits))
	}
	if m.CoefficientGPA != 0 {
		n += 5
	}
	if len(m.CompletedSubjects) > 0 {
		for _, s := range m.CompletedSubjects {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.InProgressSubjects) > 0 {
		for _, s := range m.InProgressSubjects {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCheckStudentProgressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckStudentProgressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CompletedCredits != 0 {
		n += 1 + sovQuery(uint64(m.CompletedCredits))
	}
	if m.TotalRequiredCredits != 0 {
		n += 1 + sovQuery(uint64(m.TotalRequiredCredits))
	}
	if m.CompletionPercentage != 0 {
		n += 5
	}
	if m.RemainingSemesters != 0 {
		n += 1 + sovQuery(uint64(m.RemainingSemesters))
	}
	if m.CurrentGPA != 0 {
		n += 5
	}
	l = m.AcademicTree.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOptimizeScheduleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudyPlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOptimizeScheduleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudyPlanId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.OptimizedPlan.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Suggestions) > 0 {
		for _, s := range m.Suggestions {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.EstimatedSavings)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudyPlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudyPlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudyPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyPlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyPlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStudyPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStudyPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStudyPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StudyPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStudyPlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStudyPlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStudyPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStudyPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStudyPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStudyPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyPlan = append(m.StudyPlan, StudyPlan{})
			if err := m.StudyPlan[len(m.StudyPlan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStudyPlansByStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStudyPlansByStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStudyPlansByStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStudyPlansByStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStudyPlansByStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStudyPlansByStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyPlans = append(m.StudyPlans, StudyPlan{})
			if err := m.StudyPlans[len(m.StudyPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlannedSemesterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlannedSemesterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlannedSemesterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlannedSemesterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlannedSemesterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlannedSemesterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlannedSemesterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlannedSemesterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlannedSemester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PlannedSemester.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubjectRecommendationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubjectRecommendationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubjectRecommendationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubjectRecommendationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubjectRecommendationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubjectRecommendationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectRecommendation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubjectRecommendation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectRecommendationsByStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectRecommendationsByStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectRecommendationsByStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectRecommendationsByStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectRecommendationsByStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectRecommendationsByStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectRecommendations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectRecommendations = append(m.SubjectRecommendations, SubjectRecommendation{})
			if err := m.SubjectRecommendations[len(m.SubjectRecommendations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGenerateRecommendationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGenerateRecommendationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGenerateRecommendationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemesterCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SemesterCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGenerateRecommendationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGenerateRecommendationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGenerateRecommendationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recommendations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recommendations = append(m.Recommendations, SubjectRecommendation{})
			if err := m.Recommendations[len(m.Recommendations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemesterCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SemesterCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcademicTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcademicTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcademicTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurriculumVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurriculumVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			m.TotalCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoefficientGPA", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CoefficientGPA = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletedSubjects = append(m.CompletedSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InProgressSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InProgressSubjects = append(m.InProgressSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckStudentProgressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckStudentProgressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckStudentProgressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckStudentProgressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckStudentProgressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckStudentProgressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedCredits", wireType)
			}
			m.CompletedCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRequiredCredits", wireType)
			}
			m.TotalRequiredCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRequiredCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CompletionPercentage = float32(math.Float32frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingSemesters", wireType)
			}
			m.RemainingSemesters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingSemesters |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentGPA", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CurrentGPA = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcademicTree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AcademicTree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOptimizeScheduleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOptimizeScheduleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOptimizeScheduleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyPlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyPlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOptimizeScheduleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOptimizeScheduleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOptimizeScheduleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyPlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyPlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimizedPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OptimizedPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suggestions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suggestions = append(m.Suggestions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedSavings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EstimatedSavings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
