// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/schedule/recommended_subject.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecommendedSubject struct {
	SubjectId          string `protobuf:"bytes,1,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
	RecommendationRank string `protobuf:"bytes,2,opt,name=recommendationRank,proto3" json:"recommendationRank,omitempty"`
	Reason             string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	IsRequired         string `protobuf:"bytes,4,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	SemesterAlignment  string `protobuf:"bytes,5,opt,name=semesterAlignment,proto3" json:"semesterAlignment,omitempty"`
	DifficultyLevel    string `protobuf:"bytes,6,opt,name=difficultyLevel,proto3" json:"difficultyLevel,omitempty"`
}

func (m *RecommendedSubject) Reset()         { *m = RecommendedSubject{} }
func (m *RecommendedSubject) String() string { return proto.CompactTextString(m) }
func (*RecommendedSubject) ProtoMessage()    {}
func (*RecommendedSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_10f01872c77d7eef, []int{0}
}
func (m *RecommendedSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecommendedSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecommendedSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecommendedSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecommendedSubject.Merge(m, src)
}
func (m *RecommendedSubject) XXX_Size() int {
	return m.Size()
}
func (m *RecommendedSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_RecommendedSubject.DiscardUnknown(m)
}

var xxx_messageInfo_RecommendedSubject proto.InternalMessageInfo

func (m *RecommendedSubject) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *RecommendedSubject) GetRecommendationRank() string {
	if m != nil {
		return m.RecommendationRank
	}
	return ""
}

func (m *RecommendedSubject) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RecommendedSubject) GetIsRequired() string {
	if m != nil {
		return m.IsRequired
	}
	return ""
}

func (m *RecommendedSubject) GetSemesterAlignment() string {
	if m != nil {
		return m.SemesterAlignment
	}
	return ""
}

func (m *RecommendedSubject) GetDifficultyLevel() string {
	if m != nil {
		return m.DifficultyLevel
	}
	return ""
}

func init() {
	proto.RegisterType((*RecommendedSubject)(nil), "academictoken.schedule.RecommendedSubject")
}

func init() {
	proto.RegisterFile("academictoken/schedule/recommended_subject.proto", fileDescriptor_10f01872c77d7eef)
}

var fileDescriptor_10f01872c77d7eef = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0x7e, 0x22, 0xd5, 0x0b, 0xc2, 0x43, 0xe5, 0x01, 0x59, 0x88, 0xa9, 0x03, 0x4a,
	0x91, 0x58, 0x58, 0x61, 0x43, 0x62, 0x0a, 0x1b, 0x0b, 0x4a, 0xed, 0x53, 0x30, 0x8d, 0xed, 0x62,
	0x3b, 0x88, 0xbe, 0x05, 0x8f, 0xc5, 0xd8, 0x91, 0x11, 0x25, 0x6f, 0xc0, 0x13, 0x20, 0x99, 0x42,
	0x28, 0x74, 0xbc, 0xe7, 0x7c, 0x9f, 0xae, 0x74, 0xe8, 0x49, 0x25, 0x2b, 0x05, 0xa3, 0x65, 0x74,
	0x33, 0xd8, 0x71, 0x90, 0xf7, 0x50, 0x4d, 0x8d, 0xb1, 0x87, 0x74, 0xc6, 0xc0, 0x2a, 0xa8, 0xdb,
	0xd0, 0x4c, 0x1e, 0x20, 0x63, 0x31, 0xf7, 0x2e, 0x3a, 0x36, 0x5c, 0x33, 0x8a, 0x6f, 0xe3, 0xe8,
	0x83, 0x50, 0x56, 0xf6, 0xd6, 0xf5, 0x97, 0xc4, 0x0e, 0xe8, 0x60, 0xe5, 0x5f, 0x2a, 0x4e, 0x0e,
	0xc9, 0x68, 0x50, 0xf6, 0x01, 0x2b, 0x28, 0xfb, 0xf9, 0x54, 0x45, 0xed, 0x6c, 0x59, 0xd9, 0x19,
	0xdf, 0x4a, 0xd8, 0x86, 0x86, 0x0d, 0x69, 0xee, 0x51, 0x05, 0x67, 0xf9, 0x76, 0x62, 0x56, 0x17,
	0x13, 0x94, 0xea, 0x50, 0xe2, 0xb1, 0xd1, 0x1e, 0x8a, 0xef, 0xa4, 0xee, 0x57, 0xc2, 0x8e, 0xe9,
	0x7e, 0x80, 0x41, 0x88, 0xf0, 0xe7, 0xb5, 0xbe, 0xb3, 0x06, 0x36, 0xf2, 0xdd, 0x84, 0xfd, 0x2f,
	0xd8, 0x88, 0xee, 0x29, 0x3d, 0x9d, 0x6a, 0xd9, 0xd4, 0x71, 0x71, 0x85, 0x27, 0xd4, 0x3c, 0x4f,
	0xec, 0xdf, 0xf8, 0xe2, 0xec, 0xb5, 0x15, 0x64, 0xd9, 0x0a, 0xf2, 0xde, 0x0a, 0xf2, 0xd2, 0x89,
	0x6c, 0xd9, 0x89, 0xec, 0xad, 0x13, 0xd9, 0x8d, 0x58, 0x1f, 0xf6, 0xb9, 0x9f, 0x36, 0x2e, 0xe6,
	0x08, 0x93, 0x3c, 0xad, 0x79, 0xfa, 0x19, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x56, 0x79, 0x67, 0x81,
	0x01, 0x00, 0x00,
}

func (m *RecommendedSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecommendedSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecommendedSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DifficultyLevel) > 0 {
		i -= len(m.DifficultyLevel)
		copy(dAtA[i:], m.DifficultyLevel)
		i = encodeVarintRecommendedSubject(dAtA, i, uint64(len(m.DifficultyLevel)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SemesterAlignment) > 0 {
		i -= len(m.SemesterAlignment)
		copy(dAtA[i:], m.SemesterAlignment)
		i = encodeVarintRecommendedSubject(dAtA, i, uint64(len(m.SemesterAlignment)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.IsRequired) > 0 {
		i -= len(m.IsRequired)
		copy(dAtA[i:], m.IsRequired)
		i = encodeVarintRecommendedSubject(dAtA, i, uint64(len(m.IsRequired)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintRecommendedSubject(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecommendationRank) > 0 {
		i -= len(m.RecommendationRank)
		copy(dAtA[i:], m.RecommendationRank)
		i = encodeVarintRecommendedSubject(dAtA, i, uint64(len(m.RecommendationRank)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintRecommendedSubject(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecommendedSubject(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecommendedSubject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecommendedSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovRecommendedSubject(uint64(l))
	}
	l = len(m.RecommendationRank)
	if l > 0 {
		n += 1 + l + sovRecommendedSubject(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovRecommendedSubject(uint64(l))
	}
	l = len(m.IsRequired)
	if l > 0 {
		n += 1 + l + sovRecommendedSubject(uint64(l))
	}
	l = len(m.SemesterAlignment)
	if l > 0 {
		n += 1 + l + sovRecommendedSubject(uint64(l))
	}
	l = len(m.DifficultyLevel)
	if l > 0 {
		n += 1 + l + sovRecommendedSubject(uint64(l))
	}
	return n
}

func sovRecommendedSubject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecommendedSubject(x uint64) (n int) {
	return sovRecommendedSubject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecommendedSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecommendedSubject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecommendedSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecommendedSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommendedSubject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendationRank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommendedSubject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendationRank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommendedSubject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRequired", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommendedSubject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IsRequired = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemesterAlignment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommendedSubject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SemesterAlignment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DifficultyLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecommendedSubject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DifficultyLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecommendedSubject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecommendedSubject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecommendedSubject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecommendedSubject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecommendedSubject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecommendedSubject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecommendedSubject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecommendedSubject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecommendedSubject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecommendedSubject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecommendedSubject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecommendedSubject = fmt.Errorf("proto: unexpected end of group")
)
