// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/course/course.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Course struct {
	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Institution  string `protobuf:"bytes,2,opt,name=institution,proto3" json:"institution,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code         string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	Description  string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	TotalCredits string `protobuf:"bytes,6,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	DegreeLevel  string `protobuf:"bytes,7,opt,name=degreeLevel,proto3" json:"degreeLevel,omitempty"`
}

func (m *Course) Reset()         { *m = Course{} }
func (m *Course) String() string { return proto.CompactTextString(m) }
func (*Course) ProtoMessage()    {}
func (*Course) Descriptor() ([]byte, []int) {
	return fileDescriptor_53e20786a77ef5f3, []int{0}
}
func (m *Course) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Course) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Course.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Course) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Course.Merge(m, src)
}
func (m *Course) XXX_Size() int {
	return m.Size()
}
func (m *Course) XXX_DiscardUnknown() {
	xxx_messageInfo_Course.DiscardUnknown(m)
}

var xxx_messageInfo_Course proto.InternalMessageInfo

func (m *Course) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Course) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Course) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Course) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Course) GetTotalCredits() string {
	if m != nil {
		return m.TotalCredits
	}
	return ""
}

func (m *Course) GetDegreeLevel() string {
	if m != nil {
		return m.DegreeLevel
	}
	return ""
}

func init() {
	proto.RegisterType((*Course)(nil), "academictoken.course.Course")
}

func init() { proto.RegisterFile("academictoken/course/course.proto", fileDescriptor_53e20786a77ef5f3) }

var fileDescriptor_53e20786a77ef5f3 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0x85, 0x30,
	0x14, 0x86, 0xa9, 0xde, 0x8b, 0xb1, 0x3a, 0x35, 0x77, 0xe8, 0x60, 0x9a, 0x2b, 0x93, 0x13, 0x0e,
	0x26, 0x3e, 0x80, 0xac, 0x4e, 0x8e, 0x6e, 0xb5, 0x3d, 0x31, 0x8d, 0xd0, 0x92, 0xf6, 0x60, 0xf0,
	0x2d, 0x7c, 0x2c, 0x47, 0x46, 0x47, 0x03, 0x2f, 0x62, 0x68, 0xc5, 0xc0, 0xd4, 0xbf, 0xdf, 0x7f,
	0xf2, 0x0d, 0x3f, 0xbd, 0x96, 0x4a, 0x6a, 0x68, 0x8c, 0x42, 0xf7, 0x06, 0xf6, 0x56, 0xb9, 0xce,
	0x07, 0xf8, 0x7b, 0xca, 0xd6, 0x3b, 0x74, 0xec, 0xb0, 0x39, 0x29, 0x53, 0x57, 0x0c, 0x84, 0xe6,
	0x55, 0x8c, 0xec, 0x40, 0xf7, 0xc6, 0x6a, 0xe8, 0x39, 0x39, 0x92, 0x9b, 0xf3, 0xa7, 0xf4, 0x61,
	0x47, 0x7a, 0x61, 0x6c, 0x40, 0x83, 0x1d, 0x1a, 0x67, 0xf9, 0x49, 0xec, 0xd6, 0x88, 0x31, 0xba,
	0xb3, 0xb2, 0x01, 0x7e, 0x1a, 0xab, 0x98, 0x67, 0xa6, 0x9c, 0x06, 0xbe, 0x4b, 0x6c, 0xce, 0xb3,
	0x49, 0x43, 0x50, 0xde, 0xb4, 0xd1, 0xb4, 0x4f, 0xa6, 0x15, 0x62, 0x05, 0xbd, 0x44, 0x87, 0xb2,
	0xae, 0x3c, 0x68, 0x83, 0x81, 0xe7, 0xf1, 0x64, 0xc3, 0x92, 0xe5, 0xd5, 0x03, 0x3c, 0xc2, 0x3b,
	0xd4, 0xfc, 0x6c, 0xb1, 0xfc, 0xa3, 0x87, 0xfb, 0xaf, 0x51, 0x90, 0x61, 0x14, 0xe4, 0x67, 0x14,
	0xe4, 0x73, 0x12, 0xd9, 0x30, 0x89, 0xec, 0x7b, 0x12, 0xd9, 0xf3, 0xd5, 0x76, 0xa5, 0x7e, 0xd9,
	0x09, 0x3f, 0x5a, 0x08, 0x2f, 0x79, 0xdc, 0xe9, 0xee, 0x37, 0x00, 0x00, 0xff, 0xff, 0xda, 0xa0,
	0xbb, 0x29, 0x4c, 0x01, 0x00, 0x00,
}

func (m *Course) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Course) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Course) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DegreeLevel) > 0 {
		i -= len(m.DegreeLevel)
		copy(dAtA[i:], m.DegreeLevel)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.DegreeLevel)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TotalCredits) > 0 {
		i -= len(m.TotalCredits)
		copy(dAtA[i:], m.TotalCredits)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.TotalCredits)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCourse(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCourse(dAtA []byte, offset int, v uint64) int {
	offset -= sovCourse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Course) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.TotalCredits)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	l = len(m.DegreeLevel)
	if l > 0 {
		n += 1 + l + sovCourse(uint64(l))
	}
	return n
}

func sovCourse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCourse(x uint64) (n int) {
	return sovCourse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Course) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Course: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Course: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCredits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeLevel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeLevel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCourse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCourse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCourse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCourse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCourse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCourse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCourse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCourse = fmt.Errorf("proto: unexpected end of group")
)
