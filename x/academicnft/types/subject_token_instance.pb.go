// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/academicnft/subject_token_instance.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubjectTokenInstance struct {
	Index              string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	TokenDefId         string `protobuf:"bytes,2,opt,name=tokenDefId,proto3" json:"tokenDefId,omitempty"`
	Student            string `protobuf:"bytes,3,opt,name=student,proto3" json:"student,omitempty"`
	CompletionDate     string `protobuf:"bytes,4,opt,name=completionDate,proto3" json:"completionDate,omitempty"`
	Grade              string `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	IssuerInstitution  string `protobuf:"bytes,6,opt,name=issuerInstitution,proto3" json:"issuerInstitution,omitempty"`
	Semester           string `protobuf:"bytes,7,opt,name=semester,proto3" json:"semester,omitempty"`
	ProfessorSignature string `protobuf:"bytes,8,opt,name=professorSignature,proto3" json:"professorSignature,omitempty"`
}

func (m *SubjectTokenInstance) Reset()         { *m = SubjectTokenInstance{} }
func (m *SubjectTokenInstance) String() string { return proto.CompactTextString(m) }
func (*SubjectTokenInstance) ProtoMessage()    {}
func (*SubjectTokenInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_6eac3c17f4fc0a72, []int{0}
}
func (m *SubjectTokenInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectTokenInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubjectTokenInstance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubjectTokenInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectTokenInstance.Merge(m, src)
}
func (m *SubjectTokenInstance) XXX_Size() int {
	return m.Size()
}
func (m *SubjectTokenInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectTokenInstance.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectTokenInstance proto.InternalMessageInfo

func (m *SubjectTokenInstance) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *SubjectTokenInstance) GetTokenDefId() string {
	if m != nil {
		return m.TokenDefId
	}
	return ""
}

func (m *SubjectTokenInstance) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *SubjectTokenInstance) GetCompletionDate() string {
	if m != nil {
		return m.CompletionDate
	}
	return ""
}

func (m *SubjectTokenInstance) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *SubjectTokenInstance) GetIssuerInstitution() string {
	if m != nil {
		return m.IssuerInstitution
	}
	return ""
}

func (m *SubjectTokenInstance) GetSemester() string {
	if m != nil {
		return m.Semester
	}
	return ""
}

func (m *SubjectTokenInstance) GetProfessorSignature() string {
	if m != nil {
		return m.ProfessorSignature
	}
	return ""
}

func init() {
	proto.RegisterType((*SubjectTokenInstance)(nil), "academictoken.academicnft.SubjectTokenInstance")
}

func init() {
	proto.RegisterFile("academictoken/academicnft/subject_token_instance.proto", fileDescriptor_6eac3c17f4fc0a72)
}

var fileDescriptor_6eac3c17f4fc0a72 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0x93, 0x7e, 0x5f, 0x7f, 0xf0, 0x80, 0x84, 0xd5, 0xc1, 0x30, 0x58, 0xc0, 0x80, 0x18,
	0x50, 0x3a, 0x20, 0xb1, 0xb0, 0xa1, 0x2e, 0x5d, 0x29, 0x13, 0x4b, 0xe5, 0x26, 0x27, 0x95, 0x81,
	0xd8, 0x91, 0x7d, 0x2c, 0x95, 0xbb, 0xe0, 0x0a, 0xb8, 0x1e, 0xc6, 0x8e, 0x8c, 0x28, 0xb9, 0x11,
	0x94, 0x13, 0x8a, 0x1a, 0x60, 0x7c, 0xcf, 0xf3, 0xbc, 0x39, 0x91, 0x0f, 0xbb, 0x52, 0xa9, 0xca,
	0xa0, 0xd0, 0x29, 0xda, 0x47, 0x30, 0x93, 0x6d, 0x32, 0x39, 0x4e, 0x7c, 0x58, 0x3e, 0x40, 0x8a,
	0x0b, 0x22, 0x0b, 0x6d, 0x3c, 0x2a, 0x93, 0x42, 0x52, 0x3a, 0x8b, 0x96, 0x1f, 0x76, 0x7a, 0xc9,
	0x4e, 0xef, 0xf4, 0xb5, 0xc7, 0xc6, 0xf3, 0xb6, 0x7b, 0xd7, 0xc0, 0xd9, 0x57, 0x93, 0x8f, 0x59,
	0x5f, 0x9b, 0x0c, 0xd6, 0x22, 0x3e, 0x8e, 0xcf, 0xf7, 0x6e, 0xdb, 0xc0, 0x25, 0x63, 0xf4, 0x8d,
	0x29, 0xe4, 0xb3, 0x4c, 0xf4, 0x08, 0xed, 0x4c, 0xb8, 0x60, 0x43, 0x8f, 0x21, 0x03, 0x83, 0xe2,
	0x1f, 0xc1, 0x6d, 0xe4, 0x67, 0x6c, 0x3f, 0xb5, 0x45, 0xf9, 0x04, 0xa8, 0xad, 0x99, 0x2a, 0x04,
	0xf1, 0x9f, 0x84, 0x1f, 0xd3, 0x66, 0xef, 0xca, 0xa9, 0x0c, 0x44, 0xbf, 0xdd, 0x4b, 0x81, 0x5f,
	0xb0, 0x03, 0xed, 0x7d, 0x00, 0xd7, 0xfc, 0x9f, 0xc6, 0xd0, 0xe8, 0x62, 0x40, 0xc6, 0x6f, 0xc0,
	0x8f, 0xd8, 0xc8, 0x43, 0x01, 0x1e, 0xc1, 0x89, 0x21, 0x49, 0xdf, 0x99, 0x27, 0x8c, 0x97, 0xce,
	0xe6, 0xe0, 0xbd, 0x75, 0x73, 0xbd, 0x32, 0x0a, 0x83, 0x03, 0x31, 0x22, 0xeb, 0x0f, 0x72, 0x73,
	0xfd, 0x56, 0xc9, 0x78, 0x53, 0xc9, 0xf8, 0xa3, 0x92, 0xf1, 0x4b, 0x2d, 0xa3, 0x4d, 0x2d, 0xa3,
	0xf7, 0x5a, 0x46, 0xf7, 0x27, 0xdd, 0x6b, 0xac, 0x3b, 0xf7, 0xc0, 0xe7, 0x12, 0xfc, 0x72, 0x40,
	0xef, 0x7f, 0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0x21, 0x51, 0x28, 0x9a, 0xb9, 0x01, 0x00, 0x00,
}

func (m *SubjectTokenInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectTokenInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectTokenInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProfessorSignature) > 0 {
		i -= len(m.ProfessorSignature)
		copy(dAtA[i:], m.ProfessorSignature)
		i = encodeVarintSubjectTokenInstance(dAtA, i, uint64(len(m.ProfessorSignature)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Semester) > 0 {
		i -= len(m.Semester)
		copy(dAtA[i:], m.Semester)
		i = encodeVarintSubjectTokenInstance(dAtA, i, uint64(len(m.Semester)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IssuerInstitution) > 0 {
		i -= len(m.IssuerInstitution)
		copy(dAtA[i:], m.IssuerInstitution)
		i = encodeVarintSubjectTokenInstance(dAtA, i, uint64(len(m.IssuerInstitution)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintSubjectTokenInstance(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CompletionDate) > 0 {
		i -= len(m.CompletionDate)
		copy(dAtA[i:], m.CompletionDate)
		i = encodeVarintSubjectTokenInstance(dAtA, i, uint64(len(m.CompletionDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintSubjectTokenInstance(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenDefId) > 0 {
		i -= len(m.TokenDefId)
		copy(dAtA[i:], m.TokenDefId)
		i = encodeVarintSubjectTokenInstance(dAtA, i, uint64(len(m.TokenDefId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSubjectTokenInstance(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubjectTokenInstance(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubjectTokenInstance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubjectTokenInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSubjectTokenInstance(uint64(l))
	}
	l = len(m.TokenDefId)
	if l > 0 {
		n += 1 + l + sovSubjectTokenInstance(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovSubjectTokenInstance(uint64(l))
	}
	l = len(m.CompletionDate)
	if l > 0 {
		n += 1 + l + sovSubjectTokenInstance(uint64(l))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovSubjectTokenInstance(uint64(l))
	}
	l = len(m.IssuerInstitution)
	if l > 0 {
		n += 1 + l + sovSubjectTokenInstance(uint64(l))
	}
	l = len(m.Semester)
	if l > 0 {
		n += 1 + l + sovSubjectTokenInstance(uint64(l))
	}
	l = len(m.ProfessorSignature)
	if l > 0 {
		n += 1 + l + sovSubjectTokenInstance(uint64(l))
	}
	return n
}

func sovSubjectTokenInstance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubjectTokenInstance(x uint64) (n int) {
	return sovSubjectTokenInstance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubjectTokenInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubjectTokenInstance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectTokenInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectTokenInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompletionDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerInstitution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerInstitution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Semester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Semester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfessorSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfessorSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubjectTokenInstance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubjectTokenInstance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubjectTokenInstance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubjectTokenInstance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubjectTokenInstance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubjectTokenInstance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubjectTokenInstance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubjectTokenInstance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubjectTokenInstance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubjectTokenInstance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubjectTokenInstance = fmt.Errorf("proto: unexpected end of group")
)
