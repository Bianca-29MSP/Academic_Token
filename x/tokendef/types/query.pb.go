// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/tokendef/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetTokenDefinitionRequest is request type for GetTokenDefinition query
type QueryGetTokenDefinitionRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTokenDefinitionRequest) Reset()         { *m = QueryGetTokenDefinitionRequest{} }
func (m *QueryGetTokenDefinitionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenDefinitionRequest) ProtoMessage()    {}
func (*QueryGetTokenDefinitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{2}
}
func (m *QueryGetTokenDefinitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenDefinitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenDefinitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenDefinitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenDefinitionRequest.Merge(m, src)
}
func (m *QueryGetTokenDefinitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenDefinitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenDefinitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenDefinitionRequest proto.InternalMessageInfo

func (m *QueryGetTokenDefinitionRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetTokenDefinitionResponse is response type for GetTokenDefinition query
type QueryGetTokenDefinitionResponse struct {
	TokenDefinition *TokenDefinition `protobuf:"bytes,1,opt,name=tokenDefinition,proto3" json:"tokenDefinition,omitempty"`
}

func (m *QueryGetTokenDefinitionResponse) Reset()         { *m = QueryGetTokenDefinitionResponse{} }
func (m *QueryGetTokenDefinitionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenDefinitionResponse) ProtoMessage()    {}
func (*QueryGetTokenDefinitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{3}
}
func (m *QueryGetTokenDefinitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenDefinitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenDefinitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenDefinitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenDefinitionResponse.Merge(m, src)
}
func (m *QueryGetTokenDefinitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenDefinitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenDefinitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenDefinitionResponse proto.InternalMessageInfo

func (m *QueryGetTokenDefinitionResponse) GetTokenDefinition() *TokenDefinition {
	if m != nil {
		return m.TokenDefinition
	}
	return nil
}

// QueryGetTokenDefinitionFullRequest is request type for GetTokenDefinitionFull query
type QueryGetTokenDefinitionFullRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTokenDefinitionFullRequest) Reset()         { *m = QueryGetTokenDefinitionFullRequest{} }
func (m *QueryGetTokenDefinitionFullRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenDefinitionFullRequest) ProtoMessage()    {}
func (*QueryGetTokenDefinitionFullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{4}
}
func (m *QueryGetTokenDefinitionFullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenDefinitionFullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenDefinitionFullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenDefinitionFullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenDefinitionFullRequest.Merge(m, src)
}
func (m *QueryGetTokenDefinitionFullRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenDefinitionFullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenDefinitionFullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenDefinitionFullRequest proto.InternalMessageInfo

func (m *QueryGetTokenDefinitionFullRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetTokenDefinitionFullResponse is response type for GetTokenDefinitionFull query
type QueryGetTokenDefinitionFullResponse struct {
	TokenDefinition *TokenDefinition `protobuf:"bytes,1,opt,name=tokenDefinition,proto3" json:"tokenDefinition,omitempty"`
	ExtendedContent string           `protobuf:"bytes,2,opt,name=extendedContent,proto3" json:"extendedContent,omitempty"`
}

func (m *QueryGetTokenDefinitionFullResponse) Reset()         { *m = QueryGetTokenDefinitionFullResponse{} }
func (m *QueryGetTokenDefinitionFullResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenDefinitionFullResponse) ProtoMessage()    {}
func (*QueryGetTokenDefinitionFullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{5}
}
func (m *QueryGetTokenDefinitionFullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenDefinitionFullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenDefinitionFullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenDefinitionFullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenDefinitionFullResponse.Merge(m, src)
}
func (m *QueryGetTokenDefinitionFullResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenDefinitionFullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenDefinitionFullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenDefinitionFullResponse proto.InternalMessageInfo

func (m *QueryGetTokenDefinitionFullResponse) GetTokenDefinition() *TokenDefinition {
	if m != nil {
		return m.TokenDefinition
	}
	return nil
}

func (m *QueryGetTokenDefinitionFullResponse) GetExtendedContent() string {
	if m != nil {
		return m.ExtendedContent
	}
	return ""
}

// QueryListTokenDefinitionsRequest is request type for ListTokenDefinitions query
type QueryListTokenDefinitionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListTokenDefinitionsRequest) Reset()         { *m = QueryListTokenDefinitionsRequest{} }
func (m *QueryListTokenDefinitionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListTokenDefinitionsRequest) ProtoMessage()    {}
func (*QueryListTokenDefinitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{6}
}
func (m *QueryListTokenDefinitionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTokenDefinitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTokenDefinitionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTokenDefinitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTokenDefinitionsRequest.Merge(m, src)
}
func (m *QueryListTokenDefinitionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTokenDefinitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTokenDefinitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTokenDefinitionsRequest proto.InternalMessageInfo

func (m *QueryListTokenDefinitionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListTokenDefinitionsResponse is response type for ListTokenDefinitions query
type QueryListTokenDefinitionsResponse struct {
	TokenDefinitions []*TokenDefinition  `protobuf:"bytes,1,rep,name=tokenDefinitions,proto3" json:"tokenDefinitions,omitempty"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListTokenDefinitionsResponse) Reset()         { *m = QueryListTokenDefinitionsResponse{} }
func (m *QueryListTokenDefinitionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListTokenDefinitionsResponse) ProtoMessage()    {}
func (*QueryListTokenDefinitionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{7}
}
func (m *QueryListTokenDefinitionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTokenDefinitionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTokenDefinitionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTokenDefinitionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTokenDefinitionsResponse.Merge(m, src)
}
func (m *QueryListTokenDefinitionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTokenDefinitionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTokenDefinitionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTokenDefinitionsResponse proto.InternalMessageInfo

func (m *QueryListTokenDefinitionsResponse) GetTokenDefinitions() []*TokenDefinition {
	if m != nil {
		return m.TokenDefinitions
	}
	return nil
}

func (m *QueryListTokenDefinitionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListTokenDefinitionsBySubjectRequest is request type for ListTokenDefinitionsBySubject query
type QueryListTokenDefinitionsBySubjectRequest struct {
	SubjectId  string             `protobuf:"bytes,1,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListTokenDefinitionsBySubjectRequest) Reset() {
	*m = QueryListTokenDefinitionsBySubjectRequest{}
}
func (m *QueryListTokenDefinitionsBySubjectRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryListTokenDefinitionsBySubjectRequest) ProtoMessage() {}
func (*QueryListTokenDefinitionsBySubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{8}
}
func (m *QueryListTokenDefinitionsBySubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTokenDefinitionsBySubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTokenDefinitionsBySubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTokenDefinitionsBySubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTokenDefinitionsBySubjectRequest.Merge(m, src)
}
func (m *QueryListTokenDefinitionsBySubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTokenDefinitionsBySubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTokenDefinitionsBySubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTokenDefinitionsBySubjectRequest proto.InternalMessageInfo

func (m *QueryListTokenDefinitionsBySubjectRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *QueryListTokenDefinitionsBySubjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListTokenDefinitionsBySubjectResponse is response type for ListTokenDefinitionsBySubject query
type QueryListTokenDefinitionsBySubjectResponse struct {
	TokenDefinitions []*TokenDefinition  `protobuf:"bytes,1,rep,name=tokenDefinitions,proto3" json:"tokenDefinitions,omitempty"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListTokenDefinitionsBySubjectResponse) Reset() {
	*m = QueryListTokenDefinitionsBySubjectResponse{}
}
func (m *QueryListTokenDefinitionsBySubjectResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryListTokenDefinitionsBySubjectResponse) ProtoMessage() {}
func (*QueryListTokenDefinitionsBySubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f58b4bc20646728, []int{9}
}
func (m *QueryListTokenDefinitionsBySubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListTokenDefinitionsBySubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListTokenDefinitionsBySubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListTokenDefinitionsBySubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListTokenDefinitionsBySubjectResponse.Merge(m, src)
}
func (m *QueryListTokenDefinitionsBySubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListTokenDefinitionsBySubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListTokenDefinitionsBySubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListTokenDefinitionsBySubjectResponse proto.InternalMessageInfo

func (m *QueryListTokenDefinitionsBySubjectResponse) GetTokenDefinitions() []*TokenDefinition {
	if m != nil {
		return m.TokenDefinitions
	}
	return nil
}

func (m *QueryListTokenDefinitionsBySubjectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "academictoken.tokendef.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "academictoken.tokendef.QueryParamsResponse")
	proto.RegisterType((*QueryGetTokenDefinitionRequest)(nil), "academictoken.tokendef.QueryGetTokenDefinitionRequest")
	proto.RegisterType((*QueryGetTokenDefinitionResponse)(nil), "academictoken.tokendef.QueryGetTokenDefinitionResponse")
	proto.RegisterType((*QueryGetTokenDefinitionFullRequest)(nil), "academictoken.tokendef.QueryGetTokenDefinitionFullRequest")
	proto.RegisterType((*QueryGetTokenDefinitionFullResponse)(nil), "academictoken.tokendef.QueryGetTokenDefinitionFullResponse")
	proto.RegisterType((*QueryListTokenDefinitionsRequest)(nil), "academictoken.tokendef.QueryListTokenDefinitionsRequest")
	proto.RegisterType((*QueryListTokenDefinitionsResponse)(nil), "academictoken.tokendef.QueryListTokenDefinitionsResponse")
	proto.RegisterType((*QueryListTokenDefinitionsBySubjectRequest)(nil), "academictoken.tokendef.QueryListTokenDefinitionsBySubjectRequest")
	proto.RegisterType((*QueryListTokenDefinitionsBySubjectResponse)(nil), "academictoken.tokendef.QueryListTokenDefinitionsBySubjectResponse")
}

func init() {
	proto.RegisterFile("academictoken/tokendef/query.proto", fileDescriptor_9f58b4bc20646728)
}

var fileDescriptor_9f58b4bc20646728 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0x44, 0x5a, 0xe9, 0xf3, 0x50, 0x1d, 0x43, 0x29, 0x4b, 0xdd, 0xd6, 0x2d, 0xfd, 0x61,
	0xd4, 0x1d, 0x1a, 0xa5, 0xd6, 0x7a, 0x6a, 0x94, 0x16, 0xc1, 0x43, 0x9b, 0x7a, 0x10, 0x6f, 0x93,
	0x64, 0xba, 0x6c, 0x6d, 0x76, 0xb6, 0xdd, 0x89, 0xb4, 0x94, 0x5e, 0xbc, 0x79, 0x53, 0xfc, 0x0f,
	0x3c, 0x79, 0x11, 0x04, 0xfd, 0x07, 0x3c, 0x08, 0xc5, 0x53, 0xc1, 0x8b, 0x27, 0x91, 0x44, 0xf0,
	0xdf, 0x90, 0x9d, 0x99, 0xd8, 0xec, 0x26, 0xbb, 0x26, 0x11, 0x0f, 0x5e, 0x96, 0xc9, 0xec, 0xf7,
	0xbd, 0xf7, 0x7d, 0x8f, 0xb7, 0x1f, 0x01, 0x8b, 0x56, 0x68, 0x95, 0xd5, 0xdc, 0x8a, 0xe0, 0x4f,
	0x98, 0x47, 0xe4, 0xb3, 0xca, 0xb6, 0xc8, 0x6e, 0x9d, 0xed, 0x1d, 0xd8, 0xfe, 0x1e, 0x17, 0x1c,
	0x8f, 0x45, 0x30, 0x76, 0x0b, 0x63, 0x5c, 0xa0, 0x35, 0xd7, 0xe3, 0x44, 0x3e, 0x15, 0xd4, 0xc8,
	0x39, 0xdc, 0xe1, 0xf2, 0x48, 0xc2, 0x93, 0xbe, 0x9d, 0x70, 0x38, 0x77, 0x76, 0x18, 0xa1, 0xbe,
	0x4b, 0xa8, 0xe7, 0x71, 0x41, 0x85, 0xcb, 0xbd, 0x40, 0xbf, 0xcd, 0x57, 0x78, 0x50, 0xe3, 0x01,
	0x29, 0xd3, 0x80, 0xa9, 0xbe, 0xe4, 0xe9, 0x42, 0x99, 0x09, 0xba, 0x40, 0x7c, 0xea, 0xb8, 0x9e,
	0x04, 0x6b, 0xec, 0x74, 0x82, 0x5c, 0x9f, 0xee, 0xd1, 0x5a, 0xab, 0xe0, 0x4c, 0x02, 0xa8, 0x75,
	0x50, 0x30, 0x2b, 0x07, 0x78, 0x23, 0xec, 0xb6, 0x2e, 0xb9, 0x25, 0xb6, 0x5b, 0x67, 0x81, 0xb0,
	0x1e, 0xc1, 0xc5, 0xc8, 0x6d, 0xe0, 0x73, 0x2f, 0x60, 0x78, 0x05, 0x86, 0x55, 0x8f, 0x71, 0x34,
	0x85, 0xe6, 0xcf, 0x15, 0x4c, 0xbb, 0xfb, 0x50, 0x6c, 0xc5, 0x2b, 0x8e, 0x1c, 0x7f, 0x9b, 0xcc,
	0xbc, 0xf9, 0xf9, 0x2e, 0x8f, 0x4a, 0x9a, 0x68, 0x2d, 0x82, 0x29, 0x2b, 0xaf, 0x31, 0xf1, 0x30,
	0x44, 0xdf, 0x63, 0x5b, 0xae, 0xe7, 0x86, 0xe6, 0x74, 0x6f, 0x9c, 0x83, 0x21, 0xd7, 0xab, 0xb2,
	0x7d, 0xd9, 0x63, 0xa4, 0xa4, 0x7e, 0x58, 0x02, 0x26, 0x13, 0x79, 0x5a, 0xdd, 0x06, 0x8c, 0x8a,
	0xe8, 0x2b, 0x2d, 0x73, 0x2e, 0x49, 0x66, 0xbc, 0x52, 0x9c, 0x6f, 0x2d, 0x83, 0x95, 0xd0, 0x75,
	0xb5, 0xbe, 0xb3, 0x93, 0xae, 0xf8, 0x35, 0x82, 0xe9, 0x54, 0xf2, 0x3f, 0x93, 0x8d, 0xe7, 0x61,
	0x94, 0xed, 0x8b, 0x10, 0x5c, 0xbd, 0xcb, 0x3d, 0xc1, 0x3c, 0x31, 0x9e, 0x95, 0xd2, 0xe2, 0xd7,
	0xd6, 0x36, 0x4c, 0x49, 0x8d, 0x0f, 0xdc, 0x20, 0x2e, 0xb2, 0xb5, 0x0c, 0x78, 0x15, 0xe0, 0x74,
	0x05, 0xb5, 0xb6, 0x59, 0x5b, 0xed, 0xab, 0x1d, 0xee, 0xab, 0xad, 0xbe, 0x13, 0xbd, 0xaf, 0xf6,
	0x3a, 0x75, 0x98, 0xe6, 0x96, 0xda, 0x98, 0xd6, 0x47, 0x04, 0x97, 0x53, 0x9a, 0xe9, 0x71, 0x6c,
	0xc2, 0xf9, 0x98, 0x9d, 0x70, 0xdb, 0xce, 0xf4, 0x33, 0x8f, 0x8e, 0x02, 0x78, 0x2d, 0x62, 0x21,
	0xab, 0xc7, 0xfb, 0x27, 0x0b, 0x4a, 0x51, 0xc4, 0xc3, 0x4b, 0x04, 0x57, 0x12, 0x3d, 0x14, 0x0f,
	0x36, 0xeb, 0xe5, 0x6d, 0x56, 0x11, 0xad, 0xc9, 0x4d, 0xc0, 0x48, 0xa0, 0x6e, 0xee, 0x57, 0xf5,
	0x72, 0x9c, 0x5e, 0xc4, 0xe6, 0x9a, 0x1d, 0x78, 0xae, 0x9f, 0x11, 0xe4, 0x7b, 0xd1, 0xf4, 0x3f,
	0x0c, 0xb8, 0xf0, 0xf6, 0x2c, 0x0c, 0x49, 0x33, 0xf8, 0x39, 0x82, 0x61, 0x95, 0x23, 0x38, 0x9f,
	0x24, 0xac, 0x33, 0xba, 0x8c, 0xab, 0x3d, 0x61, 0x55, 0x67, 0x6b, 0xf6, 0xd9, 0x97, 0x1f, 0xaf,
	0xb2, 0x53, 0xd8, 0x24, 0xa9, 0x91, 0x8a, 0x3f, 0x20, 0xc0, 0x9d, 0x9f, 0x31, 0x5e, 0x4c, 0xed,
	0x95, 0x18, 0x71, 0xc6, 0xad, 0xbe, 0x79, 0x5a, 0xef, 0x75, 0xa9, 0x77, 0x0e, 0xcf, 0x90, 0xb4,
	0x74, 0x27, 0x87, 0x32, 0x81, 0x8e, 0xf0, 0x27, 0x04, 0x63, 0xdd, 0xd3, 0x07, 0x2f, 0xf7, 0x29,
	0xa1, 0x2d, 0xef, 0x8c, 0x3b, 0x03, 0x71, 0xb5, 0x85, 0x82, 0xb4, 0x70, 0x0d, 0xe7, 0x7b, 0xb2,
	0x40, 0xb6, 0x42, 0xb1, 0xef, 0x11, 0xe4, 0xba, 0x2d, 0x37, 0x5e, 0x4a, 0x55, 0x92, 0x12, 0x6a,
	0xc6, 0xed, 0x01, 0x98, 0xbd, 0x2e, 0x8d, 0x3c, 0x04, 0xb8, 0x81, 0xe0, 0x52, 0xea, 0x27, 0x89,
	0x57, 0xfa, 0x16, 0x11, 0x8f, 0x18, 0xa3, 0xf8, 0x37, 0x25, 0xb4, 0xa1, 0x65, 0x69, 0xe8, 0x26,
	0x2e, 0xa4, 0x1b, 0x22, 0x3a, 0xba, 0xc8, 0xe1, 0xef, 0x0c, 0x3b, 0x2a, 0x2e, 0x1d, 0x37, 0x4c,
	0x74, 0xd2, 0x30, 0xd1, 0xf7, 0x86, 0x89, 0x5e, 0x34, 0xcd, 0xcc, 0x49, 0xd3, 0xcc, 0x7c, 0x6d,
	0x9a, 0x99, 0xc7, 0x66, 0xb4, 0xd8, 0x7e, 0x5b, 0xb9, 0x03, 0x9f, 0x05, 0xe5, 0x61, 0xf9, 0x07,
	0xe4, 0xc6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x21, 0x71, 0xc9, 0x7d, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetTokenDefinition queries a token definition by index
	GetTokenDefinition(ctx context.Context, in *QueryGetTokenDefinitionRequest, opts ...grpc.CallOption) (*QueryGetTokenDefinitionResponse, error)
	// GetTokenDefinitionFull queries a token definition with full content (including IPFS data)
	GetTokenDefinitionFull(ctx context.Context, in *QueryGetTokenDefinitionFullRequest, opts ...grpc.CallOption) (*QueryGetTokenDefinitionFullResponse, error)
	// ListTokenDefinitions queries all token definitions with pagination
	ListTokenDefinitions(ctx context.Context, in *QueryListTokenDefinitionsRequest, opts ...grpc.CallOption) (*QueryListTokenDefinitionsResponse, error)
	// ListTokenDefinitionsBySubject queries token definitions by subject
	ListTokenDefinitionsBySubject(ctx context.Context, in *QueryListTokenDefinitionsBySubjectRequest, opts ...grpc.CallOption) (*QueryListTokenDefinitionsBySubjectResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.tokendef.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTokenDefinition(ctx context.Context, in *QueryGetTokenDefinitionRequest, opts ...grpc.CallOption) (*QueryGetTokenDefinitionResponse, error) {
	out := new(QueryGetTokenDefinitionResponse)
	err := c.cc.Invoke(ctx, "/academictoken.tokendef.Query/GetTokenDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTokenDefinitionFull(ctx context.Context, in *QueryGetTokenDefinitionFullRequest, opts ...grpc.CallOption) (*QueryGetTokenDefinitionFullResponse, error) {
	out := new(QueryGetTokenDefinitionFullResponse)
	err := c.cc.Invoke(ctx, "/academictoken.tokendef.Query/GetTokenDefinitionFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListTokenDefinitions(ctx context.Context, in *QueryListTokenDefinitionsRequest, opts ...grpc.CallOption) (*QueryListTokenDefinitionsResponse, error) {
	out := new(QueryListTokenDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.tokendef.Query/ListTokenDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListTokenDefinitionsBySubject(ctx context.Context, in *QueryListTokenDefinitionsBySubjectRequest, opts ...grpc.CallOption) (*QueryListTokenDefinitionsBySubjectResponse, error) {
	out := new(QueryListTokenDefinitionsBySubjectResponse)
	err := c.cc.Invoke(ctx, "/academictoken.tokendef.Query/ListTokenDefinitionsBySubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetTokenDefinition queries a token definition by index
	GetTokenDefinition(context.Context, *QueryGetTokenDefinitionRequest) (*QueryGetTokenDefinitionResponse, error)
	// GetTokenDefinitionFull queries a token definition with full content (including IPFS data)
	GetTokenDefinitionFull(context.Context, *QueryGetTokenDefinitionFullRequest) (*QueryGetTokenDefinitionFullResponse, error)
	// ListTokenDefinitions queries all token definitions with pagination
	ListTokenDefinitions(context.Context, *QueryListTokenDefinitionsRequest) (*QueryListTokenDefinitionsResponse, error)
	// ListTokenDefinitionsBySubject queries token definitions by subject
	ListTokenDefinitionsBySubject(context.Context, *QueryListTokenDefinitionsBySubjectRequest) (*QueryListTokenDefinitionsBySubjectResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetTokenDefinition(ctx context.Context, req *QueryGetTokenDefinitionRequest) (*QueryGetTokenDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenDefinition not implemented")
}
func (*UnimplementedQueryServer) GetTokenDefinitionFull(ctx context.Context, req *QueryGetTokenDefinitionFullRequest) (*QueryGetTokenDefinitionFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenDefinitionFull not implemented")
}
func (*UnimplementedQueryServer) ListTokenDefinitions(ctx context.Context, req *QueryListTokenDefinitionsRequest) (*QueryListTokenDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokenDefinitions not implemented")
}
func (*UnimplementedQueryServer) ListTokenDefinitionsBySubject(ctx context.Context, req *QueryListTokenDefinitionsBySubjectRequest) (*QueryListTokenDefinitionsBySubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokenDefinitionsBySubject not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.tokendef.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTokenDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTokenDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.tokendef.Query/GetTokenDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTokenDefinition(ctx, req.(*QueryGetTokenDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTokenDefinitionFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenDefinitionFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTokenDefinitionFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.tokendef.Query/GetTokenDefinitionFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTokenDefinitionFull(ctx, req.(*QueryGetTokenDefinitionFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListTokenDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListTokenDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListTokenDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.tokendef.Query/ListTokenDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListTokenDefinitions(ctx, req.(*QueryListTokenDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListTokenDefinitionsBySubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListTokenDefinitionsBySubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListTokenDefinitionsBySubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.tokendef.Query/ListTokenDefinitionsBySubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListTokenDefinitionsBySubject(ctx, req.(*QueryListTokenDefinitionsBySubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.tokendef.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetTokenDefinition",
			Handler:    _Query_GetTokenDefinition_Handler,
		},
		{
			MethodName: "GetTokenDefinitionFull",
			Handler:    _Query_GetTokenDefinitionFull_Handler,
		},
		{
			MethodName: "ListTokenDefinitions",
			Handler:    _Query_ListTokenDefinitions_Handler,
		},
		{
			MethodName: "ListTokenDefinitionsBySubject",
			Handler:    _Query_ListTokenDefinitionsBySubject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/tokendef/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenDefinitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenDefinitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenDefinitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenDefinitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenDefinitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenDefinitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenDefinition != nil {
		{
			size, err := m.TokenDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenDefinitionFullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenDefinitionFullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenDefinitionFullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenDefinitionFullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenDefinitionFullResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenDefinitionFullResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedContent) > 0 {
		i -= len(m.ExtendedContent)
		copy(dAtA[i:], m.ExtendedContent)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtendedContent)))
		i--
		dAtA[i] = 0x12
	}
	if m.TokenDefinition != nil {
		{
			size, err := m.TokenDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTokenDefinitionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTokenDefinitionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTokenDefinitionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTokenDefinitionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTokenDefinitionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTokenDefinitionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenDefinitions) > 0 {
		for iNdEx := len(m.TokenDefinitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenDefinitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTokenDefinitionsBySubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTokenDefinitionsBySubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTokenDefinitionsBySubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListTokenDefinitionsBySubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListTokenDefinitionsBySubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListTokenDefinitionsBySubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenDefinitions) > 0 {
		for iNdEx := len(m.TokenDefinitions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenDefinitions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTokenDefinitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenDefinitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenDefinition != nil {
		l = m.TokenDefinition.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenDefinitionFullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenDefinitionFullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenDefinition != nil {
		l = m.TokenDefinition.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ExtendedContent)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListTokenDefinitionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListTokenDefinitionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenDefinitions) > 0 {
		for _, e := range m.TokenDefinitions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListTokenDefinitionsBySubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListTokenDefinitionsBySubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenDefinitions) > 0 {
		for _, e := range m.TokenDefinitions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenDefinitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenDefinitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenDefinitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenDefinitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenDefinitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenDefinitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenDefinition == nil {
				m.TokenDefinition = &TokenDefinition{}
			}
			if err := m.TokenDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenDefinitionFullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenDefinitionFullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenDefinitionFullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenDefinitionFullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenDefinitionFullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenDefinitionFullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenDefinition == nil {
				m.TokenDefinition = &TokenDefinition{}
			}
			if err := m.TokenDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTokenDefinitionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTokenDefinitionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTokenDefinitionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTokenDefinitionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTokenDefinitionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTokenDefinitionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDefinitions = append(m.TokenDefinitions, &TokenDefinition{})
			if err := m.TokenDefinitions[len(m.TokenDefinitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTokenDefinitionsBySubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTokenDefinitionsBySubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTokenDefinitionsBySubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListTokenDefinitionsBySubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListTokenDefinitionsBySubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListTokenDefinitionsBySubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDefinitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDefinitions = append(m.TokenDefinitions, &TokenDefinition{})
			if err := m.TokenDefinitions[len(m.TokenDefinitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
