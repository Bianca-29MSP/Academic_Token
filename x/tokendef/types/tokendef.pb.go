// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/tokendef/tokendef.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TokenDefinition defines how to tokenize a subject completion
type TokenDefinition struct {
	Index          string         `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	TokenDefId     string         `protobuf:"bytes,2,opt,name=tokenDefId,proto3" json:"tokenDefId,omitempty"`
	SubjectId      string         `protobuf:"bytes,3,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
	InstitutionId  string         `protobuf:"bytes,4,opt,name=institutionId,proto3" json:"institutionId,omitempty"`
	CourseId       string         `protobuf:"bytes,5,opt,name=courseId,proto3" json:"courseId,omitempty"`
	TokenName      string         `protobuf:"bytes,6,opt,name=tokenName,proto3" json:"tokenName,omitempty"`
	TokenSymbol    string         `protobuf:"bytes,7,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`
	TokenType      string         `protobuf:"bytes,8,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
	IsTransferable bool           `protobuf:"varint,9,opt,name=isTransferable,proto3" json:"isTransferable,omitempty"`
	IsBurnable     bool           `protobuf:"varint,10,opt,name=isBurnable,proto3" json:"isBurnable,omitempty"`
	MaxSupply      uint64         `protobuf:"varint,11,opt,name=maxSupply,proto3" json:"maxSupply,omitempty"`
	Metadata       *TokenMetadata `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ContentHash    string         `protobuf:"bytes,13,opt,name=contentHash,proto3" json:"contentHash,omitempty"`
	IpfsLink       string         `protobuf:"bytes,14,opt,name=ipfsLink,proto3" json:"ipfsLink,omitempty"`
	Creator        string         `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt      string         `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *TokenDefinition) Reset()         { *m = TokenDefinition{} }
func (m *TokenDefinition) String() string { return proto.CompactTextString(m) }
func (*TokenDefinition) ProtoMessage()    {}
func (*TokenDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e5c77dc87bbb34a, []int{0}
}
func (m *TokenDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenDefinition.Merge(m, src)
}
func (m *TokenDefinition) XXX_Size() int {
	return m.Size()
}
func (m *TokenDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_TokenDefinition proto.InternalMessageInfo

func (m *TokenDefinition) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *TokenDefinition) GetTokenDefId() string {
	if m != nil {
		return m.TokenDefId
	}
	return ""
}

func (m *TokenDefinition) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *TokenDefinition) GetInstitutionId() string {
	if m != nil {
		return m.InstitutionId
	}
	return ""
}

func (m *TokenDefinition) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *TokenDefinition) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *TokenDefinition) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *TokenDefinition) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *TokenDefinition) GetIsTransferable() bool {
	if m != nil {
		return m.IsTransferable
	}
	return false
}

func (m *TokenDefinition) GetIsBurnable() bool {
	if m != nil {
		return m.IsBurnable
	}
	return false
}

func (m *TokenDefinition) GetMaxSupply() uint64 {
	if m != nil {
		return m.MaxSupply
	}
	return 0
}

func (m *TokenDefinition) GetMetadata() *TokenMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TokenDefinition) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

func (m *TokenDefinition) GetIpfsLink() string {
	if m != nil {
		return m.IpfsLink
	}
	return ""
}

func (m *TokenDefinition) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TokenDefinition) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

// TokenMetadata defines metadata for minted tokens
type TokenMetadata struct {
	Description string            `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	ImageUri    string            `protobuf:"bytes,2,opt,name=imageUri,proto3" json:"imageUri,omitempty"`
	Attributes  []*TokenAttribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *TokenMetadata) Reset()         { *m = TokenMetadata{} }
func (m *TokenMetadata) String() string { return proto.CompactTextString(m) }
func (*TokenMetadata) ProtoMessage()    {}
func (*TokenMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e5c77dc87bbb34a, []int{1}
}
func (m *TokenMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMetadata.Merge(m, src)
}
func (m *TokenMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TokenMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMetadata proto.InternalMessageInfo

func (m *TokenMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TokenMetadata) GetImageUri() string {
	if m != nil {
		return m.ImageUri
	}
	return ""
}

func (m *TokenMetadata) GetAttributes() []*TokenAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// TokenAttribute represents dynamic attributes for tokens
type TokenAttribute struct {
	TraitType   string `protobuf:"bytes,1,opt,name=traitType,proto3" json:"traitType,omitempty"`
	DisplayType string `protobuf:"bytes,2,opt,name=displayType,proto3" json:"displayType,omitempty"`
	IsDynamic   bool   `protobuf:"varint,3,opt,name=isDynamic,proto3" json:"isDynamic,omitempty"`
}

func (m *TokenAttribute) Reset()         { *m = TokenAttribute{} }
func (m *TokenAttribute) String() string { return proto.CompactTextString(m) }
func (*TokenAttribute) ProtoMessage()    {}
func (*TokenAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e5c77dc87bbb34a, []int{2}
}
func (m *TokenAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenAttribute.Merge(m, src)
}
func (m *TokenAttribute) XXX_Size() int {
	return m.Size()
}
func (m *TokenAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_TokenAttribute proto.InternalMessageInfo

func (m *TokenAttribute) GetTraitType() string {
	if m != nil {
		return m.TraitType
	}
	return ""
}

func (m *TokenAttribute) GetDisplayType() string {
	if m != nil {
		return m.DisplayType
	}
	return ""
}

func (m *TokenAttribute) GetIsDynamic() bool {
	if m != nil {
		return m.IsDynamic
	}
	return false
}

func init() {
	proto.RegisterType((*TokenDefinition)(nil), "academictoken.tokendef.TokenDefinition")
	proto.RegisterType((*TokenMetadata)(nil), "academictoken.tokendef.TokenMetadata")
	proto.RegisterType((*TokenAttribute)(nil), "academictoken.tokendef.TokenAttribute")
}

func init() {
	proto.RegisterFile("academictoken/tokendef/tokendef.proto", fileDescriptor_5e5c77dc87bbb34a)
}

var fileDescriptor_5e5c77dc87bbb34a = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xb5, 0xdb, 0x5a, 0x97, 0x76, 0x60, 0x4d, 0xc8, 0xaa, 0x50, 0x14, 0x55, 0x6c,
	0xea, 0xa9, 0x95, 0xc6, 0x85, 0x6b, 0xa7, 0x09, 0x51, 0x09, 0x38, 0x64, 0xe5, 0xc2, 0xcd, 0x8d,
	0xdd, 0x62, 0xd6, 0xd8, 0x91, 0xed, 0x48, 0xcd, 0xb7, 0xe0, 0xc2, 0x37, 0xe0, 0xc3, 0x70, 0xdc,
	0x91, 0x23, 0x6a, 0xbf, 0x08, 0xf2, 0x4b, 0x9a, 0xa6, 0x08, 0xed, 0x12, 0xf9, 0xfd, 0xfe, 0xff,
	0x17, 0x3f, 0xbf, 0x67, 0xe3, 0x2b, 0x16, 0x33, 0x2e, 0x12, 0x19, 0x3b, 0xfd, 0x20, 0xd4, 0x04,
	0xbe, 0x5c, 0x2c, 0xab, 0xc5, 0x38, 0x35, 0xda, 0x69, 0xf2, 0xf2, 0xc8, 0x36, 0xde, 0xab, 0x83,
	0xcb, 0x95, 0x5e, 0x69, 0xb0, 0x4c, 0xfc, 0xaa, 0x70, 0x0f, 0x5e, 0xb0, 0x44, 0x2a, 0x3d, 0x81,
	0x6f, 0x81, 0x86, 0x3f, 0x5b, 0xf8, 0x62, 0xee, 0xb3, 0xee, 0xc4, 0x52, 0x2a, 0xe9, 0xa4, 0x56,
	0xe4, 0x12, 0x9f, 0x4a, 0xc5, 0xc5, 0x86, 0xa2, 0x10, 0x8d, 0x3a, 0x51, 0x11, 0x90, 0x00, 0x63,
	0x57, 0x1a, 0x67, 0x9c, 0x9e, 0x80, 0x54, 0x23, 0xe4, 0x15, 0xee, 0xd8, 0x6c, 0xf1, 0x4d, 0xc4,
	0x6e, 0xc6, 0x69, 0x13, 0xe4, 0x03, 0x20, 0xaf, 0x71, 0x4f, 0x2a, 0xeb, 0xa4, 0xcb, 0xfc, 0x16,
	0x33, 0x4e, 0x5b, 0xe0, 0x38, 0x86, 0x64, 0x80, 0xdb, 0xb1, 0xce, 0x8c, 0x15, 0x33, 0x4e, 0x4f,
	0xc1, 0x50, 0xc5, 0xfe, 0xff, 0xb0, 0xdb, 0x27, 0x96, 0x08, 0x7a, 0x56, 0xfc, 0xbf, 0x02, 0x24,
	0xc4, 0x5d, 0x08, 0xee, 0xf3, 0x64, 0xa1, 0xd7, 0xf4, 0x1c, 0xf4, 0x3a, 0xaa, 0xf2, 0xe7, 0x79,
	0x2a, 0x68, 0xbb, 0x96, 0xef, 0x01, 0xb9, 0xc6, 0x7d, 0x69, 0xe7, 0x86, 0x29, 0xbb, 0x14, 0x86,
	0x2d, 0xd6, 0x82, 0x76, 0x42, 0x34, 0x6a, 0x47, 0xff, 0x50, 0xdf, 0x05, 0x69, 0x6f, 0x33, 0xa3,
	0xc0, 0x83, 0xc1, 0x53, 0x23, 0x7e, 0x97, 0x84, 0x6d, 0xee, 0xb3, 0x34, 0x5d, 0xe7, 0xb4, 0x1b,
	0xa2, 0x51, 0x2b, 0x3a, 0x00, 0x32, 0xc5, 0xed, 0x44, 0x38, 0xc6, 0x99, 0x63, 0xf4, 0x59, 0x88,
	0x46, 0xdd, 0x9b, 0xab, 0xf1, 0xff, 0x27, 0x38, 0x86, 0xa1, 0x7c, 0x2c, 0xcd, 0x51, 0x95, 0xe6,
	0x0f, 0x1a, 0x6b, 0xe5, 0x84, 0x72, 0xef, 0x99, 0xfd, 0x4a, 0x7b, 0xc5, 0x41, 0x6b, 0xc8, 0x37,
	0x51, 0xa6, 0x4b, 0xfb, 0x41, 0xaa, 0x07, 0xda, 0x2f, 0x9a, 0xb8, 0x8f, 0x09, 0xc5, 0xe7, 0xb1,
	0x11, 0xcc, 0x69, 0x43, 0x2f, 0x40, 0xda, 0x87, 0xbe, 0x70, 0x58, 0x0a, 0x3e, 0x75, 0xf4, 0x79,
	0xd1, 0x9e, 0x0a, 0x0c, 0x7f, 0x20, 0xdc, 0x3b, 0xaa, 0xc8, 0xd7, 0xc1, 0x85, 0x8d, 0x8d, 0x4c,
	0xfd, 0xec, 0xca, 0xab, 0x52, 0x47, 0x50, 0x47, 0xc2, 0x56, 0xe2, 0xb3, 0x91, 0xe5, 0x75, 0xa9,
	0x62, 0xf2, 0x0e, 0x63, 0xe6, 0x9c, 0x91, 0x8b, 0xcc, 0x09, 0x4b, 0x9b, 0x61, 0x73, 0xd4, 0xbd,
	0xb9, 0x7e, 0xb2, 0x15, 0xd3, 0xbd, 0x3d, 0xaa, 0x65, 0x0e, 0x15, 0xee, 0x1f, 0xab, 0x30, 0x66,
	0xc3, 0xa4, 0x83, 0x31, 0xa3, 0x72, 0xcc, 0x7b, 0x00, 0x55, 0x4b, 0x9b, 0xae, 0x59, 0x0e, 0xfa,
	0x49, 0x59, 0xf5, 0x01, 0xf9, 0x7c, 0x69, 0xef, 0x72, 0xc5, 0x12, 0x19, 0xc3, 0x35, 0x6e, 0x47,
	0x07, 0x70, 0xfb, 0xf6, 0xd7, 0x36, 0x40, 0x8f, 0xdb, 0x00, 0xfd, 0xd9, 0x06, 0xe8, 0xfb, 0x2e,
	0x68, 0x3c, 0xee, 0x82, 0xc6, 0xef, 0x5d, 0xd0, 0xf8, 0x12, 0x1c, 0x3f, 0xd8, 0x4d, 0xed, 0xc9,
	0xe6, 0xa9, 0xb0, 0x8b, 0x33, 0x78, 0x6f, 0x6f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x35, 0x96,
	0xcf, 0xc1, 0xd9, 0x03, 0x00, 0x00,
}

func (m *TokenDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.IpfsLink) > 0 {
		i -= len(m.IpfsLink)
		copy(dAtA[i:], m.IpfsLink)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.IpfsLink)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ContentHash) > 0 {
		i -= len(m.ContentHash)
		copy(dAtA[i:], m.ContentHash)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.ContentHash)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTokendef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.MaxSupply != 0 {
		i = encodeVarintTokendef(dAtA, i, uint64(m.MaxSupply))
		i--
		dAtA[i] = 0x58
	}
	if m.IsBurnable {
		i--
		if m.IsBurnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsTransferable {
		i--
		if m.IsTransferable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.TokenType) > 0 {
		i -= len(m.TokenType)
		copy(dAtA[i:], m.TokenType)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.TokenType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InstitutionId) > 0 {
		i -= len(m.InstitutionId)
		copy(dAtA[i:], m.InstitutionId)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.InstitutionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenDefId) > 0 {
		i -= len(m.TokenDefId)
		copy(dAtA[i:], m.TokenDefId)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.TokenDefId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTokendef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ImageUri) > 0 {
		i -= len(m.ImageUri)
		copy(dAtA[i:], m.ImageUri)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.ImageUri)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDynamic {
		i--
		if m.IsDynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DisplayType) > 0 {
		i -= len(m.DisplayType)
		copy(dAtA[i:], m.DisplayType)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.DisplayType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TraitType) > 0 {
		i -= len(m.TraitType)
		copy(dAtA[i:], m.TraitType)
		i = encodeVarintTokendef(dAtA, i, uint64(len(m.TraitType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokendef(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokendef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.TokenDefId)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.InstitutionId)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	if m.IsTransferable {
		n += 2
	}
	if m.IsBurnable {
		n += 2
	}
	if m.MaxSupply != 0 {
		n += 1 + sovTokendef(uint64(m.MaxSupply))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.ContentHash)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.IpfsLink)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 2 + l + sovTokendef(uint64(l))
	}
	return n
}

func (m *TokenMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.ImageUri)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovTokendef(uint64(l))
		}
	}
	return n
}

func (m *TokenAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraitType)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	l = len(m.DisplayType)
	if l > 0 {
		n += 1 + l + sovTokendef(uint64(l))
	}
	if m.IsDynamic {
		n += 2
	}
	return n
}

func sovTokendef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokendef(x uint64) (n int) {
	return sovTokendef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokendef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstitutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstitutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTransferable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTransferable = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBurnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBurnable = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			m.MaxSupply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSupply |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &TokenMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokendef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokendef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokendef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &TokenAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokendef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokendef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokendef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraitType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraitType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokendef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokendef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDynamic = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTokendef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokendef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokendef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokendef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokendef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokendef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokendef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokendef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokendef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokendef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokendef = fmt.Errorf("proto: unexpected end of group")
)
