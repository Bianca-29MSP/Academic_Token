// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/subject/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetSubjectRequest is the request type for the Query/GetSubject RPC method
type QueryGetSubjectRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSubjectRequest) Reset()         { *m = QueryGetSubjectRequest{} }
func (m *QueryGetSubjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubjectRequest) ProtoMessage()    {}
func (*QueryGetSubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{2}
}
func (m *QueryGetSubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubjectRequest.Merge(m, src)
}
func (m *QueryGetSubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubjectRequest proto.InternalMessageInfo

func (m *QueryGetSubjectRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetSubjectResponse is the response type for the Query/GetSubject RPC method
type QueryGetSubjectResponse struct {
	Subject SubjectContent `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject"`
}

func (m *QueryGetSubjectResponse) Reset()         { *m = QueryGetSubjectResponse{} }
func (m *QueryGetSubjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubjectResponse) ProtoMessage()    {}
func (*QueryGetSubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{3}
}
func (m *QueryGetSubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubjectResponse.Merge(m, src)
}
func (m *QueryGetSubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubjectResponse proto.InternalMessageInfo

func (m *QueryGetSubjectResponse) GetSubject() SubjectContent {
	if m != nil {
		return m.Subject
	}
	return SubjectContent{}
}

// QueryGetSubjectFullRequest is the request type for the Query/GetSubjectFull RPC method
type QueryGetSubjectFullRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSubjectFullRequest) Reset()         { *m = QueryGetSubjectFullRequest{} }
func (m *QueryGetSubjectFullRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubjectFullRequest) ProtoMessage()    {}
func (*QueryGetSubjectFullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{4}
}
func (m *QueryGetSubjectFullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubjectFullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubjectFullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubjectFullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubjectFullRequest.Merge(m, src)
}
func (m *QueryGetSubjectFullRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubjectFullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubjectFullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubjectFullRequest proto.InternalMessageInfo

func (m *QueryGetSubjectFullRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetSubjectFullResponse is the response type for the Query/GetSubjectFull RPC method
type QueryGetSubjectFullResponse struct {
	Subject             SubjectContent `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject"`
	ExtendedContentJson string         `protobuf:"bytes,2,opt,name=extended_content_json,json=extendedContentJson,proto3" json:"extended_content_json,omitempty"`
}

func (m *QueryGetSubjectFullResponse) Reset()         { *m = QueryGetSubjectFullResponse{} }
func (m *QueryGetSubjectFullResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubjectFullResponse) ProtoMessage()    {}
func (*QueryGetSubjectFullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{5}
}
func (m *QueryGetSubjectFullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubjectFullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubjectFullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubjectFullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubjectFullResponse.Merge(m, src)
}
func (m *QueryGetSubjectFullResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubjectFullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubjectFullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubjectFullResponse proto.InternalMessageInfo

func (m *QueryGetSubjectFullResponse) GetSubject() SubjectContent {
	if m != nil {
		return m.Subject
	}
	return SubjectContent{}
}

func (m *QueryGetSubjectFullResponse) GetExtendedContentJson() string {
	if m != nil {
		return m.ExtendedContentJson
	}
	return ""
}

// QueryGetSubjectWithPrerequisitesRequest is the request type for the Query/GetSubjectWithPrerequisites RPC method
type QueryGetSubjectWithPrerequisitesRequest struct {
	SubjectId string `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (m *QueryGetSubjectWithPrerequisitesRequest) Reset() {
	*m = QueryGetSubjectWithPrerequisitesRequest{}
}
func (m *QueryGetSubjectWithPrerequisitesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubjectWithPrerequisitesRequest) ProtoMessage()    {}
func (*QueryGetSubjectWithPrerequisitesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{6}
}
func (m *QueryGetSubjectWithPrerequisitesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubjectWithPrerequisitesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubjectWithPrerequisitesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubjectWithPrerequisitesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubjectWithPrerequisitesRequest.Merge(m, src)
}
func (m *QueryGetSubjectWithPrerequisitesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubjectWithPrerequisitesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubjectWithPrerequisitesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubjectWithPrerequisitesRequest proto.InternalMessageInfo

func (m *QueryGetSubjectWithPrerequisitesRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

// QueryGetSubjectWithPrerequisitesResponse is the response type for the Query/GetSubjectWithPrerequisites RPC method
type QueryGetSubjectWithPrerequisitesResponse struct {
	SubjectWithPrerequisites SubjectWithPrerequisites `protobuf:"bytes,1,opt,name=subject_with_prerequisites,json=subjectWithPrerequisites,proto3" json:"subject_with_prerequisites"`
}

func (m *QueryGetSubjectWithPrerequisitesResponse) Reset() {
	*m = QueryGetSubjectWithPrerequisitesResponse{}
}
func (m *QueryGetSubjectWithPrerequisitesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSubjectWithPrerequisitesResponse) ProtoMessage()    {}
func (*QueryGetSubjectWithPrerequisitesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{7}
}
func (m *QueryGetSubjectWithPrerequisitesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSubjectWithPrerequisitesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSubjectWithPrerequisitesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSubjectWithPrerequisitesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSubjectWithPrerequisitesResponse.Merge(m, src)
}
func (m *QueryGetSubjectWithPrerequisitesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSubjectWithPrerequisitesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSubjectWithPrerequisitesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSubjectWithPrerequisitesResponse proto.InternalMessageInfo

func (m *QueryGetSubjectWithPrerequisitesResponse) GetSubjectWithPrerequisites() SubjectWithPrerequisites {
	if m != nil {
		return m.SubjectWithPrerequisites
	}
	return SubjectWithPrerequisites{}
}

// QueryListSubjectsRequest is the request type for the Query/ListSubjects RPC method
type QueryListSubjectsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListSubjectsRequest) Reset()         { *m = QueryListSubjectsRequest{} }
func (m *QueryListSubjectsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListSubjectsRequest) ProtoMessage()    {}
func (*QueryListSubjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{8}
}
func (m *QueryListSubjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListSubjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListSubjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListSubjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListSubjectsRequest.Merge(m, src)
}
func (m *QueryListSubjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListSubjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListSubjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListSubjectsRequest proto.InternalMessageInfo

func (m *QueryListSubjectsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryListSubjectsResponse is the response type for the Query/ListSubjects RPC method
type QueryListSubjectsResponse struct {
	Subjects   []SubjectContent    `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListSubjectsResponse) Reset()         { *m = QueryListSubjectsResponse{} }
func (m *QueryListSubjectsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListSubjectsResponse) ProtoMessage()    {}
func (*QueryListSubjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{9}
}
func (m *QueryListSubjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListSubjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListSubjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListSubjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListSubjectsResponse.Merge(m, src)
}
func (m *QueryListSubjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListSubjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListSubjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListSubjectsResponse proto.InternalMessageInfo

func (m *QueryListSubjectsResponse) GetSubjects() []SubjectContent {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *QueryListSubjectsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySubjectsByCourseRequest is the request type for the Query/SubjectsByCourse RPC method
type QuerySubjectsByCourseRequest struct {
	CourseId   string             `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubjectsByCourseRequest) Reset()         { *m = QuerySubjectsByCourseRequest{} }
func (m *QuerySubjectsByCourseRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsByCourseRequest) ProtoMessage()    {}
func (*QuerySubjectsByCourseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{10}
}
func (m *QuerySubjectsByCourseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsByCourseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsByCourseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsByCourseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsByCourseRequest.Merge(m, src)
}
func (m *QuerySubjectsByCourseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsByCourseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsByCourseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsByCourseRequest proto.InternalMessageInfo

func (m *QuerySubjectsByCourseRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *QuerySubjectsByCourseRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySubjectsByCourseResponse is the response type for the Query/SubjectsByCourse RPC method
type QuerySubjectsByCourseResponse struct {
	Subjects   []SubjectContent    `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubjectsByCourseResponse) Reset()         { *m = QuerySubjectsByCourseResponse{} }
func (m *QuerySubjectsByCourseResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsByCourseResponse) ProtoMessage()    {}
func (*QuerySubjectsByCourseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{11}
}
func (m *QuerySubjectsByCourseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsByCourseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsByCourseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsByCourseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsByCourseResponse.Merge(m, src)
}
func (m *QuerySubjectsByCourseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsByCourseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsByCourseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsByCourseResponse proto.InternalMessageInfo

func (m *QuerySubjectsByCourseResponse) GetSubjects() []SubjectContent {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *QuerySubjectsByCourseResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySubjectsByInstitutionRequest is the request type for the Query/SubjectsByInstitution RPC method
type QuerySubjectsByInstitutionRequest struct {
	InstitutionId string             `protobuf:"bytes,1,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubjectsByInstitutionRequest) Reset()         { *m = QuerySubjectsByInstitutionRequest{} }
func (m *QuerySubjectsByInstitutionRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsByInstitutionRequest) ProtoMessage()    {}
func (*QuerySubjectsByInstitutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{12}
}
func (m *QuerySubjectsByInstitutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsByInstitutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsByInstitutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsByInstitutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsByInstitutionRequest.Merge(m, src)
}
func (m *QuerySubjectsByInstitutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsByInstitutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsByInstitutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsByInstitutionRequest proto.InternalMessageInfo

func (m *QuerySubjectsByInstitutionRequest) GetInstitutionId() string {
	if m != nil {
		return m.InstitutionId
	}
	return ""
}

func (m *QuerySubjectsByInstitutionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySubjectsByInstitutionResponse is the response type for the Query/SubjectsByInstitution RPC method
type QuerySubjectsByInstitutionResponse struct {
	Subjects   []SubjectContent    `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubjectsByInstitutionResponse) Reset()         { *m = QuerySubjectsByInstitutionResponse{} }
func (m *QuerySubjectsByInstitutionResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsByInstitutionResponse) ProtoMessage()    {}
func (*QuerySubjectsByInstitutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{13}
}
func (m *QuerySubjectsByInstitutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsByInstitutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsByInstitutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsByInstitutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsByInstitutionResponse.Merge(m, src)
}
func (m *QuerySubjectsByInstitutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsByInstitutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsByInstitutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsByInstitutionResponse proto.InternalMessageInfo

func (m *QuerySubjectsByInstitutionResponse) GetSubjects() []SubjectContent {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *QuerySubjectsByInstitutionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCheckPrerequisitesRequest is the request type for the Query/CheckPrerequisites RPC method
type QueryCheckPrerequisitesRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (m *QueryCheckPrerequisitesRequest) Reset()         { *m = QueryCheckPrerequisitesRequest{} }
func (m *QueryCheckPrerequisitesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckPrerequisitesRequest) ProtoMessage()    {}
func (*QueryCheckPrerequisitesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{14}
}
func (m *QueryCheckPrerequisitesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckPrerequisitesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckPrerequisitesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckPrerequisitesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckPrerequisitesRequest.Merge(m, src)
}
func (m *QueryCheckPrerequisitesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckPrerequisitesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckPrerequisitesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckPrerequisitesRequest proto.InternalMessageInfo

func (m *QueryCheckPrerequisitesRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *QueryCheckPrerequisitesRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

// QueryCheckPrerequisitesResponse is the response type for the Query/CheckPrerequisites RPC method
type QueryCheckPrerequisitesResponse struct {
	IsEligible           bool     `protobuf:"varint,1,opt,name=is_eligible,json=isEligible,proto3" json:"is_eligible,omitempty"`
	MissingPrerequisites []string `protobuf:"bytes,2,rep,name=missing_prerequisites,json=missingPrerequisites,proto3" json:"missing_prerequisites,omitempty"`
}

func (m *QueryCheckPrerequisitesResponse) Reset()         { *m = QueryCheckPrerequisitesResponse{} }
func (m *QueryCheckPrerequisitesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckPrerequisitesResponse) ProtoMessage()    {}
func (*QueryCheckPrerequisitesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{15}
}
func (m *QueryCheckPrerequisitesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckPrerequisitesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckPrerequisitesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckPrerequisitesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckPrerequisitesResponse.Merge(m, src)
}
func (m *QueryCheckPrerequisitesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckPrerequisitesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckPrerequisitesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckPrerequisitesResponse proto.InternalMessageInfo

func (m *QueryCheckPrerequisitesResponse) GetIsEligible() bool {
	if m != nil {
		return m.IsEligible
	}
	return false
}

func (m *QueryCheckPrerequisitesResponse) GetMissingPrerequisites() []string {
	if m != nil {
		return m.MissingPrerequisites
	}
	return nil
}

// QueryCheckEquivalenceRequest is the request type for the Query/CheckEquivalence RPC method
type QueryCheckEquivalenceRequest struct {
	SourceSubjectId  string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetSubjectId  string `protobuf:"bytes,2,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	ForceRecalculate bool   `protobuf:"varint,3,opt,name=force_recalculate,json=forceRecalculate,proto3" json:"force_recalculate,omitempty"`
}

func (m *QueryCheckEquivalenceRequest) Reset()         { *m = QueryCheckEquivalenceRequest{} }
func (m *QueryCheckEquivalenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckEquivalenceRequest) ProtoMessage()    {}
func (*QueryCheckEquivalenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{16}
}
func (m *QueryCheckEquivalenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckEquivalenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckEquivalenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckEquivalenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckEquivalenceRequest.Merge(m, src)
}
func (m *QueryCheckEquivalenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckEquivalenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckEquivalenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckEquivalenceRequest proto.InternalMessageInfo

func (m *QueryCheckEquivalenceRequest) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *QueryCheckEquivalenceRequest) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

func (m *QueryCheckEquivalenceRequest) GetForceRecalculate() bool {
	if m != nil {
		return m.ForceRecalculate
	}
	return false
}

// QueryCheckEquivalenceResponse is the response type for the Query/CheckEquivalence RPC method
type QueryCheckEquivalenceResponse struct {
	EquivalencePercent uint64 `protobuf:"varint,1,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"`
	Status             string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryCheckEquivalenceResponse) Reset()         { *m = QueryCheckEquivalenceResponse{} }
func (m *QueryCheckEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckEquivalenceResponse) ProtoMessage()    {}
func (*QueryCheckEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d12f99a3432a379e, []int{17}
}
func (m *QueryCheckEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckEquivalenceResponse.Merge(m, src)
}
func (m *QueryCheckEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckEquivalenceResponse proto.InternalMessageInfo

func (m *QueryCheckEquivalenceResponse) GetEquivalencePercent() uint64 {
	if m != nil {
		return m.EquivalencePercent
	}
	return 0
}

func (m *QueryCheckEquivalenceResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "academictoken.subject.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "academictoken.subject.QueryParamsResponse")
	proto.RegisterType((*QueryGetSubjectRequest)(nil), "academictoken.subject.QueryGetSubjectRequest")
	proto.RegisterType((*QueryGetSubjectResponse)(nil), "academictoken.subject.QueryGetSubjectResponse")
	proto.RegisterType((*QueryGetSubjectFullRequest)(nil), "academictoken.subject.QueryGetSubjectFullRequest")
	proto.RegisterType((*QueryGetSubjectFullResponse)(nil), "academictoken.subject.QueryGetSubjectFullResponse")
	proto.RegisterType((*QueryGetSubjectWithPrerequisitesRequest)(nil), "academictoken.subject.QueryGetSubjectWithPrerequisitesRequest")
	proto.RegisterType((*QueryGetSubjectWithPrerequisitesResponse)(nil), "academictoken.subject.QueryGetSubjectWithPrerequisitesResponse")
	proto.RegisterType((*QueryListSubjectsRequest)(nil), "academictoken.subject.QueryListSubjectsRequest")
	proto.RegisterType((*QueryListSubjectsResponse)(nil), "academictoken.subject.QueryListSubjectsResponse")
	proto.RegisterType((*QuerySubjectsByCourseRequest)(nil), "academictoken.subject.QuerySubjectsByCourseRequest")
	proto.RegisterType((*QuerySubjectsByCourseResponse)(nil), "academictoken.subject.QuerySubjectsByCourseResponse")
	proto.RegisterType((*QuerySubjectsByInstitutionRequest)(nil), "academictoken.subject.QuerySubjectsByInstitutionRequest")
	proto.RegisterType((*QuerySubjectsByInstitutionResponse)(nil), "academictoken.subject.QuerySubjectsByInstitutionResponse")
	proto.RegisterType((*QueryCheckPrerequisitesRequest)(nil), "academictoken.subject.QueryCheckPrerequisitesRequest")
	proto.RegisterType((*QueryCheckPrerequisitesResponse)(nil), "academictoken.subject.QueryCheckPrerequisitesResponse")
	proto.RegisterType((*QueryCheckEquivalenceRequest)(nil), "academictoken.subject.QueryCheckEquivalenceRequest")
	proto.RegisterType((*QueryCheckEquivalenceResponse)(nil), "academictoken.subject.QueryCheckEquivalenceResponse")
}

func init() { proto.RegisterFile("academictoken/subject/query.proto", fileDescriptor_d12f99a3432a379e) }

var fileDescriptor_d12f99a3432a379e = []byte{
	// 1170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x33, 0x4e, 0x1b, 0x92, 0x57, 0xda, 0x26, 0x93, 0xa4, 0x84, 0x4d, 0xe3, 0x34, 0x2b,
	0x85, 0xa4, 0x29, 0xec, 0x90, 0xa4, 0xe5, 0x37, 0x14, 0x25, 0x24, 0x21, 0xa8, 0x87, 0xe0, 0x1e,
	0x8a, 0x38, 0x60, 0xd6, 0xeb, 0xe9, 0x66, 0x5a, 0x7b, 0xd7, 0xd9, 0x99, 0x6d, 0x13, 0x45, 0xbe,
	0x80, 0xc4, 0x19, 0xc1, 0x05, 0x21, 0x24, 0x24, 0xb8, 0x70, 0xa9, 0x04, 0x17, 0x0e, 0xfc, 0x05,
	0x3d, 0x16, 0xf5, 0x00, 0x27, 0x84, 0x12, 0x24, 0xfe, 0x8d, 0x6a, 0x67, 0x67, 0xbd, 0x6b, 0xaf,
	0x77, 0xe3, 0x44, 0x3d, 0xf4, 0xd2, 0xc6, 0x6f, 0xde, 0x9b, 0xf7, 0xf9, 0x3e, 0xcf, 0xcc, 0x7b,
	0x86, 0x19, 0xd3, 0x32, 0xab, 0xb4, 0xce, 0x2c, 0xe1, 0xde, 0xa5, 0x0e, 0xe1, 0x7e, 0xe5, 0x0e,
	0xb5, 0x04, 0xd9, 0xf1, 0xa9, 0xb7, 0x67, 0x34, 0x3c, 0x57, 0xb8, 0x78, 0xbc, 0xcd, 0xc5, 0x50,
	0x2e, 0xda, 0x88, 0x59, 0x67, 0x8e, 0x4b, 0xe4, 0xbf, 0xa1, 0xa7, 0x36, 0x66, 0xbb, 0xb6, 0x2b,
	0xff, 0x24, 0xc1, 0x5f, 0xca, 0x7a, 0xd1, 0x76, 0x5d, 0xbb, 0x46, 0x89, 0xd9, 0x60, 0xc4, 0x74,
	0x1c, 0x57, 0x98, 0x82, 0xb9, 0x0e, 0x57, 0xab, 0x0b, 0x96, 0xcb, 0xeb, 0x2e, 0x27, 0x15, 0x93,
	0xd3, 0x30, 0x2d, 0xb9, 0xb7, 0x58, 0xa1, 0xc2, 0x5c, 0x24, 0x0d, 0xd3, 0x66, 0x8e, 0x74, 0x56,
	0xbe, 0x7a, 0x77, 0xd8, 0x86, 0xe9, 0x99, 0xf5, 0x68, 0xbf, 0x2b, 0xdd, 0x7d, 0xd4, 0xff, 0x65,
	0xcb, 0x75, 0x04, 0x75, 0x84, 0x72, 0x36, 0x32, 0x36, 0xf4, 0xa8, 0x47, 0x77, 0x7c, 0xc6, 0x99,
	0xa0, 0x65, 0xdb, 0x73, 0xfd, 0x46, 0x04, 0xdb, 0xdd, 0xdf, 0xda, 0xa6, 0xd6, 0xdd, 0x72, 0x9d,
	0x72, 0x6e, 0xda, 0x54, 0x81, 0xe8, 0x63, 0x80, 0x3f, 0x0e, 0xe4, 0x6c, 0x49, 0xba, 0x12, 0xdd,
	0xf1, 0x29, 0x17, 0xfa, 0x2d, 0x18, 0x6d, 0xb3, 0xf2, 0x86, 0xeb, 0x70, 0x8a, 0xdf, 0x87, 0x81,
	0x50, 0xc5, 0x04, 0xba, 0x84, 0xe6, 0xcf, 0x2c, 0x4d, 0x19, 0x5d, 0x8b, 0x6e, 0x84, 0x61, 0x2b,
	0x43, 0x0f, 0xff, 0x99, 0xee, 0xfb, 0xe5, 0xff, 0x5f, 0x17, 0x50, 0x49, 0xc5, 0xe9, 0x06, 0x5c,
	0x90, 0x1b, 0x6f, 0x50, 0x71, 0x33, 0x74, 0x56, 0x29, 0xf1, 0x18, 0x9c, 0x66, 0x4e, 0x95, 0xee,
	0xca, 0xad, 0x87, 0x4a, 0xe1, 0x07, 0xfd, 0x73, 0x78, 0x21, 0xe5, 0xaf, 0x60, 0xd6, 0xe0, 0x39,
	0x95, 0x4f, 0xd1, 0xcc, 0x66, 0xd0, 0xa8, 0xc0, 0xd5, 0xb0, 0xa6, 0x2b, 0xa7, 0x02, 0xaa, 0x52,
	0x14, 0xab, 0x2f, 0x81, 0xd6, 0x91, 0x61, 0xdd, 0xaf, 0xd5, 0xf2, 0xa9, 0xbe, 0x43, 0x30, 0xd9,
	0x35, 0xe8, 0xa9, 0xa2, 0xe1, 0x25, 0x18, 0xa7, 0xbb, 0x82, 0x3a, 0x55, 0x5a, 0x8d, 0x4e, 0x44,
	0xf9, 0x0e, 0x77, 0x9d, 0x89, 0x82, 0x84, 0x19, 0x8d, 0x16, 0x55, 0xf8, 0x47, 0xdc, 0x75, 0xf4,
	0x0f, 0x61, 0xae, 0x83, 0xec, 0x16, 0x13, 0xdb, 0x5b, 0x89, 0xa3, 0x12, 0x7d, 0xc9, 0x78, 0x0a,
	0x20, 0x3a, 0x6f, 0xac, 0xaa, 0x04, 0x0e, 0x29, 0xcb, 0x66, 0x55, 0xff, 0x11, 0xc1, 0xfc, 0xd1,
	0x5b, 0x29, 0xc5, 0x1c, 0xb4, 0x68, 0xaf, 0xfb, 0x4c, 0x6c, 0x97, 0x93, 0x67, 0x33, 0x3a, 0x2d,
	0x24, 0xbf, 0x08, 0xa9, 0xcd, 0x55, 0x39, 0x26, 0x78, 0xc6, 0xba, 0x5e, 0x81, 0x09, 0x09, 0x78,
	0x83, 0xf1, 0x88, 0xb0, 0x25, 0x6e, 0x1d, 0x20, 0xbe, 0x98, 0x0a, 0xe0, 0x25, 0x23, 0xbc, 0xc5,
	0x46, 0x70, 0x8b, 0x8d, 0xf0, 0xf1, 0x50, 0xb7, 0xd8, 0xd8, 0x32, 0x6d, 0xaa, 0x62, 0x4b, 0x89,
	0x48, 0xfd, 0x01, 0x82, 0x17, 0xbb, 0x24, 0x51, 0xb2, 0x37, 0x60, 0x50, 0xd1, 0x05, 0x22, 0xfb,
	0x8f, 0xfb, 0x4d, 0xb7, 0x82, 0xf1, 0x46, 0x1b, 0x6e, 0x41, 0xe2, 0xce, 0x1d, 0x89, 0x1b, 0x52,
	0xb4, 0xf1, 0x7e, 0x89, 0xe0, 0xa2, 0xe4, 0x8d, 0x58, 0x57, 0xf6, 0x56, 0x5d, 0xdf, 0xe3, 0x91,
	0x38, 0x3c, 0x09, 0x43, 0x96, 0x34, 0xc4, 0x5f, 0xfa, 0x60, 0x68, 0xd8, 0xac, 0x76, 0x54, 0xad,
	0x70, 0xe2, 0xaa, 0xfd, 0x86, 0x60, 0x2a, 0x83, 0xe2, 0x99, 0xad, 0xdc, 0x37, 0x08, 0x66, 0x3a,
	0x98, 0x37, 0x1d, 0x2e, 0x98, 0xf0, 0x83, 0xe5, 0xa8, 0x7c, 0xb3, 0x70, 0x8e, 0xc5, 0xd6, 0xb8,
	0x86, 0x67, 0x13, 0xd6, 0xa7, 0x58, 0xc8, 0xdf, 0x11, 0xe8, 0x79, 0x50, 0xcf, 0x6c, 0x35, 0x3f,
	0x83, 0xa2, 0xe4, 0x5e, 0x0d, 0x9a, 0x4e, 0xe6, 0xf3, 0x23, 0xfc, 0x6a, 0xf0, 0xa8, 0x25, 0x9e,
	0x9f, 0xd0, 0xb2, 0x59, 0xed, 0x78, 0x9d, 0x0a, 0x9d, 0xaf, 0xd3, 0x7d, 0x98, 0xce, 0xdc, 0x5f,
	0x15, 0x65, 0x1a, 0xce, 0x30, 0x5e, 0xa6, 0x35, 0x66, 0xb3, 0x4a, 0x8d, 0xca, 0x0c, 0x83, 0x25,
	0x60, 0x7c, 0x4d, 0x59, 0xf0, 0x32, 0x8c, 0xd7, 0x19, 0xe7, 0xcc, 0xb1, 0x3b, 0xde, 0xab, 0xc2,
	0xa5, 0xfe, 0xf9, 0xa1, 0xd2, 0x98, 0x5a, 0x6c, 0x7f, 0x74, 0x7e, 0x8e, 0x2e, 0x98, 0xcc, 0xbc,
	0xb6, 0xe3, 0xb3, 0x7b, 0x66, 0x8d, 0x3a, 0x56, 0xeb, 0x82, 0x2d, 0xc0, 0x08, 0x77, 0x7d, 0xcf,
	0xa2, 0xe5, 0xd4, 0xeb, 0x7a, 0x3e, 0x5c, 0xb8, 0x19, 0xa9, 0x08, 0x7c, 0x85, 0xe9, 0xd9, 0x54,
	0x94, 0x53, 0x5a, 0xcf, 0x87, 0x0b, 0xb1, 0xef, 0x15, 0x18, 0xb9, 0xed, 0x06, 0xdb, 0x7a, 0xd4,
	0x32, 0x6b, 0x96, 0x5f, 0x33, 0x05, 0x9d, 0xe8, 0x97, 0xa2, 0x86, 0xe5, 0x42, 0x29, 0xb6, 0xeb,
	0xdb, 0xea, 0xfe, 0xa5, 0x21, 0x55, 0x71, 0x08, 0x8c, 0xd2, 0xd8, 0x5c, 0x6e, 0x50, 0xcf, 0xa2,
	0x4e, 0xd8, 0xae, 0x4e, 0x95, 0x70, 0x62, 0x69, 0x2b, 0x5c, 0xc1, 0x17, 0x60, 0x80, 0x0b, 0x53,
	0xf8, 0x5c, 0xf1, 0xa9, 0x4f, 0x4b, 0x3f, 0x9d, 0x85, 0xd3, 0x32, 0x15, 0xfe, 0x0a, 0xc1, 0x40,
	0xd8, 0xf9, 0xf1, 0xe5, 0x8c, 0xd3, 0x97, 0x1e, 0x35, 0xb4, 0x85, 0x5e, 0x5c, 0x43, 0x68, 0x7d,
	0xf6, 0x8b, 0xc7, 0xff, 0x7d, 0x5b, 0x98, 0xc6, 0x53, 0x24, 0x6f, 0xc4, 0xc2, 0x3f, 0x20, 0x80,
	0xb8, 0x69, 0xe1, 0x57, 0xf2, 0x32, 0xa4, 0x06, 0x11, 0xcd, 0xe8, 0xd5, 0x5d, 0x41, 0x11, 0x09,
	0x75, 0x19, 0xcf, 0x91, 0xdc, 0x99, 0x8e, 0x93, 0x7d, 0x39, 0x3c, 0x34, 0xf1, 0x03, 0x04, 0xe7,
	0xda, 0x07, 0x07, 0xbc, 0xd8, 0x5b, 0xce, 0xc4, 0x64, 0xa2, 0x2d, 0x1d, 0x27, 0x44, 0xa1, 0x5e,
	0x95, 0xa8, 0x06, 0x7e, 0xb9, 0x47, 0x54, 0x72, 0x3b, 0x80, 0x3b, 0x40, 0x30, 0x99, 0x33, 0x03,
	0xe0, 0xf7, 0x7a, 0x23, 0xc9, 0x9a, 0x43, 0xb4, 0xeb, 0x27, 0x8e, 0x57, 0xb2, 0x56, 0xa4, 0xac,
	0x77, 0xf0, 0x5b, 0x47, 0xca, 0x8a, 0x6f, 0x59, 0xb3, 0x6d, 0x7c, 0xe6, 0xf8, 0x7b, 0x04, 0xcf,
	0x27, 0x5b, 0x3c, 0x26, 0x79, 0x54, 0x5d, 0x26, 0x0e, 0xed, 0xd5, 0xde, 0x03, 0x14, 0xf7, 0x9c,
	0xe4, 0x9e, 0xc1, 0xd3, 0x47, 0x70, 0xe3, 0x3f, 0x10, 0x0c, 0x77, 0x76, 0x52, 0xbc, 0x9c, 0x97,
	0x2f, 0xa3, 0xfb, 0x6b, 0x57, 0x8f, 0x17, 0xa4, 0x40, 0xdf, 0x96, 0xa0, 0xd7, 0xf0, 0x72, 0x06,
	0x68, 0x38, 0x3f, 0x70, 0xb2, 0xdf, 0x9a, 0x2c, 0x9a, 0x31, 0xfc, 0x63, 0x04, 0xe3, 0x5d, 0xbb,
	0x17, 0x7e, 0xa3, 0x37, 0x98, 0x74, 0x17, 0xd6, 0xde, 0x3c, 0x41, 0xa4, 0xd2, 0xb2, 0x26, 0xb5,
	0x5c, 0xc7, 0xef, 0x66, 0x68, 0x49, 0xf4, 0x71, 0x79, 0x0f, 0x92, 0xbd, 0x3e, 0xa1, 0xea, 0x4f,
	0x04, 0x38, 0xdd, 0x7b, 0xf0, 0xb5, 0x3c, 0xb0, 0xcc, 0x5e, 0xa8, 0xbd, 0x76, 0xdc, 0x30, 0x25,
	0xe6, 0x86, 0x14, 0xb3, 0x8e, 0x3f, 0x20, 0x79, 0x3f, 0xf9, 0xda, 0x4e, 0x3a, 0xd9, 0x8f, 0xbb,
	0x6e, 0xb3, 0xed, 0x46, 0xe0, 0xbf, 0x10, 0x0c, 0x77, 0x36, 0x8c, 0xfc, 0x63, 0x96, 0xd1, 0x03,
	0xf3, 0x8f, 0x59, 0x56, 0x4f, 0xd2, 0x3f, 0x91, 0x6a, 0x4a, 0x78, 0x2b, 0x57, 0x4d, 0xa2, 0x37,
	0x91, 0xfd, 0x54, 0xa7, 0x6d, 0x92, 0xfd, 0x54, 0x47, 0x6d, 0xae, 0xbc, 0xfe, 0xf0, 0xa0, 0x88,
	0x1e, 0x1d, 0x14, 0xd1, 0xbf, 0x07, 0x45, 0xf4, 0xf5, 0x61, 0xb1, 0xef, 0xd1, 0x61, 0xb1, 0xef,
	0xef, 0xc3, 0x62, 0xdf, 0xa7, 0x53, 0xed, 0xa9, 0x76, 0x5b, 0xc9, 0xc4, 0x5e, 0x83, 0xf2, 0xca,
	0x80, 0xfc, 0x95, 0xbc, 0xfc, 0x24, 0x00, 0x00, 0xff, 0xff, 0x42, 0x27, 0x4b, 0xc1, 0x81, 0x10,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetSubject queries a subject by its ID
	GetSubject(ctx context.Context, in *QueryGetSubjectRequest, opts ...grpc.CallOption) (*QueryGetSubjectResponse, error)
	// GetSubjectFull queries a subject with full content from IPFS
	GetSubjectFull(ctx context.Context, in *QueryGetSubjectFullRequest, opts ...grpc.CallOption) (*QueryGetSubjectFullResponse, error)
	// GetSubjectWithPrerequisites queries a subject with its prerequisite groups
	GetSubjectWithPrerequisites(ctx context.Context, in *QueryGetSubjectWithPrerequisitesRequest, opts ...grpc.CallOption) (*QueryGetSubjectWithPrerequisitesResponse, error)
	// ListSubjects lists all subjects with pagination
	ListSubjects(ctx context.Context, in *QueryListSubjectsRequest, opts ...grpc.CallOption) (*QueryListSubjectsResponse, error)
	// SubjectsByCourse lists all subjects for a specific course
	SubjectsByCourse(ctx context.Context, in *QuerySubjectsByCourseRequest, opts ...grpc.CallOption) (*QuerySubjectsByCourseResponse, error)
	// SubjectsByInstitution lists all subjects for a specific institution
	SubjectsByInstitution(ctx context.Context, in *QuerySubjectsByInstitutionRequest, opts ...grpc.CallOption) (*QuerySubjectsByInstitutionResponse, error)
	// CheckPrerequisites checks if a student meets the prerequisites for a subject via CosmWasm contract
	CheckPrerequisites(ctx context.Context, in *QueryCheckPrerequisitesRequest, opts ...grpc.CallOption) (*QueryCheckPrerequisitesResponse, error)
	// CheckEquivalence checks equivalence between two subjects via CosmWasm contract
	CheckEquivalence(ctx context.Context, in *QueryCheckEquivalenceRequest, opts ...grpc.CallOption) (*QueryCheckEquivalenceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSubject(ctx context.Context, in *QueryGetSubjectRequest, opts ...grpc.CallOption) (*QueryGetSubjectResponse, error) {
	out := new(QueryGetSubjectResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/GetSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSubjectFull(ctx context.Context, in *QueryGetSubjectFullRequest, opts ...grpc.CallOption) (*QueryGetSubjectFullResponse, error) {
	out := new(QueryGetSubjectFullResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/GetSubjectFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSubjectWithPrerequisites(ctx context.Context, in *QueryGetSubjectWithPrerequisitesRequest, opts ...grpc.CallOption) (*QueryGetSubjectWithPrerequisitesResponse, error) {
	out := new(QueryGetSubjectWithPrerequisitesResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/GetSubjectWithPrerequisites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListSubjects(ctx context.Context, in *QueryListSubjectsRequest, opts ...grpc.CallOption) (*QueryListSubjectsResponse, error) {
	out := new(QueryListSubjectsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/ListSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectsByCourse(ctx context.Context, in *QuerySubjectsByCourseRequest, opts ...grpc.CallOption) (*QuerySubjectsByCourseResponse, error) {
	out := new(QuerySubjectsByCourseResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/SubjectsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectsByInstitution(ctx context.Context, in *QuerySubjectsByInstitutionRequest, opts ...grpc.CallOption) (*QuerySubjectsByInstitutionResponse, error) {
	out := new(QuerySubjectsByInstitutionResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/SubjectsByInstitution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckPrerequisites(ctx context.Context, in *QueryCheckPrerequisitesRequest, opts ...grpc.CallOption) (*QueryCheckPrerequisitesResponse, error) {
	out := new(QueryCheckPrerequisitesResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/CheckPrerequisites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckEquivalence(ctx context.Context, in *QueryCheckEquivalenceRequest, opts ...grpc.CallOption) (*QueryCheckEquivalenceResponse, error) {
	out := new(QueryCheckEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Query/CheckEquivalence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetSubject queries a subject by its ID
	GetSubject(context.Context, *QueryGetSubjectRequest) (*QueryGetSubjectResponse, error)
	// GetSubjectFull queries a subject with full content from IPFS
	GetSubjectFull(context.Context, *QueryGetSubjectFullRequest) (*QueryGetSubjectFullResponse, error)
	// GetSubjectWithPrerequisites queries a subject with its prerequisite groups
	GetSubjectWithPrerequisites(context.Context, *QueryGetSubjectWithPrerequisitesRequest) (*QueryGetSubjectWithPrerequisitesResponse, error)
	// ListSubjects lists all subjects with pagination
	ListSubjects(context.Context, *QueryListSubjectsRequest) (*QueryListSubjectsResponse, error)
	// SubjectsByCourse lists all subjects for a specific course
	SubjectsByCourse(context.Context, *QuerySubjectsByCourseRequest) (*QuerySubjectsByCourseResponse, error)
	// SubjectsByInstitution lists all subjects for a specific institution
	SubjectsByInstitution(context.Context, *QuerySubjectsByInstitutionRequest) (*QuerySubjectsByInstitutionResponse, error)
	// CheckPrerequisites checks if a student meets the prerequisites for a subject via CosmWasm contract
	CheckPrerequisites(context.Context, *QueryCheckPrerequisitesRequest) (*QueryCheckPrerequisitesResponse, error)
	// CheckEquivalence checks equivalence between two subjects via CosmWasm contract
	CheckEquivalence(context.Context, *QueryCheckEquivalenceRequest) (*QueryCheckEquivalenceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetSubject(ctx context.Context, req *QueryGetSubjectRequest) (*QueryGetSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubject not implemented")
}
func (*UnimplementedQueryServer) GetSubjectFull(ctx context.Context, req *QueryGetSubjectFullRequest) (*QueryGetSubjectFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectFull not implemented")
}
func (*UnimplementedQueryServer) GetSubjectWithPrerequisites(ctx context.Context, req *QueryGetSubjectWithPrerequisitesRequest) (*QueryGetSubjectWithPrerequisitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectWithPrerequisites not implemented")
}
func (*UnimplementedQueryServer) ListSubjects(ctx context.Context, req *QueryListSubjectsRequest) (*QueryListSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubjects not implemented")
}
func (*UnimplementedQueryServer) SubjectsByCourse(ctx context.Context, req *QuerySubjectsByCourseRequest) (*QuerySubjectsByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectsByCourse not implemented")
}
func (*UnimplementedQueryServer) SubjectsByInstitution(ctx context.Context, req *QuerySubjectsByInstitutionRequest) (*QuerySubjectsByInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectsByInstitution not implemented")
}
func (*UnimplementedQueryServer) CheckPrerequisites(ctx context.Context, req *QueryCheckPrerequisitesRequest) (*QueryCheckPrerequisitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPrerequisites not implemented")
}
func (*UnimplementedQueryServer) CheckEquivalence(ctx context.Context, req *QueryCheckEquivalenceRequest) (*QueryCheckEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEquivalence not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/GetSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSubject(ctx, req.(*QueryGetSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSubjectFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubjectFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSubjectFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/GetSubjectFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSubjectFull(ctx, req.(*QueryGetSubjectFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSubjectWithPrerequisites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubjectWithPrerequisitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSubjectWithPrerequisites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/GetSubjectWithPrerequisites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSubjectWithPrerequisites(ctx, req.(*QueryGetSubjectWithPrerequisitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/ListSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListSubjects(ctx, req.(*QueryListSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectsByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/SubjectsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectsByCourse(ctx, req.(*QuerySubjectsByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectsByInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectsByInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectsByInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/SubjectsByInstitution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectsByInstitution(ctx, req.(*QuerySubjectsByInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckPrerequisites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckPrerequisitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckPrerequisites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/CheckPrerequisites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckPrerequisites(ctx, req.(*QueryCheckPrerequisitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckEquivalenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Query/CheckEquivalence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckEquivalence(ctx, req.(*QueryCheckEquivalenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.subject.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetSubject",
			Handler:    _Query_GetSubject_Handler,
		},
		{
			MethodName: "GetSubjectFull",
			Handler:    _Query_GetSubjectFull_Handler,
		},
		{
			MethodName: "GetSubjectWithPrerequisites",
			Handler:    _Query_GetSubjectWithPrerequisites_Handler,
		},
		{
			MethodName: "ListSubjects",
			Handler:    _Query_ListSubjects_Handler,
		},
		{
			MethodName: "SubjectsByCourse",
			Handler:    _Query_SubjectsByCourse_Handler,
		},
		{
			MethodName: "SubjectsByInstitution",
			Handler:    _Query_SubjectsByInstitution_Handler,
		},
		{
			MethodName: "CheckPrerequisites",
			Handler:    _Query_CheckPrerequisites_Handler,
		},
		{
			MethodName: "CheckEquivalence",
			Handler:    _Query_CheckEquivalence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/subject/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSubjectFullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubjectFullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubjectFullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSubjectFullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubjectFullResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubjectFullResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtendedContentJson) > 0 {
		i -= len(m.ExtendedContentJson)
		copy(dAtA[i:], m.ExtendedContentJson)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExtendedContentJson)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Subject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSubjectWithPrerequisitesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubjectWithPrerequisitesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubjectWithPrerequisitesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSubjectWithPrerequisitesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSubjectWithPrerequisitesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSubjectWithPrerequisitesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SubjectWithPrerequisites.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListSubjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListSubjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListSubjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListSubjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListSubjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListSubjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsByCourseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsByCourseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsByCourseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsByCourseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsByCourseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsByCourseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsByInstitutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsByInstitutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsByInstitutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InstitutionId) > 0 {
		i -= len(m.InstitutionId)
		copy(dAtA[i:], m.InstitutionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InstitutionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsByInstitutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsByInstitutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsByInstitutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckPrerequisitesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckPrerequisitesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckPrerequisitesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckPrerequisitesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckPrerequisitesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckPrerequisitesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MissingPrerequisites) > 0 {
		for iNdEx := len(m.MissingPrerequisites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MissingPrerequisites[iNdEx])
			copy(dAtA[i:], m.MissingPrerequisites[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.MissingPrerequisites[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.IsEligible {
		i--
		if m.IsEligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckEquivalenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckEquivalenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckEquivalenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForceRecalculate {
		i--
		if m.ForceRecalculate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.EquivalencePercent != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EquivalencePercent))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Subject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSubjectFullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubjectFullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Subject.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.ExtendedContentJson)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubjectWithPrerequisitesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSubjectWithPrerequisitesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SubjectWithPrerequisites.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListSubjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListSubjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsByCourseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsByCourseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsByInstitutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InstitutionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsByInstitutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckPrerequisitesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckPrerequisitesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsEligible {
		n += 2
	}
	if len(m.MissingPrerequisites) > 0 {
		for _, s := range m.MissingPrerequisites {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCheckEquivalenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ForceRecalculate {
		n += 2
	}
	return n
}

func (m *QueryCheckEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EquivalencePercent != 0 {
		n += 1 + sovQuery(uint64(m.EquivalencePercent))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubjectFullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubjectFullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubjectFullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubjectFullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubjectFullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubjectFullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Subject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedContentJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtendedContentJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubjectWithPrerequisitesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubjectWithPrerequisitesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubjectWithPrerequisitesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSubjectWithPrerequisitesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSubjectWithPrerequisitesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSubjectWithPrerequisitesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectWithPrerequisites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubjectWithPrerequisites.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListSubjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListSubjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListSubjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListSubjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListSubjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListSubjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, SubjectContent{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsByCourseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectsByCourseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectsByCourseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsByCourseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectsByCourseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectsByCourseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, SubjectContent{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsByInstitutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectsByInstitutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectsByInstitutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstitutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstitutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsByInstitutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectsByInstitutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectsByInstitutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, SubjectContent{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckPrerequisitesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckPrerequisitesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckPrerequisitesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckPrerequisitesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckPrerequisitesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckPrerequisitesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEligible = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingPrerequisites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissingPrerequisites = append(m.MissingPrerequisites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckEquivalenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckEquivalenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckEquivalenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceRecalculate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceRecalculate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
			}
			m.EquivalencePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquivalencePercent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
