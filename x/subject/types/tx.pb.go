// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/subject/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgCreateSubject struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Institution   string   `protobuf:"bytes,2,opt,name=institution,proto3" json:"institution,omitempty"`
	CourseId      string   `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Title         string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Code          string   `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	WorkloadHours uint64   `protobuf:"varint,6,opt,name=workloadHours,proto3" json:"workloadHours,omitempty"`
	Credits       uint64   `protobuf:"varint,7,opt,name=credits,proto3" json:"credits,omitempty"`
	Description   string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	SubjectType   string   `protobuf:"bytes,9,opt,name=subjectType,proto3" json:"subjectType,omitempty"`
	KnowledgeArea string   `protobuf:"bytes,10,opt,name=knowledgeArea,proto3" json:"knowledgeArea,omitempty"`
	Objectives    []string `protobuf:"bytes,11,rep,name=objectives,proto3" json:"objectives,omitempty"`
	TopicUnits    []string `protobuf:"bytes,12,rep,name=topicUnits,proto3" json:"topicUnits,omitempty"`
}

func (m *MsgCreateSubject) Reset()         { *m = MsgCreateSubject{} }
func (m *MsgCreateSubject) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubject) ProtoMessage()    {}
func (*MsgCreateSubject) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{2}
}
func (m *MsgCreateSubject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubject.Merge(m, src)
}
func (m *MsgCreateSubject) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubject proto.InternalMessageInfo

func (m *MsgCreateSubject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateSubject) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *MsgCreateSubject) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *MsgCreateSubject) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateSubject) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgCreateSubject) GetWorkloadHours() uint64 {
	if m != nil {
		return m.WorkloadHours
	}
	return 0
}

func (m *MsgCreateSubject) GetCredits() uint64 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *MsgCreateSubject) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateSubject) GetSubjectType() string {
	if m != nil {
		return m.SubjectType
	}
	return ""
}

func (m *MsgCreateSubject) GetKnowledgeArea() string {
	if m != nil {
		return m.KnowledgeArea
	}
	return ""
}

func (m *MsgCreateSubject) GetObjectives() []string {
	if m != nil {
		return m.Objectives
	}
	return nil
}

func (m *MsgCreateSubject) GetTopicUnits() []string {
	if m != nil {
		return m.TopicUnits
	}
	return nil
}

type MsgCreateSubjectResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgCreateSubjectResponse) Reset()         { *m = MsgCreateSubjectResponse{} }
func (m *MsgCreateSubjectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubjectResponse) ProtoMessage()    {}
func (*MsgCreateSubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{3}
}
func (m *MsgCreateSubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubjectResponse.Merge(m, src)
}
func (m *MsgCreateSubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubjectResponse proto.InternalMessageInfo

func (m *MsgCreateSubjectResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgCreateSubjectContent struct {
	Creator       string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Institution   string   `protobuf:"bytes,2,opt,name=institution,proto3" json:"institution,omitempty"`
	CourseId      string   `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Title         string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Code          string   `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	WorkloadHours uint64   `protobuf:"varint,6,opt,name=workloadHours,proto3" json:"workloadHours,omitempty"`
	Credits       uint64   `protobuf:"varint,7,opt,name=credits,proto3" json:"credits,omitempty"`
	Description   string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	SubjectType   string   `protobuf:"bytes,9,opt,name=subjectType,proto3" json:"subjectType,omitempty"`
	KnowledgeArea string   `protobuf:"bytes,10,opt,name=knowledgeArea,proto3" json:"knowledgeArea,omitempty"`
	Objectives    []string `protobuf:"bytes,11,rep,name=objectives,proto3" json:"objectives,omitempty"`
	TopicUnits    []string `protobuf:"bytes,12,rep,name=topicUnits,proto3" json:"topicUnits,omitempty"`
}

func (m *MsgCreateSubjectContent) Reset()         { *m = MsgCreateSubjectContent{} }
func (m *MsgCreateSubjectContent) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubjectContent) ProtoMessage()    {}
func (*MsgCreateSubjectContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{4}
}
func (m *MsgCreateSubjectContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubjectContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubjectContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubjectContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubjectContent.Merge(m, src)
}
func (m *MsgCreateSubjectContent) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubjectContent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubjectContent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubjectContent proto.InternalMessageInfo

func (m *MsgCreateSubjectContent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateSubjectContent) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *MsgCreateSubjectContent) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *MsgCreateSubjectContent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgCreateSubjectContent) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *MsgCreateSubjectContent) GetWorkloadHours() uint64 {
	if m != nil {
		return m.WorkloadHours
	}
	return 0
}

func (m *MsgCreateSubjectContent) GetCredits() uint64 {
	if m != nil {
		return m.Credits
	}
	return 0
}

func (m *MsgCreateSubjectContent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateSubjectContent) GetSubjectType() string {
	if m != nil {
		return m.SubjectType
	}
	return ""
}

func (m *MsgCreateSubjectContent) GetKnowledgeArea() string {
	if m != nil {
		return m.KnowledgeArea
	}
	return ""
}

func (m *MsgCreateSubjectContent) GetObjectives() []string {
	if m != nil {
		return m.Objectives
	}
	return nil
}

func (m *MsgCreateSubjectContent) GetTopicUnits() []string {
	if m != nil {
		return m.TopicUnits
	}
	return nil
}

type MsgCreateSubjectContentResponse struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *MsgCreateSubjectContentResponse) Reset()         { *m = MsgCreateSubjectContentResponse{} }
func (m *MsgCreateSubjectContentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSubjectContentResponse) ProtoMessage()    {}
func (*MsgCreateSubjectContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{5}
}
func (m *MsgCreateSubjectContentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSubjectContentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSubjectContentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSubjectContentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSubjectContentResponse.Merge(m, src)
}
func (m *MsgCreateSubjectContentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSubjectContentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSubjectContentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSubjectContentResponse proto.InternalMessageInfo

func (m *MsgCreateSubjectContentResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type MsgAddPrerequisiteGroup struct {
	Creator                  string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SubjectId                string   `protobuf:"bytes,2,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
	GroupType                string   `protobuf:"bytes,3,opt,name=groupType,proto3" json:"groupType,omitempty"`
	MinimumCredits           uint64   `protobuf:"varint,4,opt,name=minimumCredits,proto3" json:"minimumCredits,omitempty"`
	MinimumCompletedSubjects uint64   `protobuf:"varint,5,opt,name=minimumCompletedSubjects,proto3" json:"minimumCompletedSubjects,omitempty"`
	SubjectIds               []string `protobuf:"bytes,6,rep,name=subjectIds,proto3" json:"subjectIds,omitempty"`
}

func (m *MsgAddPrerequisiteGroup) Reset()         { *m = MsgAddPrerequisiteGroup{} }
func (m *MsgAddPrerequisiteGroup) String() string { return proto.CompactTextString(m) }
func (*MsgAddPrerequisiteGroup) ProtoMessage()    {}
func (*MsgAddPrerequisiteGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{6}
}
func (m *MsgAddPrerequisiteGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPrerequisiteGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPrerequisiteGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPrerequisiteGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPrerequisiteGroup.Merge(m, src)
}
func (m *MsgAddPrerequisiteGroup) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPrerequisiteGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPrerequisiteGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPrerequisiteGroup proto.InternalMessageInfo

func (m *MsgAddPrerequisiteGroup) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddPrerequisiteGroup) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *MsgAddPrerequisiteGroup) GetGroupType() string {
	if m != nil {
		return m.GroupType
	}
	return ""
}

func (m *MsgAddPrerequisiteGroup) GetMinimumCredits() uint64 {
	if m != nil {
		return m.MinimumCredits
	}
	return 0
}

func (m *MsgAddPrerequisiteGroup) GetMinimumCompletedSubjects() uint64 {
	if m != nil {
		return m.MinimumCompletedSubjects
	}
	return 0
}

func (m *MsgAddPrerequisiteGroup) GetSubjectIds() []string {
	if m != nil {
		return m.SubjectIds
	}
	return nil
}

type MsgAddPrerequisiteGroupResponse struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *MsgAddPrerequisiteGroupResponse) Reset()         { *m = MsgAddPrerequisiteGroupResponse{} }
func (m *MsgAddPrerequisiteGroupResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddPrerequisiteGroupResponse) ProtoMessage()    {}
func (*MsgAddPrerequisiteGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{7}
}
func (m *MsgAddPrerequisiteGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddPrerequisiteGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddPrerequisiteGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddPrerequisiteGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddPrerequisiteGroupResponse.Merge(m, src)
}
func (m *MsgAddPrerequisiteGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddPrerequisiteGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddPrerequisiteGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddPrerequisiteGroupResponse proto.InternalMessageInfo

func (m *MsgAddPrerequisiteGroupResponse) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type MsgUpdateSubjectContent struct {
	Creator                   string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SubjectId                 string   `protobuf:"bytes,2,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
	Objectives                []string `protobuf:"bytes,3,rep,name=objectives,proto3" json:"objectives,omitempty"`
	TopicUnits                []string `protobuf:"bytes,4,rep,name=topicUnits,proto3" json:"topicUnits,omitempty"`
	Methodologies             []string `protobuf:"bytes,5,rep,name=methodologies,proto3" json:"methodologies,omitempty"`
	EvaluationMethods         []string `protobuf:"bytes,6,rep,name=evaluationMethods,proto3" json:"evaluationMethods,omitempty"`
	BibliographyBasic         []string `protobuf:"bytes,7,rep,name=bibliographyBasic,proto3" json:"bibliographyBasic,omitempty"`
	BibliographyComplementary []string `protobuf:"bytes,8,rep,name=bibliographyComplementary,proto3" json:"bibliographyComplementary,omitempty"`
	Keywords                  []string `protobuf:"bytes,9,rep,name=keywords,proto3" json:"keywords,omitempty"`
	ContentHash               string   `protobuf:"bytes,10,opt,name=contentHash,proto3" json:"contentHash,omitempty"`
	IpfsLink                  string   `protobuf:"bytes,11,opt,name=ipfsLink,proto3" json:"ipfsLink,omitempty"`
}

func (m *MsgUpdateSubjectContent) Reset()         { *m = MsgUpdateSubjectContent{} }
func (m *MsgUpdateSubjectContent) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubjectContent) ProtoMessage()    {}
func (*MsgUpdateSubjectContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{8}
}
func (m *MsgUpdateSubjectContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubjectContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubjectContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubjectContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubjectContent.Merge(m, src)
}
func (m *MsgUpdateSubjectContent) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubjectContent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubjectContent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubjectContent proto.InternalMessageInfo

func (m *MsgUpdateSubjectContent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateSubjectContent) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *MsgUpdateSubjectContent) GetObjectives() []string {
	if m != nil {
		return m.Objectives
	}
	return nil
}

func (m *MsgUpdateSubjectContent) GetTopicUnits() []string {
	if m != nil {
		return m.TopicUnits
	}
	return nil
}

func (m *MsgUpdateSubjectContent) GetMethodologies() []string {
	if m != nil {
		return m.Methodologies
	}
	return nil
}

func (m *MsgUpdateSubjectContent) GetEvaluationMethods() []string {
	if m != nil {
		return m.EvaluationMethods
	}
	return nil
}

func (m *MsgUpdateSubjectContent) GetBibliographyBasic() []string {
	if m != nil {
		return m.BibliographyBasic
	}
	return nil
}

func (m *MsgUpdateSubjectContent) GetBibliographyComplementary() []string {
	if m != nil {
		return m.BibliographyComplementary
	}
	return nil
}

func (m *MsgUpdateSubjectContent) GetKeywords() []string {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *MsgUpdateSubjectContent) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

func (m *MsgUpdateSubjectContent) GetIpfsLink() string {
	if m != nil {
		return m.IpfsLink
	}
	return ""
}

type MsgUpdateSubjectContentResponse struct {
	ContentHash string `protobuf:"bytes,1,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	IpfsLink    string `protobuf:"bytes,2,opt,name=ipfs_link,json=ipfsLink,proto3" json:"ipfs_link,omitempty"`
}

func (m *MsgUpdateSubjectContentResponse) Reset()         { *m = MsgUpdateSubjectContentResponse{} }
func (m *MsgUpdateSubjectContentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSubjectContentResponse) ProtoMessage()    {}
func (*MsgUpdateSubjectContentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89020d5ee5d8c1e, []int{9}
}
func (m *MsgUpdateSubjectContentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSubjectContentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSubjectContentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSubjectContentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSubjectContentResponse.Merge(m, src)
}
func (m *MsgUpdateSubjectContentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSubjectContentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSubjectContentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSubjectContentResponse proto.InternalMessageInfo

func (m *MsgUpdateSubjectContentResponse) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

func (m *MsgUpdateSubjectContentResponse) GetIpfsLink() string {
	if m != nil {
		return m.IpfsLink
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "academictoken.subject.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "academictoken.subject.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateSubject)(nil), "academictoken.subject.MsgCreateSubject")
	proto.RegisterType((*MsgCreateSubjectResponse)(nil), "academictoken.subject.MsgCreateSubjectResponse")
	proto.RegisterType((*MsgCreateSubjectContent)(nil), "academictoken.subject.MsgCreateSubjectContent")
	proto.RegisterType((*MsgCreateSubjectContentResponse)(nil), "academictoken.subject.MsgCreateSubjectContentResponse")
	proto.RegisterType((*MsgAddPrerequisiteGroup)(nil), "academictoken.subject.MsgAddPrerequisiteGroup")
	proto.RegisterType((*MsgAddPrerequisiteGroupResponse)(nil), "academictoken.subject.MsgAddPrerequisiteGroupResponse")
	proto.RegisterType((*MsgUpdateSubjectContent)(nil), "academictoken.subject.MsgUpdateSubjectContent")
	proto.RegisterType((*MsgUpdateSubjectContentResponse)(nil), "academictoken.subject.MsgUpdateSubjectContentResponse")
}

func init() { proto.RegisterFile("academictoken/subject/tx.proto", fileDescriptor_c89020d5ee5d8c1e) }

var fileDescriptor_c89020d5ee5d8c1e = []byte{
	// 943 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xc6, 0x4e, 0xe2, 0x9d, 0xa4, 0x40, 0x47, 0x46, 0x9d, 0xb8, 0xd4, 0x35, 0x16, 0x6a,
	0xa3, 0x08, 0x6c, 0x28, 0x52, 0x2b, 0x45, 0x3d, 0x34, 0xc9, 0x81, 0x46, 0x22, 0x52, 0xe5, 0xd2,
	0x0b, 0x97, 0x68, 0xb2, 0x33, 0x5d, 0x0f, 0xf6, 0xee, 0x2c, 0x33, 0xe3, 0x24, 0xbe, 0x54, 0xc0,
	0x11, 0x09, 0x89, 0x8f, 0xc1, 0x31, 0x07, 0x2e, 0x7c, 0x02, 0x72, 0x8c, 0x38, 0x71, 0x02, 0x94,
	0x1c, 0xf2, 0x35, 0xd0, 0xfc, 0xb1, 0xbd, 0xbb, 0x59, 0x3b, 0xe6, 0xc2, 0xa9, 0x97, 0xc4, 0xef,
	0xf7, 0x7b, 0x33, 0xef, 0xcd, 0xfb, 0xbd, 0x37, 0xb3, 0xa0, 0x8e, 0x03, 0x4c, 0x68, 0xc4, 0x02,
	0xc5, 0x7b, 0x34, 0x6e, 0xcb, 0xc1, 0xe1, 0x37, 0x34, 0x50, 0x6d, 0x75, 0xd2, 0x4a, 0x04, 0x57,
	0x1c, 0xbe, 0x9f, 0xe1, 0x5b, 0x8e, 0xaf, 0xdd, 0xc6, 0x11, 0x8b, 0x79, 0xdb, 0xfc, 0xb5, 0x9e,
	0xb5, 0x3b, 0x01, 0x97, 0x11, 0x97, 0xed, 0x48, 0x86, 0xed, 0xa3, 0xcf, 0xf4, 0x3f, 0x47, 0xac,
	0x5b, 0xe2, 0xc0, 0x58, 0x6d, 0x6b, 0x38, 0xaa, 0x1a, 0xf2, 0x90, 0x5b, 0x5c, 0xff, 0x72, 0x68,
	0xb3, 0x38, 0xa7, 0x04, 0x0b, 0x1c, 0xb9, 0x95, 0xcd, 0xdf, 0x3d, 0xf0, 0xee, 0xbe, 0x0c, 0x5f,
	0x25, 0x04, 0x2b, 0xfa, 0xc2, 0x30, 0xf0, 0x31, 0xf0, 0xf1, 0x40, 0x75, 0xb9, 0x60, 0x6a, 0x88,
	0xbc, 0x86, 0xb7, 0xe1, 0xef, 0xa0, 0x3f, 0x7e, 0xfd, 0xa4, 0xea, 0x42, 0x6e, 0x13, 0x22, 0xa8,
	0x94, 0x2f, 0x95, 0x60, 0x71, 0xd8, 0x99, 0xb8, 0xc2, 0x67, 0x60, 0xd9, 0xee, 0x8d, 0x16, 0x1b,
	0xde, 0xc6, 0xea, 0xa3, 0x7b, 0xad, 0xc2, 0x43, 0xb7, 0x6c, 0x98, 0x1d, 0xff, 0xec, 0xaf, 0xfb,
	0x0b, 0xbf, 0x5c, 0x9d, 0x6e, 0x7a, 0x1d, 0xb7, 0x6e, 0x6b, 0xeb, 0x87, 0xab, 0xd3, 0xcd, 0xc9,
	0x8e, 0x3f, 0x5e, 0x9d, 0x6e, 0x3e, 0xcc, 0x1e, 0xe2, 0x64, 0x7c, 0x8c, 0x5c, 0xd6, 0xcd, 0x75,
	0x70, 0x27, 0x07, 0x75, 0xa8, 0x4c, 0x78, 0x2c, 0x69, 0xf3, 0xa7, 0x12, 0x78, 0x6f, 0x5f, 0x86,
	0xbb, 0x82, 0x62, 0x45, 0x5f, 0xda, 0xf5, 0x10, 0x81, 0x95, 0x40, 0x03, 0x5c, 0xd8, 0x33, 0x76,
	0x46, 0x26, 0x6c, 0x80, 0x55, 0x16, 0x4b, 0xc5, 0xd4, 0x40, 0x31, 0x1e, 0x9b, 0xc3, 0xf8, 0x9d,
	0x34, 0x04, 0xef, 0x02, 0x3f, 0xe0, 0x03, 0x21, 0xe9, 0x01, 0x23, 0xa8, 0x64, 0xf8, 0x8a, 0x05,
	0xf6, 0x08, 0xac, 0x82, 0x25, 0xc5, 0x54, 0x9f, 0xa2, 0xb2, 0x21, 0xac, 0x01, 0x21, 0x28, 0x07,
	0x9c, 0x50, 0xb4, 0x64, 0x40, 0xf3, 0x1b, 0x7e, 0x04, 0x6e, 0x1d, 0x73, 0xd1, 0xeb, 0x73, 0x4c,
	0x9e, 0xeb, 0xd5, 0x68, 0xb9, 0xe1, 0x6d, 0x94, 0x3b, 0x59, 0xd0, 0x25, 0x4a, 0x98, 0x92, 0x68,
	0xc5, 0xf0, 0x23, 0x53, 0x27, 0x4a, 0xa8, 0x0c, 0x04, 0x4b, 0x4c, 0xa2, 0x15, 0x9b, 0x68, 0x0a,
	0xd2, 0x1e, 0xae, 0x5e, 0x5f, 0x0d, 0x13, 0x8a, 0x7c, 0xeb, 0x91, 0x82, 0x74, 0x0e, 0xbd, 0x98,
	0x1f, 0xf7, 0x29, 0x09, 0xe9, 0xb6, 0xa0, 0x18, 0x01, 0xe3, 0x93, 0x05, 0x61, 0x1d, 0x00, 0x6e,
	0xd6, 0xb0, 0x23, 0x2a, 0xd1, 0x6a, 0xa3, 0xb4, 0xe1, 0x77, 0x52, 0x88, 0xe6, 0x15, 0x4f, 0x58,
	0xf0, 0x2a, 0xd6, 0x69, 0xae, 0x59, 0x7e, 0x82, 0x6c, 0xad, 0x69, 0x61, 0x47, 0x05, 0x6e, 0x7e,
	0x0a, 0x50, 0x5e, 0x8e, 0x91, 0x56, 0xba, 0x7a, 0x2c, 0x26, 0xf4, 0xc4, 0x89, 0x62, 0x8d, 0xe6,
	0x59, 0xc9, 0xa8, 0x9b, 0x59, 0xb2, 0xcb, 0x63, 0x45, 0xe3, 0xb7, 0x42, 0xfe, 0xaf, 0x42, 0x3e,
	0x4b, 0x0b, 0xa9, 0xe7, 0xb3, 0x3d, 0x63, 0x3e, 0x8b, 0xe4, 0x6a, 0x3e, 0x01, 0xf7, 0xa7, 0x50,
	0x37, 0xf4, 0xc0, 0xf7, 0x8b, 0xa6, 0x07, 0xb6, 0x09, 0x79, 0x21, 0xa8, 0xa0, 0xdf, 0x0e, 0x98,
	0x64, 0x8a, 0x7e, 0x21, 0xf8, 0x20, 0x99, 0xd1, 0x03, 0x1f, 0x00, 0xdf, 0x65, 0xb4, 0x47, 0x5c,
	0x07, 0x4c, 0x00, 0xcd, 0x86, 0x7a, 0x03, 0x53, 0x54, 0xab, 0xff, 0x04, 0x80, 0x0f, 0xc0, 0x3b,
	0x11, 0x8b, 0x59, 0x34, 0x88, 0x76, 0x9d, 0x6e, 0x65, 0xa3, 0x5b, 0x0e, 0x85, 0x5b, 0x00, 0x8d,
	0x10, 0x1e, 0x25, 0x7d, 0xaa, 0x28, 0x71, 0x27, 0x93, 0xa6, 0x4d, 0xca, 0x9d, 0xa9, 0xbc, 0x2e,
	0xf8, 0x38, 0x1d, 0xdd, 0x37, 0xa6, 0xe0, 0x13, 0x24, 0x37, 0x39, 0x4f, 0x4d, 0xf1, 0x8a, 0x4a,
	0x30, 0x2e, 0xde, 0x3a, 0xa8, 0x98, 0x13, 0xe8, 0x8e, 0x76, 0xb5, 0x30, 0xf6, 0x1e, 0x69, 0xfe,
	0x56, 0x4a, 0xdd, 0x91, 0x73, 0x4f, 0xd1, 0xec, 0x0a, 0x66, 0x1b, 0xaa, 0x74, 0x43, 0x43, 0x95,
	0xf3, 0x0d, 0xa5, 0xdb, 0x36, 0xa2, 0xaa, 0xcb, 0x09, 0xef, 0xf3, 0x90, 0x51, 0x5d, 0x30, 0xed,
	0x92, 0x05, 0xe1, 0xc7, 0xe0, 0x36, 0x3d, 0xc2, 0xfd, 0x01, 0xd6, 0xc3, 0xb0, 0x6f, 0xa8, 0x51,
	0xb1, 0xae, 0x13, 0xda, 0xfb, 0x90, 0x1d, 0xf6, 0x19, 0x0f, 0x05, 0x4e, 0xba, 0xc3, 0x1d, 0x2c,
	0x59, 0x80, 0x56, 0xac, 0xf7, 0x35, 0x02, 0x3e, 0x05, 0xeb, 0x69, 0xd0, 0x4a, 0x14, 0xd1, 0x58,
	0x61, 0x31, 0x44, 0x15, 0xb3, 0x6a, 0xba, 0x03, 0xac, 0x81, 0x4a, 0x8f, 0x0e, 0x8f, 0xb9, 0x20,
	0x12, 0xf9, 0xc6, 0x79, 0x6c, 0xeb, 0xa1, 0x0d, 0x6c, 0x79, 0x9f, 0x63, 0xd9, 0x75, 0x03, 0x99,
	0x86, 0xf4, 0x6a, 0x96, 0xbc, 0x96, 0x5f, 0xb2, 0xb8, 0x87, 0x56, 0xed, 0xf5, 0x33, 0xb2, 0x73,
	0xca, 0x63, 0xa3, 0x7c, 0x91, 0x74, 0x63, 0xe5, 0x3f, 0x04, 0x6b, 0x6e, 0xef, 0x83, 0xae, 0x8e,
	0xe7, 0x5d, 0x8f, 0x77, 0x17, 0xf8, 0x7a, 0xff, 0x83, 0xbe, 0x0e, 0xb8, 0x98, 0x0d, 0xf8, 0xe8,
	0xef, 0x32, 0x28, 0xed, 0xcb, 0x10, 0xbe, 0x06, 0x6b, 0x99, 0xef, 0x81, 0x07, 0x53, 0xde, 0xf1,
	0xdc, 0x73, 0x5b, 0x6b, 0xcd, 0xe7, 0x37, 0xce, 0x97, 0x81, 0x5b, 0xd9, 0x27, 0xf9, 0xe1, 0xf4,
	0x0d, 0x32, 0x8e, 0xb5, 0xf6, 0x9c, 0x8e, 0xe3, 0x50, 0x6f, 0x40, 0xb5, 0xf0, 0xed, 0x68, 0xcd,
	0xb9, 0x91, 0xf3, 0xaf, 0x3d, 0xfe, 0x6f, 0xfe, 0xe9, 0xf8, 0x85, 0xf7, 0xd6, 0x8c, 0xf8, 0x45,
	0xfe, 0xb3, 0xe2, 0xcf, 0xbc, 0x14, 0xde, 0x80, 0x6a, 0xe1, 0xd4, 0xdf, 0x28, 0xd9, 0xfc, 0xe7,
	0x9f, 0xd5, 0x9a, 0xb5, 0xa5, 0xef, 0xf4, 0x77, 0xde, 0xce, 0x93, 0xb3, 0x8b, 0xba, 0x77, 0x7e,
	0x51, 0xf7, 0xfe, 0xb9, 0xa8, 0x7b, 0x3f, 0x5f, 0xd6, 0x17, 0xce, 0x2f, 0xeb, 0x0b, 0x7f, 0x5e,
	0xd6, 0x17, 0xbe, 0xbe, 0x37, 0xed, 0x19, 0x51, 0xc3, 0x84, 0xca, 0xc3, 0x65, 0xf3, 0xb5, 0xfa,
	0xf9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x44, 0x13, 0x45, 0x90, 0x67, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateSubject(ctx context.Context, in *MsgCreateSubject, opts ...grpc.CallOption) (*MsgCreateSubjectResponse, error)
	CreateSubjectContent(ctx context.Context, in *MsgCreateSubjectContent, opts ...grpc.CallOption) (*MsgCreateSubjectContentResponse, error)
	AddPrerequisiteGroup(ctx context.Context, in *MsgAddPrerequisiteGroup, opts ...grpc.CallOption) (*MsgAddPrerequisiteGroupResponse, error)
	UpdateSubjectContent(ctx context.Context, in *MsgUpdateSubjectContent, opts ...grpc.CallOption) (*MsgUpdateSubjectContentResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSubject(ctx context.Context, in *MsgCreateSubject, opts ...grpc.CallOption) (*MsgCreateSubjectResponse, error) {
	out := new(MsgCreateSubjectResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Msg/CreateSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateSubjectContent(ctx context.Context, in *MsgCreateSubjectContent, opts ...grpc.CallOption) (*MsgCreateSubjectContentResponse, error) {
	out := new(MsgCreateSubjectContentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Msg/CreateSubjectContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddPrerequisiteGroup(ctx context.Context, in *MsgAddPrerequisiteGroup, opts ...grpc.CallOption) (*MsgAddPrerequisiteGroupResponse, error) {
	out := new(MsgAddPrerequisiteGroupResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Msg/AddPrerequisiteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSubjectContent(ctx context.Context, in *MsgUpdateSubjectContent, opts ...grpc.CallOption) (*MsgUpdateSubjectContentResponse, error) {
	out := new(MsgUpdateSubjectContentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.subject.Msg/UpdateSubjectContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateSubject(context.Context, *MsgCreateSubject) (*MsgCreateSubjectResponse, error)
	CreateSubjectContent(context.Context, *MsgCreateSubjectContent) (*MsgCreateSubjectContentResponse, error)
	AddPrerequisiteGroup(context.Context, *MsgAddPrerequisiteGroup) (*MsgAddPrerequisiteGroupResponse, error)
	UpdateSubjectContent(context.Context, *MsgUpdateSubjectContent) (*MsgUpdateSubjectContentResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateSubject(ctx context.Context, req *MsgCreateSubject) (*MsgCreateSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubject not implemented")
}
func (*UnimplementedMsgServer) CreateSubjectContent(ctx context.Context, req *MsgCreateSubjectContent) (*MsgCreateSubjectContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubjectContent not implemented")
}
func (*UnimplementedMsgServer) AddPrerequisiteGroup(ctx context.Context, req *MsgAddPrerequisiteGroup) (*MsgAddPrerequisiteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrerequisiteGroup not implemented")
}
func (*UnimplementedMsgServer) UpdateSubjectContent(ctx context.Context, req *MsgUpdateSubjectContent) (*MsgUpdateSubjectContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubjectContent not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSubject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Msg/CreateSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSubject(ctx, req.(*MsgCreateSubject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateSubjectContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSubjectContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSubjectContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Msg/CreateSubjectContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSubjectContent(ctx, req.(*MsgCreateSubjectContent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddPrerequisiteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddPrerequisiteGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddPrerequisiteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Msg/AddPrerequisiteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddPrerequisiteGroup(ctx, req.(*MsgAddPrerequisiteGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSubjectContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSubjectContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSubjectContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.subject.Msg/UpdateSubjectContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSubjectContent(ctx, req.(*MsgUpdateSubjectContent))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.subject.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateSubject",
			Handler:    _Msg_CreateSubject_Handler,
		},
		{
			MethodName: "CreateSubjectContent",
			Handler:    _Msg_CreateSubjectContent_Handler,
		},
		{
			MethodName: "AddPrerequisiteGroup",
			Handler:    _Msg_AddPrerequisiteGroup_Handler,
		},
		{
			MethodName: "UpdateSubjectContent",
			Handler:    _Msg_UpdateSubjectContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/subject/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopicUnits) > 0 {
		for iNdEx := len(m.TopicUnits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicUnits[iNdEx])
			copy(dAtA[i:], m.TopicUnits[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TopicUnits[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Objectives) > 0 {
		for iNdEx := len(m.Objectives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Objectives[iNdEx])
			copy(dAtA[i:], m.Objectives[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Objectives[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.KnowledgeArea) > 0 {
		i -= len(m.KnowledgeArea)
		copy(dAtA[i:], m.KnowledgeArea)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KnowledgeArea)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SubjectType) > 0 {
		i -= len(m.SubjectType)
		copy(dAtA[i:], m.SubjectType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if m.Credits != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Credits))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkloadHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkloadHours))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubjectContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubjectContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubjectContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopicUnits) > 0 {
		for iNdEx := len(m.TopicUnits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicUnits[iNdEx])
			copy(dAtA[i:], m.TopicUnits[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TopicUnits[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Objectives) > 0 {
		for iNdEx := len(m.Objectives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Objectives[iNdEx])
			copy(dAtA[i:], m.Objectives[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Objectives[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.KnowledgeArea) > 0 {
		i -= len(m.KnowledgeArea)
		copy(dAtA[i:], m.KnowledgeArea)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KnowledgeArea)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SubjectType) > 0 {
		i -= len(m.SubjectType)
		copy(dAtA[i:], m.SubjectType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x42
	}
	if m.Credits != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Credits))
		i--
		dAtA[i] = 0x38
	}
	if m.WorkloadHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkloadHours))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSubjectContentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSubjectContentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSubjectContentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddPrerequisiteGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPrerequisiteGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPrerequisiteGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectIds) > 0 {
		for iNdEx := len(m.SubjectIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectIds[iNdEx])
			copy(dAtA[i:], m.SubjectIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MinimumCompletedSubjects != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinimumCompletedSubjects))
		i--
		dAtA[i] = 0x28
	}
	if m.MinimumCredits != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinimumCredits))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GroupType) > 0 {
		i -= len(m.GroupType)
		copy(dAtA[i:], m.GroupType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddPrerequisiteGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddPrerequisiteGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddPrerequisiteGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubjectContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubjectContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubjectContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpfsLink) > 0 {
		i -= len(m.IpfsLink)
		copy(dAtA[i:], m.IpfsLink)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IpfsLink)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ContentHash) > 0 {
		i -= len(m.ContentHash)
		copy(dAtA[i:], m.ContentHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContentHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Keywords) > 0 {
		for iNdEx := len(m.Keywords) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keywords[iNdEx])
			copy(dAtA[i:], m.Keywords[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Keywords[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.BibliographyComplementary) > 0 {
		for iNdEx := len(m.BibliographyComplementary) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BibliographyComplementary[iNdEx])
			copy(dAtA[i:], m.BibliographyComplementary[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.BibliographyComplementary[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.BibliographyBasic) > 0 {
		for iNdEx := len(m.BibliographyBasic) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BibliographyBasic[iNdEx])
			copy(dAtA[i:], m.BibliographyBasic[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.BibliographyBasic[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.EvaluationMethods) > 0 {
		for iNdEx := len(m.EvaluationMethods) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EvaluationMethods[iNdEx])
			copy(dAtA[i:], m.EvaluationMethods[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.EvaluationMethods[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Methodologies) > 0 {
		for iNdEx := len(m.Methodologies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Methodologies[iNdEx])
			copy(dAtA[i:], m.Methodologies[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Methodologies[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TopicUnits) > 0 {
		for iNdEx := len(m.TopicUnits) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicUnits[iNdEx])
			copy(dAtA[i:], m.TopicUnits[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.TopicUnits[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Objectives) > 0 {
		for iNdEx := len(m.Objectives) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Objectives[iNdEx])
			copy(dAtA[i:], m.Objectives[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Objectives[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSubjectContentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSubjectContentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSubjectContentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IpfsLink) > 0 {
		i -= len(m.IpfsLink)
		copy(dAtA[i:], m.IpfsLink)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IpfsLink)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContentHash) > 0 {
		i -= len(m.ContentHash)
		copy(dAtA[i:], m.ContentHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContentHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateSubject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WorkloadHours != 0 {
		n += 1 + sovTx(uint64(m.WorkloadHours))
	}
	if m.Credits != 0 {
		n += 1 + sovTx(uint64(m.Credits))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubjectType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KnowledgeArea)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Objectives) > 0 {
		for _, s := range m.Objectives {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.TopicUnits) > 0 {
		for _, s := range m.TopicUnits {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateSubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSubjectContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WorkloadHours != 0 {
		n += 1 + sovTx(uint64(m.WorkloadHours))
	}
	if m.Credits != 0 {
		n += 1 + sovTx(uint64(m.Credits))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubjectType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KnowledgeArea)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Objectives) > 0 {
		for _, s := range m.Objectives {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.TopicUnits) > 0 {
		for _, s := range m.TopicUnits {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateSubjectContentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddPrerequisiteGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GroupType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinimumCredits != 0 {
		n += 1 + sovTx(uint64(m.MinimumCredits))
	}
	if m.MinimumCompletedSubjects != 0 {
		n += 1 + sovTx(uint64(m.MinimumCompletedSubjects))
	}
	if len(m.SubjectIds) > 0 {
		for _, s := range m.SubjectIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddPrerequisiteGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSubjectContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Objectives) > 0 {
		for _, s := range m.Objectives {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.TopicUnits) > 0 {
		for _, s := range m.TopicUnits {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Methodologies) > 0 {
		for _, s := range m.Methodologies {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.EvaluationMethods) > 0 {
		for _, s := range m.EvaluationMethods {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BibliographyBasic) > 0 {
		for _, s := range m.BibliographyBasic {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.BibliographyComplementary) > 0 {
		for _, s := range m.BibliographyComplementary {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.ContentHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IpfsLink)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateSubjectContentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContentHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IpfsLink)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadHours", wireType)
			}
			m.WorkloadHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkloadHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnowledgeArea", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KnowledgeArea = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objectives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objectives = append(m.Objectives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicUnits = append(m.TopicUnits, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubjectContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubjectContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubjectContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkloadHours", wireType)
			}
			m.WorkloadHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkloadHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credits", wireType)
			}
			m.Credits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnowledgeArea", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KnowledgeArea = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objectives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objectives = append(m.Objectives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicUnits = append(m.TopicUnits, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSubjectContentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSubjectContentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSubjectContentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPrerequisiteGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPrerequisiteGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPrerequisiteGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCredits", wireType)
			}
			m.MinimumCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCompletedSubjects", wireType)
			}
			m.MinimumCompletedSubjects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumCompletedSubjects |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectIds = append(m.SubjectIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddPrerequisiteGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddPrerequisiteGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddPrerequisiteGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubjectContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubjectContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubjectContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Objectives", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Objectives = append(m.Objectives, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicUnits = append(m.TopicUnits, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Methodologies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Methodologies = append(m.Methodologies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvaluationMethods", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvaluationMethods = append(m.EvaluationMethods, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BibliographyBasic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BibliographyBasic = append(m.BibliographyBasic, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BibliographyComplementary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BibliographyComplementary = append(m.BibliographyComplementary, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSubjectContentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSubjectContentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSubjectContentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
