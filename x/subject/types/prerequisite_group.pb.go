// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/subject/prerequisite_group.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrerequisiteGroup struct {
	Id                       string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SubjectId                string   `protobuf:"bytes,2,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
	GroupType                string   `protobuf:"bytes,3,opt,name=groupType,proto3" json:"groupType,omitempty"`
	MinimumCredits           uint64   `protobuf:"varint,4,opt,name=minimumCredits,proto3" json:"minimumCredits,omitempty"`
	MinimumCompletedSubjects uint64   `protobuf:"varint,5,opt,name=minimumCompletedSubjects,proto3" json:"minimumCompletedSubjects,omitempty"`
	SubjectIds               []string `protobuf:"bytes,6,rep,name=subjectIds,proto3" json:"subjectIds,omitempty"`
}

func (m *PrerequisiteGroup) Reset()         { *m = PrerequisiteGroup{} }
func (m *PrerequisiteGroup) String() string { return proto.CompactTextString(m) }
func (*PrerequisiteGroup) ProtoMessage()    {}
func (*PrerequisiteGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f8ea8e768991ad4, []int{0}
}
func (m *PrerequisiteGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrerequisiteGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrerequisiteGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrerequisiteGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrerequisiteGroup.Merge(m, src)
}
func (m *PrerequisiteGroup) XXX_Size() int {
	return m.Size()
}
func (m *PrerequisiteGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_PrerequisiteGroup.DiscardUnknown(m)
}

var xxx_messageInfo_PrerequisiteGroup proto.InternalMessageInfo

func (m *PrerequisiteGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrerequisiteGroup) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *PrerequisiteGroup) GetGroupType() string {
	if m != nil {
		return m.GroupType
	}
	return ""
}

func (m *PrerequisiteGroup) GetMinimumCredits() uint64 {
	if m != nil {
		return m.MinimumCredits
	}
	return 0
}

func (m *PrerequisiteGroup) GetMinimumCompletedSubjects() uint64 {
	if m != nil {
		return m.MinimumCompletedSubjects
	}
	return 0
}

func (m *PrerequisiteGroup) GetSubjectIds() []string {
	if m != nil {
		return m.SubjectIds
	}
	return nil
}

func init() {
	proto.RegisterType((*PrerequisiteGroup)(nil), "academictoken.subject.PrerequisiteGroup")
}

func init() {
	proto.RegisterFile("academictoken/subject/prerequisite_group.proto", fileDescriptor_9f8ea8e768991ad4)
}

var fileDescriptor_9f8ea8e768991ad4 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4b, 0x4c, 0x4e, 0x4c,
	0x49, 0xcd, 0xcd, 0x4c, 0x2e, 0xc9, 0xcf, 0x4e, 0xcd, 0xd3, 0x2f, 0x2e, 0x4d, 0xca, 0x4a, 0x4d,
	0x2e, 0xd1, 0x2f, 0x28, 0x4a, 0x2d, 0x4a, 0x2d, 0x2c, 0xcd, 0x2c, 0xce, 0x2c, 0x49, 0x8d, 0x4f,
	0x2f, 0xca, 0x2f, 0x2d, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x45, 0x51, 0xaf, 0x07,
	0x55, 0xaf, 0xf4, 0x98, 0x91, 0x4b, 0x30, 0x00, 0x49, 0x8f, 0x3b, 0x48, 0x8b, 0x10, 0x1f, 0x17,
	0x53, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x53, 0x66, 0x8a, 0x90, 0x0c, 0x17,
	0x27, 0x54, 0x83, 0x67, 0x8a, 0x04, 0x13, 0x58, 0x18, 0x21, 0x00, 0x92, 0x05, 0xdb, 0x14, 0x52,
	0x59, 0x90, 0x2a, 0xc1, 0x0c, 0x91, 0x85, 0x0b, 0x08, 0xa9, 0x71, 0xf1, 0xe5, 0x66, 0xe6, 0x65,
	0xe6, 0x96, 0xe6, 0x3a, 0x17, 0xa5, 0xa6, 0x64, 0x96, 0x14, 0x4b, 0xb0, 0x28, 0x30, 0x6a, 0xb0,
	0x04, 0xa1, 0x89, 0x0a, 0x59, 0x71, 0x49, 0xc0, 0x44, 0xf2, 0x73, 0x0b, 0x72, 0x52, 0x4b, 0x52,
	0x53, 0x82, 0x21, 0x56, 0x14, 0x4b, 0xb0, 0x82, 0x75, 0xe0, 0x94, 0x17, 0x92, 0xe3, 0xe2, 0x82,
	0x3b, 0xa7, 0x58, 0x82, 0x4d, 0x81, 0x59, 0x83, 0x33, 0x08, 0x49, 0xc4, 0xc9, 0xfc, 0xc4, 0x23,
	0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2,
	0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x64, 0x51, 0x83, 0xb1, 0x02, 0x1e, 0x90, 0x25,
	0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0xe0, 0xc0, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xff,
	0x9d, 0xec, 0xe4, 0x6e, 0x01, 0x00, 0x00,
}

func (m *PrerequisiteGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrerequisiteGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrerequisiteGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectIds) > 0 {
		for iNdEx := len(m.SubjectIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectIds[iNdEx])
			copy(dAtA[i:], m.SubjectIds[iNdEx])
			i = encodeVarintPrerequisiteGroup(dAtA, i, uint64(len(m.SubjectIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.MinimumCompletedSubjects != 0 {
		i = encodeVarintPrerequisiteGroup(dAtA, i, uint64(m.MinimumCompletedSubjects))
		i--
		dAtA[i] = 0x28
	}
	if m.MinimumCredits != 0 {
		i = encodeVarintPrerequisiteGroup(dAtA, i, uint64(m.MinimumCredits))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GroupType) > 0 {
		i -= len(m.GroupType)
		copy(dAtA[i:], m.GroupType)
		i = encodeVarintPrerequisiteGroup(dAtA, i, uint64(len(m.GroupType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintPrerequisiteGroup(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPrerequisiteGroup(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrerequisiteGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrerequisiteGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrerequisiteGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPrerequisiteGroup(uint64(l))
	}
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovPrerequisiteGroup(uint64(l))
	}
	l = len(m.GroupType)
	if l > 0 {
		n += 1 + l + sovPrerequisiteGroup(uint64(l))
	}
	if m.MinimumCredits != 0 {
		n += 1 + sovPrerequisiteGroup(uint64(m.MinimumCredits))
	}
	if m.MinimumCompletedSubjects != 0 {
		n += 1 + sovPrerequisiteGroup(uint64(m.MinimumCompletedSubjects))
	}
	if len(m.SubjectIds) > 0 {
		for _, s := range m.SubjectIds {
			l = len(s)
			n += 1 + l + sovPrerequisiteGroup(uint64(l))
		}
	}
	return n
}

func sovPrerequisiteGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrerequisiteGroup(x uint64) (n int) {
	return sovPrerequisiteGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrerequisiteGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrerequisiteGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrerequisiteGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrerequisiteGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrerequisiteGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrerequisiteGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrerequisiteGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCredits", wireType)
			}
			m.MinimumCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrerequisiteGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumCompletedSubjects", wireType)
			}
			m.MinimumCompletedSubjects = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrerequisiteGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumCompletedSubjects |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrerequisiteGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectIds = append(m.SubjectIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrerequisiteGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrerequisiteGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrerequisiteGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrerequisiteGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrerequisiteGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrerequisiteGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrerequisiteGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrerequisiteGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrerequisiteGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrerequisiteGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrerequisiteGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrerequisiteGroup = fmt.Errorf("proto: unexpected end of group")
)
