// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/degree/degree.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Degree struct {
	Index             string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	DegreeId          string   `protobuf:"bytes,2,opt,name=degreeId,proto3" json:"degreeId,omitempty"`
	Student           string   `protobuf:"bytes,3,opt,name=student,proto3" json:"student,omitempty"`
	Institution       string   `protobuf:"bytes,4,opt,name=institution,proto3" json:"institution,omitempty"`
	CourseId          string   `protobuf:"bytes,5,opt,name=courseId,proto3" json:"courseId,omitempty"`
	CurriculumVersion string   `protobuf:"bytes,6,opt,name=curriculumVersion,proto3" json:"curriculumVersion,omitempty"`
	IssueDate         string   `protobuf:"bytes,7,opt,name=issueDate,proto3" json:"issueDate,omitempty"`
	TokenInstances    []string `protobuf:"bytes,8,rep,name=tokenInstances,proto3" json:"tokenInstances,omitempty"`
	FinalGrade        string   `protobuf:"bytes,9,opt,name=finalGrade,proto3" json:"finalGrade,omitempty"`
	Signatures        []string `protobuf:"bytes,10,rep,name=signatures,proto3" json:"signatures,omitempty"`
	ValidationHash    string   `protobuf:"bytes,11,opt,name=validationHash,proto3" json:"validationHash,omitempty"`
	IpfsLink          string   `protobuf:"bytes,12,opt,name=ipfsLink,proto3" json:"ipfsLink,omitempty"`
	// Additional fields for enhanced functionality
	Status          string `protobuf:"bytes,13,opt,name=status,proto3" json:"status,omitempty"`
	NftTokenId      string `protobuf:"bytes,14,opt,name=nftTokenId,proto3" json:"nftTokenId,omitempty"`
	TotalCredits    uint64 `protobuf:"varint,15,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	ValidationScore string `protobuf:"bytes,16,opt,name=validationScore,proto3" json:"validationScore,omitempty"`
	ContractAddress string `protobuf:"bytes,17,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
}

func (m *Degree) Reset()         { *m = Degree{} }
func (m *Degree) String() string { return proto.CompactTextString(m) }
func (*Degree) ProtoMessage()    {}
func (*Degree) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b254e14ba7376f7, []int{0}
}
func (m *Degree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Degree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Degree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Degree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Degree.Merge(m, src)
}
func (m *Degree) XXX_Size() int {
	return m.Size()
}
func (m *Degree) XXX_DiscardUnknown() {
	xxx_messageInfo_Degree.DiscardUnknown(m)
}

var xxx_messageInfo_Degree proto.InternalMessageInfo

func (m *Degree) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Degree) GetDegreeId() string {
	if m != nil {
		return m.DegreeId
	}
	return ""
}

func (m *Degree) GetStudent() string {
	if m != nil {
		return m.Student
	}
	return ""
}

func (m *Degree) GetInstitution() string {
	if m != nil {
		return m.Institution
	}
	return ""
}

func (m *Degree) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *Degree) GetCurriculumVersion() string {
	if m != nil {
		return m.CurriculumVersion
	}
	return ""
}

func (m *Degree) GetIssueDate() string {
	if m != nil {
		return m.IssueDate
	}
	return ""
}

func (m *Degree) GetTokenInstances() []string {
	if m != nil {
		return m.TokenInstances
	}
	return nil
}

func (m *Degree) GetFinalGrade() string {
	if m != nil {
		return m.FinalGrade
	}
	return ""
}

func (m *Degree) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Degree) GetValidationHash() string {
	if m != nil {
		return m.ValidationHash
	}
	return ""
}

func (m *Degree) GetIpfsLink() string {
	if m != nil {
		return m.IpfsLink
	}
	return ""
}

func (m *Degree) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Degree) GetNftTokenId() string {
	if m != nil {
		return m.NftTokenId
	}
	return ""
}

func (m *Degree) GetTotalCredits() uint64 {
	if m != nil {
		return m.TotalCredits
	}
	return 0
}

func (m *Degree) GetValidationScore() string {
	if m != nil {
		return m.ValidationScore
	}
	return ""
}

func (m *Degree) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Degree)(nil), "academictoken.degree.Degree")
}

func init() { proto.RegisterFile("academictoken/degree/degree.proto", fileDescriptor_9b254e14ba7376f7) }

var fileDescriptor_9b254e14ba7376f7 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x6a, 0x14, 0x41,
	0x10, 0x86, 0x77, 0xcc, 0x66, 0x93, 0xe9, 0xc4, 0xc4, 0x34, 0x41, 0x0a, 0x09, 0xc3, 0x98, 0x83,
	0xcc, 0x41, 0xe2, 0x41, 0xf0, 0xae, 0x06, 0x34, 0xe0, 0x69, 0x15, 0x0f, 0xde, 0xda, 0xee, 0xda,
	0xd8, 0x64, 0xd2, 0xbd, 0x74, 0x55, 0x4b, 0x7c, 0x0b, 0x9f, 0xc7, 0x27, 0xf0, 0x98, 0xa3, 0x47,
	0xd9, 0x7d, 0x11, 0xe9, 0x9e, 0x8c, 0xbb, 0x3b, 0x39, 0xcd, 0xfc, 0xdf, 0xff, 0xf3, 0x77, 0x15,
	0x94, 0x78, 0xaa, 0xb4, 0x32, 0x78, 0x6d, 0x35, 0xfb, 0x2b, 0x74, 0x2f, 0x0c, 0x5e, 0x06, 0xc4,
	0xbb, 0xcf, 0xd9, 0x3c, 0x78, 0xf6, 0xf2, 0x78, 0x23, 0x72, 0xd6, 0x79, 0xa7, 0xbf, 0xc6, 0x62,
	0x72, 0x9e, 0x7f, 0xe5, 0xb1, 0xd8, 0xb6, 0xce, 0xe0, 0x0d, 0x14, 0x75, 0xd1, 0x94, 0xd3, 0x4e,
	0xc8, 0x27, 0x62, 0xb7, 0x8b, 0x5e, 0x18, 0x78, 0x90, 0x8d, 0xff, 0x5a, 0x82, 0xd8, 0x21, 0x8e,
	0x06, 0x1d, 0xc3, 0x56, 0xb6, 0x7a, 0x29, 0x6b, 0xb1, 0x67, 0x1d, 0xb1, 0xe5, 0xc8, 0xd6, 0x3b,
	0x18, 0x67, 0x77, 0x1d, 0xa5, 0x5e, 0xed, 0x63, 0xa0, 0xd4, 0xbb, 0xdd, 0xf5, 0xf6, 0x5a, 0x3e,
	0x17, 0x47, 0x3a, 0x86, 0x60, 0x75, 0x6c, 0xe3, 0xf5, 0x67, 0x0c, 0x94, 0x3a, 0x26, 0x39, 0x74,
	0xdf, 0x90, 0x27, 0xa2, 0xb4, 0x44, 0x11, 0xcf, 0x15, 0x23, 0xec, 0xe4, 0xd4, 0x0a, 0xc8, 0x67,
	0xe2, 0x20, 0x2f, 0x7c, 0xe1, 0x88, 0x95, 0xd3, 0x48, 0xb0, 0x5b, 0x6f, 0x35, 0xe5, 0x74, 0x40,
	0x65, 0x25, 0xc4, 0xcc, 0x3a, 0xd5, 0xbe, 0x0b, 0xca, 0x20, 0x94, 0xb9, 0x66, 0x8d, 0x24, 0x9f,
	0xec, 0xa5, 0x53, 0x1c, 0x03, 0x12, 0x88, 0xdc, 0xb1, 0x46, 0xd2, 0x3b, 0xdf, 0x55, 0x6b, 0x8d,
	0x4a, 0xdb, 0xbd, 0x57, 0xf4, 0x0d, 0xf6, 0x72, 0xc7, 0x80, 0xa6, 0xbd, 0xed, 0x7c, 0x46, 0x1f,
	0xac, 0xbb, 0x82, 0xfd, 0x6e, 0xef, 0x5e, 0xcb, 0xc7, 0x62, 0x42, 0xac, 0x38, 0x12, 0x3c, 0xcc,
	0xce, 0x9d, 0x4a, 0x6f, 0xbb, 0x19, 0x7f, 0xca, 0x03, 0x1b, 0x38, 0xe8, 0x66, 0x5b, 0x11, 0x79,
	0x2a, 0xf6, 0xd9, 0xb3, 0x6a, 0xdf, 0x06, 0x34, 0x96, 0x09, 0x0e, 0xeb, 0xa2, 0x19, 0x4f, 0x37,
	0x98, 0x6c, 0xc4, 0xe1, 0x6a, 0x92, 0x8f, 0xda, 0x07, 0x84, 0x47, 0xb9, 0x68, 0x88, 0x53, 0x52,
	0x7b, 0xc7, 0x41, 0x69, 0x7e, 0x6d, 0x4c, 0x40, 0x22, 0x38, 0xea, 0x92, 0x03, 0xfc, 0xe6, 0xd5,
	0xef, 0x45, 0x55, 0xdc, 0x2e, 0xaa, 0xe2, 0xef, 0xa2, 0x2a, 0x7e, 0x2e, 0xab, 0xd1, 0xed, 0xb2,
	0x1a, 0xfd, 0x59, 0x56, 0xa3, 0x2f, 0x27, 0x9b, 0xf7, 0x78, 0xd3, 0x5f, 0x24, 0xff, 0x98, 0x23,
	0x7d, 0x9d, 0xe4, 0x8b, 0x7c, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x79, 0x24, 0x8e, 0xb6,
	0x02, 0x00, 0x00,
}

func (m *Degree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Degree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Degree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ValidationScore) > 0 {
		i -= len(m.ValidationScore)
		copy(dAtA[i:], m.ValidationScore)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.ValidationScore)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.TotalCredits != 0 {
		i = encodeVarintDegree(dAtA, i, uint64(m.TotalCredits))
		i--
		dAtA[i] = 0x78
	}
	if len(m.NftTokenId) > 0 {
		i -= len(m.NftTokenId)
		copy(dAtA[i:], m.NftTokenId)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.NftTokenId)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.IpfsLink) > 0 {
		i -= len(m.IpfsLink)
		copy(dAtA[i:], m.IpfsLink)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.IpfsLink)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ValidationHash) > 0 {
		i -= len(m.ValidationHash)
		copy(dAtA[i:], m.ValidationHash)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.ValidationHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintDegree(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.FinalGrade) > 0 {
		i -= len(m.FinalGrade)
		copy(dAtA[i:], m.FinalGrade)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.FinalGrade)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TokenInstances) > 0 {
		for iNdEx := len(m.TokenInstances) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenInstances[iNdEx])
			copy(dAtA[i:], m.TokenInstances[iNdEx])
			i = encodeVarintDegree(dAtA, i, uint64(len(m.TokenInstances[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.IssueDate) > 0 {
		i -= len(m.IssueDate)
		copy(dAtA[i:], m.IssueDate)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.IssueDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CurriculumVersion) > 0 {
		i -= len(m.CurriculumVersion)
		copy(dAtA[i:], m.CurriculumVersion)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.CurriculumVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Institution) > 0 {
		i -= len(m.Institution)
		copy(dAtA[i:], m.Institution)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.Institution)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Student) > 0 {
		i -= len(m.Student)
		copy(dAtA[i:], m.Student)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.Student)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DegreeId) > 0 {
		i -= len(m.DegreeId)
		copy(dAtA[i:], m.DegreeId)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.DegreeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintDegree(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDegree(dAtA []byte, offset int, v uint64) int {
	offset -= sovDegree(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Degree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.DegreeId)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.Student)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.Institution)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.CurriculumVersion)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.IssueDate)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	if len(m.TokenInstances) > 0 {
		for _, s := range m.TokenInstances {
			l = len(s)
			n += 1 + l + sovDegree(uint64(l))
		}
	}
	l = len(m.FinalGrade)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovDegree(uint64(l))
		}
	}
	l = len(m.ValidationHash)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.IpfsLink)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	l = len(m.NftTokenId)
	if l > 0 {
		n += 1 + l + sovDegree(uint64(l))
	}
	if m.TotalCredits != 0 {
		n += 1 + sovDegree(uint64(m.TotalCredits))
	}
	l = len(m.ValidationScore)
	if l > 0 {
		n += 2 + l + sovDegree(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 2 + l + sovDegree(uint64(l))
	}
	return n
}

func sovDegree(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDegree(x uint64) (n int) {
	return sovDegree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Degree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDegree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Degree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Degree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Student = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Institution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurriculumVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurriculumVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInstances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenInstances = append(m.TokenInstances, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalGrade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalGrade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			m.TotalCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDegree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDegree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDegree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDegree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDegree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDegree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDegree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDegree
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDegree
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDegree
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDegree        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDegree          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDegree = fmt.Errorf("proto: unexpected end of group")
)
