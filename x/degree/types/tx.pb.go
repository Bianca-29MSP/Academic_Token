// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/degree/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRequestDegree requests a degree for a student
type MsgRequestDegree struct {
	Creator                string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	StudentId              string `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	InstitutionId          string `protobuf:"bytes,3,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	CurriculumId           string `protobuf:"bytes,4,opt,name=curriculum_id,json=curriculumId,proto3" json:"curriculum_id,omitempty"`
	ExpectedGraduationDate string `protobuf:"bytes,5,opt,name=expected_graduation_date,json=expectedGraduationDate,proto3" json:"expected_graduation_date,omitempty"`
}

func (m *MsgRequestDegree) Reset()         { *m = MsgRequestDegree{} }
func (m *MsgRequestDegree) String() string { return proto.CompactTextString(m) }
func (*MsgRequestDegree) ProtoMessage()    {}
func (*MsgRequestDegree) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{0}
}
func (m *MsgRequestDegree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestDegree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestDegree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestDegree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestDegree.Merge(m, src)
}
func (m *MsgRequestDegree) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestDegree) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestDegree.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestDegree proto.InternalMessageInfo

func (m *MsgRequestDegree) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestDegree) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *MsgRequestDegree) GetInstitutionId() string {
	if m != nil {
		return m.InstitutionId
	}
	return ""
}

func (m *MsgRequestDegree) GetCurriculumId() string {
	if m != nil {
		return m.CurriculumId
	}
	return ""
}

func (m *MsgRequestDegree) GetExpectedGraduationDate() string {
	if m != nil {
		return m.ExpectedGraduationDate
	}
	return ""
}

type MsgRequestDegreeResponse struct {
	DegreeRequestId string `protobuf:"bytes,1,opt,name=degree_request_id,json=degreeRequestId,proto3" json:"degree_request_id,omitempty"`
	Status          string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgRequestDegreeResponse) Reset()         { *m = MsgRequestDegreeResponse{} }
func (m *MsgRequestDegreeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestDegreeResponse) ProtoMessage()    {}
func (*MsgRequestDegreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{1}
}
func (m *MsgRequestDegreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestDegreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestDegreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestDegreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestDegreeResponse.Merge(m, src)
}
func (m *MsgRequestDegreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestDegreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestDegreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestDegreeResponse proto.InternalMessageInfo

func (m *MsgRequestDegreeResponse) GetDegreeRequestId() string {
	if m != nil {
		return m.DegreeRequestId
	}
	return ""
}

func (m *MsgRequestDegreeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// MsgValidateDegreeRequirements validates graduation requirements via CosmWasm
type MsgValidateDegreeRequirements struct {
	Creator              string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DegreeRequestId      string `protobuf:"bytes,2,opt,name=degree_request_id,json=degreeRequestId,proto3" json:"degree_request_id,omitempty"`
	ContractAddress      string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ValidationParameters string `protobuf:"bytes,4,opt,name=validation_parameters,json=validationParameters,proto3" json:"validation_parameters,omitempty"`
}

func (m *MsgValidateDegreeRequirements) Reset()         { *m = MsgValidateDegreeRequirements{} }
func (m *MsgValidateDegreeRequirements) String() string { return proto.CompactTextString(m) }
func (*MsgValidateDegreeRequirements) ProtoMessage()    {}
func (*MsgValidateDegreeRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{2}
}
func (m *MsgValidateDegreeRequirements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidateDegreeRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidateDegreeRequirements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidateDegreeRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidateDegreeRequirements.Merge(m, src)
}
func (m *MsgValidateDegreeRequirements) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidateDegreeRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidateDegreeRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidateDegreeRequirements proto.InternalMessageInfo

func (m *MsgValidateDegreeRequirements) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgValidateDegreeRequirements) GetDegreeRequestId() string {
	if m != nil {
		return m.DegreeRequestId
	}
	return ""
}

func (m *MsgValidateDegreeRequirements) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgValidateDegreeRequirements) GetValidationParameters() string {
	if m != nil {
		return m.ValidationParameters
	}
	return ""
}

type MsgValidateDegreeRequirementsResponse struct {
	ValidationPassed    bool     `protobuf:"varint,1,opt,name=validation_passed,json=validationPassed,proto3" json:"validation_passed,omitempty"`
	ValidationScore     string   `protobuf:"bytes,2,opt,name=validation_score,json=validationScore,proto3" json:"validation_score,omitempty"`
	ValidationDetails   string   `protobuf:"bytes,3,opt,name=validation_details,json=validationDetails,proto3" json:"validation_details,omitempty"`
	MissingRequirements []string `protobuf:"bytes,4,rep,name=missing_requirements,json=missingRequirements,proto3" json:"missing_requirements,omitempty"`
}

func (m *MsgValidateDegreeRequirementsResponse) Reset()         { *m = MsgValidateDegreeRequirementsResponse{} }
func (m *MsgValidateDegreeRequirementsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgValidateDegreeRequirementsResponse) ProtoMessage()    {}
func (*MsgValidateDegreeRequirementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{3}
}
func (m *MsgValidateDegreeRequirementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgValidateDegreeRequirementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgValidateDegreeRequirementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgValidateDegreeRequirementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValidateDegreeRequirementsResponse.Merge(m, src)
}
func (m *MsgValidateDegreeRequirementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgValidateDegreeRequirementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValidateDegreeRequirementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValidateDegreeRequirementsResponse proto.InternalMessageInfo

func (m *MsgValidateDegreeRequirementsResponse) GetValidationPassed() bool {
	if m != nil {
		return m.ValidationPassed
	}
	return false
}

func (m *MsgValidateDegreeRequirementsResponse) GetValidationScore() string {
	if m != nil {
		return m.ValidationScore
	}
	return ""
}

func (m *MsgValidateDegreeRequirementsResponse) GetValidationDetails() string {
	if m != nil {
		return m.ValidationDetails
	}
	return ""
}

func (m *MsgValidateDegreeRequirementsResponse) GetMissingRequirements() []string {
	if m != nil {
		return m.MissingRequirements
	}
	return nil
}

// MsgIssueDegree issues a degree after successful validation
type MsgIssueDegree struct {
	Creator         string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DegreeRequestId string   `protobuf:"bytes,2,opt,name=degree_request_id,json=degreeRequestId,proto3" json:"degree_request_id,omitempty"`
	FinalGpa        string   `protobuf:"bytes,3,opt,name=final_gpa,json=finalGpa,proto3" json:"final_gpa,omitempty"`
	TotalCredits    uint64   `protobuf:"varint,4,opt,name=total_credits,json=totalCredits,proto3" json:"total_credits,omitempty"`
	Signatures      []string `protobuf:"bytes,5,rep,name=signatures,proto3" json:"signatures,omitempty"`
	AdditionalNotes string   `protobuf:"bytes,6,opt,name=additional_notes,json=additionalNotes,proto3" json:"additional_notes,omitempty"`
}

func (m *MsgIssueDegree) Reset()         { *m = MsgIssueDegree{} }
func (m *MsgIssueDegree) String() string { return proto.CompactTextString(m) }
func (*MsgIssueDegree) ProtoMessage()    {}
func (*MsgIssueDegree) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{4}
}
func (m *MsgIssueDegree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueDegree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueDegree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueDegree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueDegree.Merge(m, src)
}
func (m *MsgIssueDegree) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueDegree) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueDegree.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueDegree proto.InternalMessageInfo

func (m *MsgIssueDegree) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgIssueDegree) GetDegreeRequestId() string {
	if m != nil {
		return m.DegreeRequestId
	}
	return ""
}

func (m *MsgIssueDegree) GetFinalGpa() string {
	if m != nil {
		return m.FinalGpa
	}
	return ""
}

func (m *MsgIssueDegree) GetTotalCredits() uint64 {
	if m != nil {
		return m.TotalCredits
	}
	return 0
}

func (m *MsgIssueDegree) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *MsgIssueDegree) GetAdditionalNotes() string {
	if m != nil {
		return m.AdditionalNotes
	}
	return ""
}

type MsgIssueDegreeResponse struct {
	DegreeId   string `protobuf:"bytes,1,opt,name=degree_id,json=degreeId,proto3" json:"degree_id,omitempty"`
	NftTokenId string `protobuf:"bytes,2,opt,name=nft_token_id,json=nftTokenId,proto3" json:"nft_token_id,omitempty"`
	IpfsHash   string `protobuf:"bytes,3,opt,name=ipfs_hash,json=ipfsHash,proto3" json:"ipfs_hash,omitempty"`
	IssueDate  string `protobuf:"bytes,4,opt,name=issue_date,json=issueDate,proto3" json:"issue_date,omitempty"`
}

func (m *MsgIssueDegreeResponse) Reset()         { *m = MsgIssueDegreeResponse{} }
func (m *MsgIssueDegreeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueDegreeResponse) ProtoMessage()    {}
func (*MsgIssueDegreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{5}
}
func (m *MsgIssueDegreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueDegreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueDegreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueDegreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueDegreeResponse.Merge(m, src)
}
func (m *MsgIssueDegreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueDegreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueDegreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueDegreeResponse proto.InternalMessageInfo

func (m *MsgIssueDegreeResponse) GetDegreeId() string {
	if m != nil {
		return m.DegreeId
	}
	return ""
}

func (m *MsgIssueDegreeResponse) GetNftTokenId() string {
	if m != nil {
		return m.NftTokenId
	}
	return ""
}

func (m *MsgIssueDegreeResponse) GetIpfsHash() string {
	if m != nil {
		return m.IpfsHash
	}
	return ""
}

func (m *MsgIssueDegreeResponse) GetIssueDate() string {
	if m != nil {
		return m.IssueDate
	}
	return ""
}

// MsgUpdateDegreeContract updates the CosmWasm contract address
type MsgUpdateDegreeContract struct {
	Authority          string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	NewContractAddress string `protobuf:"bytes,2,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
	ContractVersion    string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	MigrationReason    string `protobuf:"bytes,4,opt,name=migration_reason,json=migrationReason,proto3" json:"migration_reason,omitempty"`
}

func (m *MsgUpdateDegreeContract) Reset()         { *m = MsgUpdateDegreeContract{} }
func (m *MsgUpdateDegreeContract) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDegreeContract) ProtoMessage()    {}
func (*MsgUpdateDegreeContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{6}
}
func (m *MsgUpdateDegreeContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDegreeContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDegreeContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDegreeContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDegreeContract.Merge(m, src)
}
func (m *MsgUpdateDegreeContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDegreeContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDegreeContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDegreeContract proto.InternalMessageInfo

func (m *MsgUpdateDegreeContract) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateDegreeContract) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

func (m *MsgUpdateDegreeContract) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *MsgUpdateDegreeContract) GetMigrationReason() string {
	if m != nil {
		return m.MigrationReason
	}
	return ""
}

type MsgUpdateDegreeContractResponse struct {
	OldContractAddress string `protobuf:"bytes,1,opt,name=old_contract_address,json=oldContractAddress,proto3" json:"old_contract_address,omitempty"`
	NewContractAddress string `protobuf:"bytes,2,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
	UpdateDate         string `protobuf:"bytes,3,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
}

func (m *MsgUpdateDegreeContractResponse) Reset()         { *m = MsgUpdateDegreeContractResponse{} }
func (m *MsgUpdateDegreeContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDegreeContractResponse) ProtoMessage()    {}
func (*MsgUpdateDegreeContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{7}
}
func (m *MsgUpdateDegreeContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDegreeContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDegreeContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDegreeContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDegreeContractResponse.Merge(m, src)
}
func (m *MsgUpdateDegreeContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDegreeContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDegreeContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDegreeContractResponse proto.InternalMessageInfo

func (m *MsgUpdateDegreeContractResponse) GetOldContractAddress() string {
	if m != nil {
		return m.OldContractAddress
	}
	return ""
}

func (m *MsgUpdateDegreeContractResponse) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

func (m *MsgUpdateDegreeContractResponse) GetUpdateDate() string {
	if m != nil {
		return m.UpdateDate
	}
	return ""
}

// MsgCancelDegreeRequest cancels a pending degree request
type MsgCancelDegreeRequest struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DegreeRequestId    string `protobuf:"bytes,2,opt,name=degree_request_id,json=degreeRequestId,proto3" json:"degree_request_id,omitempty"`
	CancellationReason string `protobuf:"bytes,3,opt,name=cancellation_reason,json=cancellationReason,proto3" json:"cancellation_reason,omitempty"`
}

func (m *MsgCancelDegreeRequest) Reset()         { *m = MsgCancelDegreeRequest{} }
func (m *MsgCancelDegreeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelDegreeRequest) ProtoMessage()    {}
func (*MsgCancelDegreeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{8}
}
func (m *MsgCancelDegreeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelDegreeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelDegreeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelDegreeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelDegreeRequest.Merge(m, src)
}
func (m *MsgCancelDegreeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelDegreeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelDegreeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelDegreeRequest proto.InternalMessageInfo

func (m *MsgCancelDegreeRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelDegreeRequest) GetDegreeRequestId() string {
	if m != nil {
		return m.DegreeRequestId
	}
	return ""
}

func (m *MsgCancelDegreeRequest) GetCancellationReason() string {
	if m != nil {
		return m.CancellationReason
	}
	return ""
}

type MsgCancelDegreeRequestResponse struct {
	DegreeRequestId  string `protobuf:"bytes,1,opt,name=degree_request_id,json=degreeRequestId,proto3" json:"degree_request_id,omitempty"`
	Status           string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CancellationDate string `protobuf:"bytes,3,opt,name=cancellation_date,json=cancellationDate,proto3" json:"cancellation_date,omitempty"`
}

func (m *MsgCancelDegreeRequestResponse) Reset()         { *m = MsgCancelDegreeRequestResponse{} }
func (m *MsgCancelDegreeRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelDegreeRequestResponse) ProtoMessage()    {}
func (*MsgCancelDegreeRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{9}
}
func (m *MsgCancelDegreeRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelDegreeRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelDegreeRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelDegreeRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelDegreeRequestResponse.Merge(m, src)
}
func (m *MsgCancelDegreeRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelDegreeRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelDegreeRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelDegreeRequestResponse proto.InternalMessageInfo

func (m *MsgCancelDegreeRequestResponse) GetDegreeRequestId() string {
	if m != nil {
		return m.DegreeRequestId
	}
	return ""
}

func (m *MsgCancelDegreeRequestResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgCancelDegreeRequestResponse) GetCancellationDate() string {
	if m != nil {
		return m.CancellationDate
	}
	return ""
}

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{10}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5023fdcab9ac5b, []int{11}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRequestDegree)(nil), "academictoken.degree.MsgRequestDegree")
	proto.RegisterType((*MsgRequestDegreeResponse)(nil), "academictoken.degree.MsgRequestDegreeResponse")
	proto.RegisterType((*MsgValidateDegreeRequirements)(nil), "academictoken.degree.MsgValidateDegreeRequirements")
	proto.RegisterType((*MsgValidateDegreeRequirementsResponse)(nil), "academictoken.degree.MsgValidateDegreeRequirementsResponse")
	proto.RegisterType((*MsgIssueDegree)(nil), "academictoken.degree.MsgIssueDegree")
	proto.RegisterType((*MsgIssueDegreeResponse)(nil), "academictoken.degree.MsgIssueDegreeResponse")
	proto.RegisterType((*MsgUpdateDegreeContract)(nil), "academictoken.degree.MsgUpdateDegreeContract")
	proto.RegisterType((*MsgUpdateDegreeContractResponse)(nil), "academictoken.degree.MsgUpdateDegreeContractResponse")
	proto.RegisterType((*MsgCancelDegreeRequest)(nil), "academictoken.degree.MsgCancelDegreeRequest")
	proto.RegisterType((*MsgCancelDegreeRequestResponse)(nil), "academictoken.degree.MsgCancelDegreeRequestResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "academictoken.degree.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "academictoken.degree.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("academictoken/degree/tx.proto", fileDescriptor_ad5023fdcab9ac5b) }

var fileDescriptor_ad5023fdcab9ac5b = []byte{
	// 1105 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x4f, 0x24, 0x45,
	0x14, 0xa6, 0x87, 0x1f, 0x32, 0x0f, 0x58, 0xa0, 0x19, 0xd9, 0xd9, 0xd9, 0x65, 0xc0, 0x51, 0xd6,
	0x15, 0x65, 0x66, 0x77, 0x59, 0xc9, 0x8a, 0x89, 0x66, 0x01, 0xb3, 0xce, 0x01, 0x63, 0x66, 0x75,
	0x0f, 0x1e, 0xec, 0x94, 0x5d, 0x45, 0x53, 0xb1, 0xa7, 0x6b, 0xac, 0xaa, 0x66, 0x21, 0xf1, 0x60,
	0x3c, 0xaa, 0x31, 0x1a, 0x8f, 0x7a, 0x36, 0x1e, 0x39, 0xf8, 0x2f, 0x98, 0x70, 0x73, 0xe3, 0xc9,
	0x93, 0x51, 0x38, 0xf0, 0x6f, 0x98, 0xaa, 0xea, 0xee, 0xe9, 0x19, 0xba, 0xf9, 0xb1, 0xd9, 0x0b,
	0xd0, 0xdf, 0xfb, 0xba, 0xea, 0x7b, 0xdf, 0x7b, 0xaf, 0xba, 0x80, 0x39, 0xe4, 0x22, 0x4c, 0xda,
	0xd4, 0x95, 0xec, 0x73, 0x12, 0x34, 0x30, 0xf1, 0x38, 0x21, 0x0d, 0xb9, 0x57, 0xef, 0x70, 0x26,
	0x99, 0x5d, 0xea, 0x09, 0xd7, 0x4d, 0xb8, 0x52, 0xf2, 0x98, 0xc7, 0x34, 0xa1, 0xa1, 0xfe, 0x32,
	0xdc, 0xca, 0x35, 0x97, 0x89, 0x36, 0x13, 0x8e, 0x09, 0x98, 0x87, 0x28, 0x74, 0xd5, 0x3c, 0x35,
	0xda, 0xc2, 0x6b, 0xec, 0xde, 0x51, 0xbf, 0xa2, 0xc0, 0x34, 0x6a, 0xd3, 0x80, 0x35, 0xf4, 0xcf,
	0x08, 0x7a, 0x29, 0x53, 0x51, 0x07, 0x71, 0xd4, 0x8e, 0x96, 0xab, 0x7d, 0x5b, 0x80, 0xa9, 0x2d,
	0xe1, 0xb5, 0xc8, 0x17, 0x21, 0x11, 0x72, 0x53, 0x33, 0xec, 0x32, 0xbc, 0xe0, 0x72, 0x82, 0x24,
	0xe3, 0x65, 0x6b, 0xc1, 0xba, 0x55, 0x6c, 0xc5, 0x8f, 0xf6, 0x1c, 0x80, 0x90, 0x21, 0x26, 0x81,
	0x74, 0x28, 0x2e, 0x17, 0x74, 0xb0, 0x18, 0x21, 0x4d, 0x6c, 0x2f, 0xc2, 0x15, 0x1a, 0x08, 0x49,
	0x65, 0x28, 0x29, 0x0b, 0x14, 0x65, 0x50, 0x53, 0x26, 0x52, 0x68, 0x13, 0xdb, 0x2f, 0xc3, 0x84,
	0x1b, 0x72, 0x4e, 0xdd, 0xd0, 0x0f, 0xdb, 0x8a, 0x35, 0xa4, 0x59, 0xe3, 0x5d, 0xb0, 0x89, 0xed,
	0xfb, 0x50, 0x26, 0x7b, 0x1d, 0xe2, 0x4a, 0x82, 0x1d, 0x8f, 0x23, 0x1c, 0x22, 0xbd, 0x26, 0x46,
	0x92, 0x94, 0x87, 0x35, 0x7f, 0x36, 0x8e, 0x3f, 0x4c, 0xc2, 0x9b, 0x48, 0x92, 0xb5, 0xfb, 0x5f,
	0x9f, 0x1c, 0x2c, 0xc5, 0x92, 0xbf, 0x39, 0x39, 0x58, 0x7a, 0xb5, 0xd7, 0x87, 0xbd, 0xd8, 0x89,
	0xfe, 0xc4, 0x6b, 0x9f, 0x42, 0xb9, 0x1f, 0x6b, 0x11, 0xd1, 0x61, 0x81, 0x20, 0xf6, 0x12, 0x4c,
	0x9b, 0xd7, 0x1c, 0x6e, 0xe2, 0x4a, 0xb8, 0xb1, 0x67, 0x12, 0x47, 0x54, 0x8d, 0x37, 0xb1, 0x3d,
	0x0b, 0x23, 0x42, 0x22, 0x19, 0x8a, 0xc8, 0xa2, 0xe8, 0xa9, 0xf6, 0x5d, 0x01, 0xe6, 0xb6, 0x84,
	0xf7, 0x18, 0xf9, 0x54, 0xe5, 0xb1, 0x99, 0xbc, 0x46, 0x39, 0x69, 0x93, 0x40, 0x8a, 0x33, 0xac,
	0xcf, 0xdc, 0xbf, 0x90, 0xbd, 0xff, 0x6b, 0x30, 0xe5, 0xb2, 0x40, 0x72, 0xe4, 0x4a, 0x07, 0x61,
	0xcc, 0x89, 0x10, 0x51, 0x25, 0x26, 0x63, 0xfc, 0x81, 0x81, 0xed, 0x15, 0x78, 0x71, 0xd7, 0xc8,
	0x51, 0xee, 0xea, 0xde, 0x20, 0x92, 0x70, 0x11, 0xd5, 0xa4, 0xd4, 0x0d, 0x7e, 0x98, 0xc4, 0xd6,
	0xde, 0xeb, 0x77, 0xf8, 0x5e, 0xbe, 0xc3, 0xf9, 0xc9, 0xd6, 0xfe, 0xb3, 0x60, 0xf1, 0x4c, 0x46,
	0x62, 0xfe, 0xeb, 0x30, 0xdd, 0xa3, 0x52, 0x08, 0x62, 0xcc, 0x1f, 0x6d, 0x4d, 0xa5, 0x15, 0x2a,
	0x5c, 0x65, 0x9f, 0x22, 0x0b, 0x97, 0x71, 0x12, 0x1b, 0xd5, 0xc5, 0x1f, 0x29, 0xd8, 0x5e, 0x06,
	0x3b, 0x45, 0xc5, 0x44, 0x22, 0xea, 0xc7, 0x56, 0xa5, 0x76, 0xdc, 0x34, 0x01, 0xfb, 0x0e, 0x94,
	0xda, 0x54, 0x08, 0x1a, 0x78, 0xba, 0x08, 0xb1, 0xcc, 0xf2, 0xd0, 0xc2, 0xe0, 0xad, 0x62, 0x6b,
	0x26, 0x8a, 0xf5, 0xe4, 0xf8, 0x73, 0x01, 0xae, 0x6c, 0x09, 0xaf, 0x29, 0x44, 0x48, 0xce, 0x1d,
	0xaf, 0xcb, 0xd4, 0xf8, 0x3a, 0x14, 0xb7, 0x69, 0x80, 0x7c, 0xc7, 0xeb, 0xa0, 0x48, 0xf1, 0xa8,
	0x06, 0x1e, 0x76, 0x90, 0x9a, 0x30, 0xc9, 0x24, 0xf2, 0x1d, 0x97, 0x13, 0x4c, 0xa5, 0xa9, 0xe6,
	0x50, 0x6b, 0x5c, 0x83, 0x1b, 0x06, 0xb3, 0xab, 0x00, 0x82, 0x7a, 0x01, 0x92, 0x21, 0x27, 0xa2,
	0x3c, 0xac, 0x73, 0x48, 0x21, 0xca, 0x47, 0x84, 0x31, 0x55, 0x06, 0x20, 0xdf, 0x09, 0x98, 0x24,
	0xa2, 0x3c, 0x62, 0xc4, 0x74, 0xf1, 0x0f, 0x14, 0xbc, 0xb6, 0xda, 0xdf, 0x10, 0x8b, 0xf9, 0x0d,
	0x91, 0xb2, 0xa2, 0xf6, 0x93, 0x05, 0xb3, 0xbd, 0x50, 0x52, 0xf2, 0xeb, 0x50, 0x8c, 0xbc, 0x48,
	0xe6, 0x6c, 0xd4, 0x00, 0x4d, 0x6c, 0x2f, 0xc0, 0x78, 0xb0, 0x2d, 0x1d, 0xbd, 0x78, 0xd7, 0x23,
	0x08, 0xb6, 0xe5, 0x47, 0x0a, 0x32, 0xf6, 0xd0, 0xce, 0xb6, 0x70, 0x76, 0x90, 0xd8, 0x89, 0xed,
	0x51, 0xc0, 0xfb, 0x48, 0xec, 0xa8, 0x63, 0x8c, 0xaa, 0x2d, 0xcd, 0x69, 0x62, 0x3a, 0xbd, 0xa8,
	0x11, 0x75, 0x80, 0xd4, 0x7e, 0x29, 0xc0, 0xd5, 0x2d, 0xe1, 0x7d, 0xdc, 0xe9, 0x76, 0xe5, 0x46,
	0x34, 0x36, 0xf6, 0x2a, 0x14, 0x51, 0x28, 0x77, 0x18, 0xa7, 0x72, 0xdf, 0xc8, 0x5a, 0x2f, 0xff,
	0xf5, 0xfb, 0x72, 0x29, 0x3a, 0xa4, 0xa3, 0xb1, 0x7a, 0x24, 0xb9, 0x6a, 0x84, 0x2e, 0xd5, 0xbe,
	0x0d, 0xa5, 0x80, 0x3c, 0x71, 0x4e, 0x8d, 0xa5, 0x51, 0x6e, 0x07, 0xe4, 0xc9, 0x46, 0xdf, 0x64,
	0xa6, 0x87, 0x78, 0x97, 0x70, 0x41, 0x59, 0xd0, 0x3f, 0xc4, 0x8f, 0x0d, 0xac, 0xa8, 0x6d, 0xea,
	0x71, 0xd3, 0xc5, 0x9c, 0x20, 0xc1, 0x82, 0x28, 0xab, 0xc9, 0x04, 0x6f, 0x69, 0x78, 0xed, 0x81,
	0xaa, 0x54, 0x57, 0x97, 0xaa, 0x55, 0x3d, 0xbf, 0x56, 0x59, 0x16, 0xd4, 0x7e, 0xb5, 0x60, 0x3e,
	0x27, 0x96, 0x54, 0xef, 0x36, 0x94, 0x98, 0x8f, 0x4f, 0xa7, 0x6b, 0x0a, 0x69, 0x33, 0x1f, 0xf7,
	0xa7, 0x7b, 0x79, 0x83, 0xe6, 0x61, 0x2c, 0xd4, 0x1a, 0x4c, 0x19, 0x8d, 0x37, 0x60, 0x20, 0x5d,
	0xc7, 0x3f, 0x4d, 0x77, 0x6d, 0xa0, 0xc0, 0x25, 0xfe, 0x66, 0x7a, 0x7e, 0x9e, 0xd3, 0x0c, 0x36,
	0x60, 0xc6, 0xd5, 0x8b, 0xfb, 0x3d, 0xd6, 0x1b, 0x25, 0x76, 0x3a, 0x14, 0xb9, 0xff, 0x4e, 0xff,
	0x9c, 0x2c, 0xe7, 0x7b, 0x9f, 0x21, 0xbb, 0xf6, 0xa3, 0x05, 0xd5, 0xec, 0xd0, 0xf3, 0xfc, 0x4e,
	0xa9, 0xe3, 0xb6, 0x27, 0xaf, 0x94, 0xbf, 0x53, 0xe9, 0x80, 0x76, 0xf9, 0x0f, 0x0b, 0x26, 0x93,
	0x76, 0xd0, 0x1f, 0x09, 0xf1, 0xcc, 0x53, 0xf2, 0x2e, 0x8c, 0x98, 0xeb, 0x89, 0x16, 0x34, 0x76,
	0xf7, 0x46, 0x3d, 0xeb, 0xd6, 0x54, 0x37, 0xbb, 0xac, 0x17, 0x0f, 0xff, 0x99, 0x1f, 0xf8, 0xed,
	0xe4, 0x60, 0xc9, 0x6a, 0x45, 0xaf, 0xad, 0xbd, 0x75, 0xba, 0xbd, 0x6f, 0x9e, 0xd7, 0xde, 0x66,
	0xb5, 0xda, 0xb5, 0xd4, 0xd0, 0x1b, 0x28, 0xf6, 0xf4, 0xee, 0xe1, 0x30, 0x0c, 0x6e, 0x09, 0xcf,
	0xf6, 0x60, 0xa2, 0xf7, 0xa6, 0x74, 0x33, 0x5b, 0x5f, 0xff, 0x25, 0xa2, 0x52, 0xbf, 0x18, 0x2f,
	0x29, 0xe2, 0xf7, 0x16, 0x54, 0xce, 0xb8, 0x25, 0xac, 0xe4, 0x2e, 0x97, 0xff, 0x52, 0xe5, 0xed,
	0x67, 0x78, 0x29, 0x11, 0x84, 0x60, 0x2c, 0xfd, 0x09, 0x7b, 0x25, 0x77, 0xad, 0x14, 0xab, 0xf2,
	0xc6, 0x45, 0x58, 0xc9, 0x16, 0x5f, 0x42, 0x29, 0xf3, 0xc4, 0x5d, 0xce, 0x5d, 0x25, 0x8b, 0x5e,
	0x79, 0xf3, 0x52, 0xf4, 0x64, 0xf7, 0x7d, 0x98, 0xc9, 0x3a, 0x27, 0xf2, 0x53, 0xc8, 0x60, 0x57,
	0xee, 0x5d, 0x86, 0x9d, 0x6c, 0x8d, 0x61, 0xbc, 0x67, 0x78, 0x16, 0xcf, 0xc9, 0xc0, 0xd0, 0x2a,
	0xcb, 0x17, 0xa2, 0xc5, 0xbb, 0x54, 0x86, 0xbf, 0x52, 0x83, 0xb2, 0xbe, 0x7a, 0x78, 0x54, 0xb5,
	0x9e, 0x1e, 0x55, 0xad, 0x7f, 0x8f, 0xaa, 0xd6, 0x0f, 0xc7, 0xd5, 0x81, 0xa7, 0xc7, 0xd5, 0x81,
	0xbf, 0x8f, 0xab, 0x03, 0x9f, 0xdc, 0xc8, 0x99, 0x13, 0xb9, 0xdf, 0x21, 0xe2, 0xb3, 0x11, 0xfd,
	0xff, 0xc2, 0xca, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x92, 0x20, 0x24, 0xb6, 0xe6, 0x0c, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RequestDegree requests a degree for a student
	RequestDegree(ctx context.Context, in *MsgRequestDegree, opts ...grpc.CallOption) (*MsgRequestDegreeResponse, error)
	// ValidateDegreeRequirements validates if student meets graduation requirements
	ValidateDegreeRequirements(ctx context.Context, in *MsgValidateDegreeRequirements, opts ...grpc.CallOption) (*MsgValidateDegreeRequirementsResponse, error)
	// IssueDegree issues a degree after successful validation
	IssueDegree(ctx context.Context, in *MsgIssueDegree, opts ...grpc.CallOption) (*MsgIssueDegreeResponse, error)
	// UpdateDegreeContract updates the CosmWasm contract address
	UpdateDegreeContract(ctx context.Context, in *MsgUpdateDegreeContract, opts ...grpc.CallOption) (*MsgUpdateDegreeContractResponse, error)
	// CancelDegreeRequest cancels a pending degree request
	CancelDegreeRequest(ctx context.Context, in *MsgCancelDegreeRequest, opts ...grpc.CallOption) (*MsgCancelDegreeRequestResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RequestDegree(ctx context.Context, in *MsgRequestDegree, opts ...grpc.CallOption) (*MsgRequestDegreeResponse, error) {
	out := new(MsgRequestDegreeResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Msg/RequestDegree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValidateDegreeRequirements(ctx context.Context, in *MsgValidateDegreeRequirements, opts ...grpc.CallOption) (*MsgValidateDegreeRequirementsResponse, error) {
	out := new(MsgValidateDegreeRequirementsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Msg/ValidateDegreeRequirements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssueDegree(ctx context.Context, in *MsgIssueDegree, opts ...grpc.CallOption) (*MsgIssueDegreeResponse, error) {
	out := new(MsgIssueDegreeResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Msg/IssueDegree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDegreeContract(ctx context.Context, in *MsgUpdateDegreeContract, opts ...grpc.CallOption) (*MsgUpdateDegreeContractResponse, error) {
	out := new(MsgUpdateDegreeContractResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Msg/UpdateDegreeContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelDegreeRequest(ctx context.Context, in *MsgCancelDegreeRequest, opts ...grpc.CallOption) (*MsgCancelDegreeRequestResponse, error) {
	out := new(MsgCancelDegreeRequestResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Msg/CancelDegreeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RequestDegree requests a degree for a student
	RequestDegree(context.Context, *MsgRequestDegree) (*MsgRequestDegreeResponse, error)
	// ValidateDegreeRequirements validates if student meets graduation requirements
	ValidateDegreeRequirements(context.Context, *MsgValidateDegreeRequirements) (*MsgValidateDegreeRequirementsResponse, error)
	// IssueDegree issues a degree after successful validation
	IssueDegree(context.Context, *MsgIssueDegree) (*MsgIssueDegreeResponse, error)
	// UpdateDegreeContract updates the CosmWasm contract address
	UpdateDegreeContract(context.Context, *MsgUpdateDegreeContract) (*MsgUpdateDegreeContractResponse, error)
	// CancelDegreeRequest cancels a pending degree request
	CancelDegreeRequest(context.Context, *MsgCancelDegreeRequest) (*MsgCancelDegreeRequestResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RequestDegree(ctx context.Context, req *MsgRequestDegree) (*MsgRequestDegreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDegree not implemented")
}
func (*UnimplementedMsgServer) ValidateDegreeRequirements(ctx context.Context, req *MsgValidateDegreeRequirements) (*MsgValidateDegreeRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDegreeRequirements not implemented")
}
func (*UnimplementedMsgServer) IssueDegree(ctx context.Context, req *MsgIssueDegree) (*MsgIssueDegreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueDegree not implemented")
}
func (*UnimplementedMsgServer) UpdateDegreeContract(ctx context.Context, req *MsgUpdateDegreeContract) (*MsgUpdateDegreeContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDegreeContract not implemented")
}
func (*UnimplementedMsgServer) CancelDegreeRequest(ctx context.Context, req *MsgCancelDegreeRequest) (*MsgCancelDegreeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDegreeRequest not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RequestDegree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestDegree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestDegree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Msg/RequestDegree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestDegree(ctx, req.(*MsgRequestDegree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValidateDegreeRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValidateDegreeRequirements)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValidateDegreeRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Msg/ValidateDegreeRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValidateDegreeRequirements(ctx, req.(*MsgValidateDegreeRequirements))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssueDegree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueDegree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueDegree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Msg/IssueDegree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueDegree(ctx, req.(*MsgIssueDegree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDegreeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDegreeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDegreeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Msg/UpdateDegreeContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDegreeContract(ctx, req.(*MsgUpdateDegreeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelDegreeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelDegreeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Msg/CancelDegreeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelDegreeRequest(ctx, req.(*MsgCancelDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.degree.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestDegree",
			Handler:    _Msg_RequestDegree_Handler,
		},
		{
			MethodName: "ValidateDegreeRequirements",
			Handler:    _Msg_ValidateDegreeRequirements_Handler,
		},
		{
			MethodName: "IssueDegree",
			Handler:    _Msg_IssueDegree_Handler,
		},
		{
			MethodName: "UpdateDegreeContract",
			Handler:    _Msg_UpdateDegreeContract_Handler,
		},
		{
			MethodName: "CancelDegreeRequest",
			Handler:    _Msg_CancelDegreeRequest_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/degree/tx.proto",
}

func (m *MsgRequestDegree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestDegree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestDegree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpectedGraduationDate) > 0 {
		i -= len(m.ExpectedGraduationDate)
		copy(dAtA[i:], m.ExpectedGraduationDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExpectedGraduationDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CurriculumId) > 0 {
		i -= len(m.CurriculumId)
		copy(dAtA[i:], m.CurriculumId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CurriculumId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InstitutionId) > 0 {
		i -= len(m.InstitutionId)
		copy(dAtA[i:], m.InstitutionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InstitutionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestDegreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestDegreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestDegreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DegreeRequestId) > 0 {
		i -= len(m.DegreeRequestId)
		copy(dAtA[i:], m.DegreeRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DegreeRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgValidateDegreeRequirements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidateDegreeRequirements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidateDegreeRequirements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidationParameters) > 0 {
		i -= len(m.ValidationParameters)
		copy(dAtA[i:], m.ValidationParameters)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidationParameters)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DegreeRequestId) > 0 {
		i -= len(m.DegreeRequestId)
		copy(dAtA[i:], m.DegreeRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DegreeRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgValidateDegreeRequirementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgValidateDegreeRequirementsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgValidateDegreeRequirementsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MissingRequirements) > 0 {
		for iNdEx := len(m.MissingRequirements) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MissingRequirements[iNdEx])
			copy(dAtA[i:], m.MissingRequirements[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.MissingRequirements[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ValidationDetails) > 0 {
		i -= len(m.ValidationDetails)
		copy(dAtA[i:], m.ValidationDetails)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidationDetails)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidationScore) > 0 {
		i -= len(m.ValidationScore)
		copy(dAtA[i:], m.ValidationScore)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidationScore)))
		i--
		dAtA[i] = 0x12
	}
	if m.ValidationPassed {
		i--
		if m.ValidationPassed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueDegree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueDegree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueDegree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalNotes) > 0 {
		i -= len(m.AdditionalNotes)
		copy(dAtA[i:], m.AdditionalNotes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AdditionalNotes)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.TotalCredits != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalCredits))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FinalGpa) > 0 {
		i -= len(m.FinalGpa)
		copy(dAtA[i:], m.FinalGpa)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FinalGpa)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DegreeRequestId) > 0 {
		i -= len(m.DegreeRequestId)
		copy(dAtA[i:], m.DegreeRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DegreeRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueDegreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueDegreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueDegreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssueDate) > 0 {
		i -= len(m.IssueDate)
		copy(dAtA[i:], m.IssueDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IssueDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IpfsHash) > 0 {
		i -= len(m.IpfsHash)
		copy(dAtA[i:], m.IpfsHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IpfsHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftTokenId) > 0 {
		i -= len(m.NftTokenId)
		copy(dAtA[i:], m.NftTokenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftTokenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DegreeId) > 0 {
		i -= len(m.DegreeId)
		copy(dAtA[i:], m.DegreeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DegreeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDegreeContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDegreeContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDegreeContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MigrationReason) > 0 {
		i -= len(m.MigrationReason)
		copy(dAtA[i:], m.MigrationReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MigrationReason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDegreeContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDegreeContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDegreeContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdateDate) > 0 {
		i -= len(m.UpdateDate)
		copy(dAtA[i:], m.UpdateDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpdateDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldContractAddress) > 0 {
		i -= len(m.OldContractAddress)
		copy(dAtA[i:], m.OldContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OldContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelDegreeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelDegreeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelDegreeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CancellationReason) > 0 {
		i -= len(m.CancellationReason)
		copy(dAtA[i:], m.CancellationReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CancellationReason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DegreeRequestId) > 0 {
		i -= len(m.DegreeRequestId)
		copy(dAtA[i:], m.DegreeRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DegreeRequestId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelDegreeRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelDegreeRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelDegreeRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CancellationDate) > 0 {
		i -= len(m.CancellationDate)
		copy(dAtA[i:], m.CancellationDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CancellationDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DegreeRequestId) > 0 {
		i -= len(m.DegreeRequestId)
		copy(dAtA[i:], m.DegreeRequestId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DegreeRequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRequestDegree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InstitutionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CurriculumId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExpectedGraduationDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRequestDegreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DegreeRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgValidateDegreeRequirements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DegreeRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidationParameters)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgValidateDegreeRequirementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidationPassed {
		n += 2
	}
	l = len(m.ValidationScore)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidationDetails)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.MissingRequirements) > 0 {
		for _, s := range m.MissingRequirements {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgIssueDegree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DegreeRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FinalGpa)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TotalCredits != 0 {
		n += 1 + sovTx(uint64(m.TotalCredits))
	}
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.AdditionalNotes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueDegreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DegreeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftTokenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IpfsHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IssueDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDegreeContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MigrationReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDegreeContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UpdateDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelDegreeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DegreeRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CancellationReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelDegreeRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DegreeRequestId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CancellationDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRequestDegree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestDegree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestDegree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstitutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstitutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurriculumId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurriculumId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedGraduationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedGraduationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestDegreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestDegreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestDegreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidateDegreeRequirements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidateDegreeRequirements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidateDegreeRequirements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationParameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationParameters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgValidateDegreeRequirementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgValidateDegreeRequirementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgValidateDegreeRequirementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationPassed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidationPassed = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissingRequirements", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MissingRequirements = append(m.MissingRequirements, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueDegree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueDegree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueDegree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalGpa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinalGpa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
			}
			m.TotalCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalNotes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalNotes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueDegreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueDegreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueDegreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftTokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftTokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpfsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpfsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDegreeContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDegreeContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDegreeContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrationReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MigrationReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDegreeContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDegreeContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDegreeContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelDegreeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelDegreeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelDegreeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancellationReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancellationReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelDegreeRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelDegreeRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelDegreeRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeRequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeRequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancellationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CancellationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
