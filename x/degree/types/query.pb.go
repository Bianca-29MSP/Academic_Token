// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/degree/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetDegreeRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetDegreeRequest) Reset()         { *m = QueryGetDegreeRequest{} }
func (m *QueryGetDegreeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDegreeRequest) ProtoMessage()    {}
func (*QueryGetDegreeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{2}
}
func (m *QueryGetDegreeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDegreeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDegreeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDegreeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDegreeRequest.Merge(m, src)
}
func (m *QueryGetDegreeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDegreeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDegreeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDegreeRequest proto.InternalMessageInfo

func (m *QueryGetDegreeRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetDegreeResponse struct {
	Degree Degree `protobuf:"bytes,1,opt,name=degree,proto3" json:"degree"`
}

func (m *QueryGetDegreeResponse) Reset()         { *m = QueryGetDegreeResponse{} }
func (m *QueryGetDegreeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDegreeResponse) ProtoMessage()    {}
func (*QueryGetDegreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{3}
}
func (m *QueryGetDegreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDegreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDegreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDegreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDegreeResponse.Merge(m, src)
}
func (m *QueryGetDegreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDegreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDegreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDegreeResponse proto.InternalMessageInfo

func (m *QueryGetDegreeResponse) GetDegree() Degree {
	if m != nil {
		return m.Degree
	}
	return Degree{}
}

type QueryAllDegreeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDegreeRequest) Reset()         { *m = QueryAllDegreeRequest{} }
func (m *QueryAllDegreeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDegreeRequest) ProtoMessage()    {}
func (*QueryAllDegreeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{4}
}
func (m *QueryAllDegreeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDegreeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDegreeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDegreeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDegreeRequest.Merge(m, src)
}
func (m *QueryAllDegreeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDegreeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDegreeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDegreeRequest proto.InternalMessageInfo

func (m *QueryAllDegreeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDegreeResponse struct {
	Degree     []Degree            `protobuf:"bytes,1,rep,name=degree,proto3" json:"degree"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDegreeResponse) Reset()         { *m = QueryAllDegreeResponse{} }
func (m *QueryAllDegreeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDegreeResponse) ProtoMessage()    {}
func (*QueryAllDegreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{5}
}
func (m *QueryAllDegreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDegreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDegreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDegreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDegreeResponse.Merge(m, src)
}
func (m *QueryAllDegreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDegreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDegreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDegreeResponse proto.InternalMessageInfo

func (m *QueryAllDegreeResponse) GetDegree() []Degree {
	if m != nil {
		return m.Degree
	}
	return nil
}

func (m *QueryAllDegreeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDegreesByStudentRequest struct {
	StudentId  string             `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDegreesByStudentRequest) Reset()         { *m = QueryDegreesByStudentRequest{} }
func (m *QueryDegreesByStudentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDegreesByStudentRequest) ProtoMessage()    {}
func (*QueryDegreesByStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{6}
}
func (m *QueryDegreesByStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDegreesByStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDegreesByStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDegreesByStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDegreesByStudentRequest.Merge(m, src)
}
func (m *QueryDegreesByStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDegreesByStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDegreesByStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDegreesByStudentRequest proto.InternalMessageInfo

func (m *QueryDegreesByStudentRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *QueryDegreesByStudentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDegreesByStudentResponse struct {
	Degrees    []Degree            `protobuf:"bytes,1,rep,name=degrees,proto3" json:"degrees"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDegreesByStudentResponse) Reset()         { *m = QueryDegreesByStudentResponse{} }
func (m *QueryDegreesByStudentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDegreesByStudentResponse) ProtoMessage()    {}
func (*QueryDegreesByStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{7}
}
func (m *QueryDegreesByStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDegreesByStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDegreesByStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDegreesByStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDegreesByStudentResponse.Merge(m, src)
}
func (m *QueryDegreesByStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDegreesByStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDegreesByStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDegreesByStudentResponse proto.InternalMessageInfo

func (m *QueryDegreesByStudentResponse) GetDegrees() []Degree {
	if m != nil {
		return m.Degrees
	}
	return nil
}

func (m *QueryDegreesByStudentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDegreesByInstitutionRequest struct {
	InstitutionId string             `protobuf:"bytes,1,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDegreesByInstitutionRequest) Reset()         { *m = QueryDegreesByInstitutionRequest{} }
func (m *QueryDegreesByInstitutionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDegreesByInstitutionRequest) ProtoMessage()    {}
func (*QueryDegreesByInstitutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{8}
}
func (m *QueryDegreesByInstitutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDegreesByInstitutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDegreesByInstitutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDegreesByInstitutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDegreesByInstitutionRequest.Merge(m, src)
}
func (m *QueryDegreesByInstitutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDegreesByInstitutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDegreesByInstitutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDegreesByInstitutionRequest proto.InternalMessageInfo

func (m *QueryDegreesByInstitutionRequest) GetInstitutionId() string {
	if m != nil {
		return m.InstitutionId
	}
	return ""
}

func (m *QueryDegreesByInstitutionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDegreesByInstitutionResponse struct {
	Degrees    []Degree            `protobuf:"bytes,1,rep,name=degrees,proto3" json:"degrees"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDegreesByInstitutionResponse) Reset()         { *m = QueryDegreesByInstitutionResponse{} }
func (m *QueryDegreesByInstitutionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDegreesByInstitutionResponse) ProtoMessage()    {}
func (*QueryDegreesByInstitutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{9}
}
func (m *QueryDegreesByInstitutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDegreesByInstitutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDegreesByInstitutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDegreesByInstitutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDegreesByInstitutionResponse.Merge(m, src)
}
func (m *QueryDegreesByInstitutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDegreesByInstitutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDegreesByInstitutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDegreesByInstitutionResponse proto.InternalMessageInfo

func (m *QueryDegreesByInstitutionResponse) GetDegrees() []Degree {
	if m != nil {
		return m.Degrees
	}
	return nil
}

func (m *QueryDegreesByInstitutionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDegreeRequestsRequest struct {
	Status     string             `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDegreeRequestsRequest) Reset()         { *m = QueryDegreeRequestsRequest{} }
func (m *QueryDegreeRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDegreeRequestsRequest) ProtoMessage()    {}
func (*QueryDegreeRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{10}
}
func (m *QueryDegreeRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDegreeRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDegreeRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDegreeRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDegreeRequestsRequest.Merge(m, src)
}
func (m *QueryDegreeRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDegreeRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDegreeRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDegreeRequestsRequest proto.InternalMessageInfo

func (m *QueryDegreeRequestsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryDegreeRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDegreeRequestsResponse struct {
	Requests   []DegreeRequest     `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDegreeRequestsResponse) Reset()         { *m = QueryDegreeRequestsResponse{} }
func (m *QueryDegreeRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDegreeRequestsResponse) ProtoMessage()    {}
func (*QueryDegreeRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{11}
}
func (m *QueryDegreeRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDegreeRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDegreeRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDegreeRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDegreeRequestsResponse.Merge(m, src)
}
func (m *QueryDegreeRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDegreeRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDegreeRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDegreeRequestsResponse proto.InternalMessageInfo

func (m *QueryDegreeRequestsResponse) GetRequests() []DegreeRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *QueryDegreeRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDegreeValidationStatusRequest struct {
	DegreeId string `protobuf:"bytes,1,opt,name=degree_id,json=degreeId,proto3" json:"degree_id,omitempty"`
}

func (m *QueryDegreeValidationStatusRequest) Reset()         { *m = QueryDegreeValidationStatusRequest{} }
func (m *QueryDegreeValidationStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDegreeValidationStatusRequest) ProtoMessage()    {}
func (*QueryDegreeValidationStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{12}
}
func (m *QueryDegreeValidationStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDegreeValidationStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDegreeValidationStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDegreeValidationStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDegreeValidationStatusRequest.Merge(m, src)
}
func (m *QueryDegreeValidationStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDegreeValidationStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDegreeValidationStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDegreeValidationStatusRequest proto.InternalMessageInfo

func (m *QueryDegreeValidationStatusRequest) GetDegreeId() string {
	if m != nil {
		return m.DegreeId
	}
	return ""
}

type QueryDegreeValidationStatusResponse struct {
	Status            string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ValidationScore   string `protobuf:"bytes,2,opt,name=validation_score,json=validationScore,proto3" json:"validation_score,omitempty"`
	ValidationDate    string `protobuf:"bytes,3,opt,name=validation_date,json=validationDate,proto3" json:"validation_date,omitempty"`
	ValidationDetails string `protobuf:"bytes,4,opt,name=validation_details,json=validationDetails,proto3" json:"validation_details,omitempty"`
}

func (m *QueryDegreeValidationStatusResponse) Reset()         { *m = QueryDegreeValidationStatusResponse{} }
func (m *QueryDegreeValidationStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDegreeValidationStatusResponse) ProtoMessage()    {}
func (*QueryDegreeValidationStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c05b3c9c35b5f4, []int{13}
}
func (m *QueryDegreeValidationStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDegreeValidationStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDegreeValidationStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDegreeValidationStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDegreeValidationStatusResponse.Merge(m, src)
}
func (m *QueryDegreeValidationStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDegreeValidationStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDegreeValidationStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDegreeValidationStatusResponse proto.InternalMessageInfo

func (m *QueryDegreeValidationStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryDegreeValidationStatusResponse) GetValidationScore() string {
	if m != nil {
		return m.ValidationScore
	}
	return ""
}

func (m *QueryDegreeValidationStatusResponse) GetValidationDate() string {
	if m != nil {
		return m.ValidationDate
	}
	return ""
}

func (m *QueryDegreeValidationStatusResponse) GetValidationDetails() string {
	if m != nil {
		return m.ValidationDetails
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "academictoken.degree.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "academictoken.degree.QueryParamsResponse")
	proto.RegisterType((*QueryGetDegreeRequest)(nil), "academictoken.degree.QueryGetDegreeRequest")
	proto.RegisterType((*QueryGetDegreeResponse)(nil), "academictoken.degree.QueryGetDegreeResponse")
	proto.RegisterType((*QueryAllDegreeRequest)(nil), "academictoken.degree.QueryAllDegreeRequest")
	proto.RegisterType((*QueryAllDegreeResponse)(nil), "academictoken.degree.QueryAllDegreeResponse")
	proto.RegisterType((*QueryDegreesByStudentRequest)(nil), "academictoken.degree.QueryDegreesByStudentRequest")
	proto.RegisterType((*QueryDegreesByStudentResponse)(nil), "academictoken.degree.QueryDegreesByStudentResponse")
	proto.RegisterType((*QueryDegreesByInstitutionRequest)(nil), "academictoken.degree.QueryDegreesByInstitutionRequest")
	proto.RegisterType((*QueryDegreesByInstitutionResponse)(nil), "academictoken.degree.QueryDegreesByInstitutionResponse")
	proto.RegisterType((*QueryDegreeRequestsRequest)(nil), "academictoken.degree.QueryDegreeRequestsRequest")
	proto.RegisterType((*QueryDegreeRequestsResponse)(nil), "academictoken.degree.QueryDegreeRequestsResponse")
	proto.RegisterType((*QueryDegreeValidationStatusRequest)(nil), "academictoken.degree.QueryDegreeValidationStatusRequest")
	proto.RegisterType((*QueryDegreeValidationStatusResponse)(nil), "academictoken.degree.QueryDegreeValidationStatusResponse")
}

func init() { proto.RegisterFile("academictoken/degree/query.proto", fileDescriptor_35c05b3c9c35b5f4) }

var fileDescriptor_35c05b3c9c35b5f4 = []byte{
	// 873 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xcf, 0x4f, 0x2b, 0x55,
	0x14, 0xc7, 0x7b, 0x79, 0xef, 0xd5, 0xd7, 0x63, 0xc4, 0xe7, 0xb5, 0x12, 0x32, 0x94, 0xb1, 0x0c,
	0xc8, 0x0f, 0xa5, 0x33, 0x02, 0x01, 0xfc, 0x45, 0x0c, 0x04, 0x24, 0xec, 0xa0, 0x18, 0x17, 0x6e,
	0x9a, 0xdb, 0xce, 0x4d, 0x33, 0xb1, 0xcc, 0x94, 0xde, 0x5b, 0x42, 0x83, 0xdd, 0x68, 0xdc, 0xb9,
	0x90, 0xb8, 0x66, 0xeb, 0x42, 0xe3, 0x3f, 0xe0, 0xca, 0x25, 0x71, 0x61, 0x48, 0xdc, 0xb8, 0x32,
	0x06, 0xfc, 0x43, 0x4c, 0xef, 0xbd, 0xd3, 0x99, 0x29, 0xd3, 0x29, 0x25, 0x5d, 0xbc, 0xd5, 0x7b,
	0x3d, 0xf7, 0x7b, 0xee, 0xf9, 0x9c, 0xef, 0x9d, 0x9c, 0x03, 0xe4, 0x49, 0x85, 0xd8, 0xf4, 0xc4,
	0xa9, 0x70, 0xef, 0x2b, 0xea, 0x5a, 0x36, 0xad, 0x36, 0x28, 0xb5, 0x4e, 0x9b, 0xb4, 0xd1, 0x32,
	0xeb, 0x0d, 0x8f, 0x7b, 0x38, 0x1b, 0x51, 0x98, 0x52, 0xa1, 0x65, 0xab, 0x5e, 0xd5, 0x13, 0x02,
	0xab, 0xf3, 0x3f, 0xa9, 0xd5, 0x72, 0x55, 0xcf, 0xab, 0xd6, 0xa8, 0x45, 0xea, 0x8e, 0x45, 0x5c,
	0xd7, 0xe3, 0x84, 0x3b, 0x9e, 0xcb, 0xd4, 0xe9, 0xbb, 0x15, 0x8f, 0x9d, 0x78, 0xcc, 0x2a, 0x13,
	0xa6, 0x4a, 0x58, 0x67, 0x2b, 0x65, 0xca, 0xc9, 0x8a, 0x55, 0x27, 0x55, 0xc7, 0x15, 0x62, 0xa5,
	0x9d, 0x89, 0xe5, 0xaa, 0x93, 0x06, 0x39, 0x61, 0x89, 0x12, 0xf9, 0x8f, 0x92, 0x2c, 0x25, 0x48,
	0x4a, 0x0d, 0x7a, 0xda, 0xa4, 0x8c, 0x4b, 0xa9, 0x91, 0x05, 0x7c, 0xd4, 0x41, 0x3a, 0x14, 0x25,
	0x8a, 0xf2, 0xcc, 0x38, 0x82, 0x37, 0x23, 0x51, 0x56, 0xf7, 0x5c, 0x46, 0xf1, 0x47, 0x90, 0x96,
	0x28, 0x93, 0x28, 0x8f, 0x16, 0x5f, 0x5d, 0xcd, 0x99, 0x71, 0x26, 0x99, 0x32, 0x6b, 0xe7, 0xe9,
	0xf5, 0x3f, 0x6f, 0xa7, 0x8a, 0x2a, 0xc3, 0x28, 0xc0, 0x5b, 0xe2, 0xca, 0x7d, 0xca, 0x77, 0x85,
	0x4c, 0xd5, 0xc2, 0x59, 0x78, 0xe6, 0xb8, 0x36, 0x3d, 0x17, 0x77, 0x66, 0x8a, 0xf2, 0x87, 0xf1,
	0x39, 0x4c, 0xf4, 0xca, 0x03, 0x08, 0x59, 0x27, 0x19, 0x42, 0x66, 0xf9, 0x10, 0x32, 0x68, 0x94,
	0x14, 0xc4, 0x76, 0xad, 0x16, 0x85, 0xf8, 0x0c, 0x20, 0x78, 0x0b, 0x75, 0xf1, 0xbc, 0x29, 0x1f,
	0xce, 0xec, 0x3c, 0x9c, 0x29, 0xbf, 0x0d, 0xf5, 0x70, 0xe6, 0x21, 0xa9, 0xfa, 0xb9, 0xc5, 0x50,
	0xa6, 0x71, 0x85, 0x14, 0x77, 0xa8, 0x42, 0x0c, 0xf7, 0x93, 0xe1, 0xb8, 0xf1, 0x7e, 0x04, 0x6f,
	0x4c, 0xe0, 0x2d, 0x0c, 0xc4, 0x93, 0x85, 0x23, 0x7c, 0xdf, 0x21, 0xc8, 0x09, 0x3e, 0x59, 0x86,
	0xed, 0xb4, 0x8e, 0x79, 0xd3, 0xa6, 0x2e, 0xf7, 0x8d, 0x98, 0x06, 0x60, 0x32, 0x52, 0x72, 0x6c,
	0xf5, 0x24, 0x19, 0x15, 0x39, 0xb0, 0x7b, 0x7c, 0x1a, 0x7b, 0xb4, 0x4f, 0x3f, 0x21, 0x98, 0xee,
	0xc3, 0xa1, 0xec, 0xfa, 0x04, 0x5e, 0x91, 0xcd, 0xb3, 0x21, 0xfc, 0xf2, 0x53, 0x46, 0x67, 0xd8,
	0x25, 0x82, 0x7c, 0x14, 0xf4, 0xc0, 0x65, 0xdc, 0xe1, 0xcd, 0xce, 0xa9, 0x6f, 0xda, 0x3b, 0x30,
	0xee, 0x04, 0xd1, 0xc0, 0xb8, 0xd7, 0x42, 0xd1, 0x11, 0x9a, 0xf7, 0x33, 0x82, 0x99, 0x04, 0xa6,
	0x97, 0xcb, 0xc0, 0xaf, 0x41, 0x0b, 0xb1, 0xaa, 0x76, 0xfc, 0x41, 0x83, 0x27, 0x20, 0xcd, 0x38,
	0xe1, 0x4d, 0xa6, 0x1c, 0x53, 0xbf, 0x46, 0x66, 0xd5, 0xaf, 0x08, 0xa6, 0x62, 0xcb, 0x2b, 0x93,
	0xf6, 0xe0, 0xb9, 0x9a, 0x87, 0xbe, 0x4b, 0xb3, 0x49, 0x2e, 0xa9, 0x7c, 0x65, 0x56, 0x37, 0x75,
	0x74, 0x6e, 0x6d, 0x83, 0x11, 0xc2, 0xfd, 0x82, 0xd4, 0x1c, 0x5b, 0x1c, 0x1c, 0x0b, 0x5b, 0x7c,
	0xd7, 0xa6, 0x20, 0xa3, 0x86, 0x79, 0xf7, 0x53, 0x7b, 0x2e, 0x03, 0x07, 0xb6, 0xf1, 0x3b, 0x82,
	0xd9, 0xc4, 0x3b, 0x54, 0xeb, 0xfd, 0xac, 0x5f, 0x82, 0x17, 0x67, 0xdd, 0x9c, 0x12, 0xab, 0x78,
	0x0d, 0x2a, 0x3a, 0xca, 0x14, 0x5f, 0x0f, 0xe2, 0xc7, 0x9d, 0x30, 0x5e, 0x80, 0x50, 0xa8, 0x64,
	0x13, 0x4e, 0x27, 0x9f, 0x08, 0xe5, 0x78, 0x10, 0xde, 0x25, 0x9c, 0xe2, 0x02, 0xe0, 0xb0, 0x90,
	0x72, 0xe2, 0xd4, 0xd8, 0xe4, 0x53, 0xa1, 0x7d, 0x23, 0xa4, 0x95, 0x07, 0xab, 0xbf, 0x64, 0xe0,
	0x99, 0x68, 0x01, 0x7f, 0x8b, 0x20, 0x2d, 0xd7, 0x09, 0x5e, 0x8c, 0x7f, 0x98, 0xfb, 0xdb, 0x4b,
	0x5b, 0x7a, 0x80, 0x52, 0x9a, 0x60, 0xcc, 0x7d, 0xf3, 0xd7, 0x7f, 0x3f, 0x8e, 0xe9, 0x38, 0x67,
	0x25, 0x2c, 0x5e, 0x7c, 0x89, 0x20, 0x2d, 0xdd, 0xc4, 0xef, 0x25, 0xdc, 0xdd, 0xbb, 0xda, 0xb4,
	0xe5, 0x87, 0x89, 0x15, 0xcb, 0xb2, 0x60, 0x99, 0xc7, 0x73, 0x56, 0xc2, 0xfa, 0xb6, 0x2e, 0xc4,
	0x7e, 0x6c, 0xe3, 0xef, 0x11, 0x64, 0xe4, 0x05, 0xdb, 0xb5, 0x5a, 0x22, 0x56, 0xef, 0xb2, 0x4b,
	0xc4, 0xba, 0xb7, 0xb7, 0x06, 0x59, 0xa4, 0x36, 0xd4, 0x6f, 0x08, 0x5e, 0xf4, 0xce, 0x72, 0xbc,
	0x9a, 0x50, 0xa8, 0xcf, 0x02, 0xd2, 0xd6, 0x86, 0xca, 0x51, 0x8c, 0x5b, 0x82, 0x71, 0x13, 0xaf,
	0x27, 0x31, 0xb2, 0x42, 0xb9, 0x55, 0x50, 0xab, 0xcc, 0xba, 0x08, 0xb6, 0x5c, 0x1b, 0xff, 0x89,
	0x20, 0x1b, 0x37, 0x4b, 0xf1, 0xc6, 0x43, 0x60, 0xee, 0x2f, 0x04, 0x6d, 0x73, 0xe8, 0x3c, 0xd5,
	0xc8, 0x9e, 0x68, 0xe4, 0x53, 0xbc, 0x35, 0xb0, 0x91, 0xd0, 0x6a, 0xe9, 0x7c, 0x13, 0xe1, 0xed,
	0xd3, 0xc6, 0x57, 0x08, 0xc6, 0xa3, 0x13, 0x0f, 0xbf, 0x3f, 0x10, 0xa9, 0x67, 0x36, 0x6b, 0x2b,
	0x43, 0x64, 0x28, 0xfc, 0x79, 0x81, 0x9f, 0xc7, 0x7a, 0x3c, 0x7e, 0x77, 0x5e, 0xfe, 0x81, 0x60,
	0x22, 0x7e, 0x3c, 0xe1, 0x0f, 0x06, 0x56, 0xed, 0x33, 0x15, 0xb5, 0x0f, 0x1f, 0x91, 0xa9, 0xb8,
	0x3f, 0x16, 0xdc, 0xeb, 0x78, 0x2d, 0x9e, 0x3b, 0x98, 0x50, 0x05, 0x39, 0x24, 0xad, 0x8b, 0xee,
	0xfc, 0x6d, 0xef, 0x6c, 0x5c, 0xdf, 0xea, 0xe8, 0xe6, 0x56, 0x47, 0xff, 0xde, 0xea, 0xe8, 0x87,
	0x3b, 0x3d, 0x75, 0x73, 0xa7, 0xa7, 0xfe, 0xbe, 0xd3, 0x53, 0x5f, 0xe6, 0xa2, 0xb7, 0x9d, 0xfb,
	0xf7, 0xf1, 0x56, 0x9d, 0xb2, 0x72, 0x5a, 0xfc, 0x05, 0xbe, 0xf6, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x45, 0xff, 0x0c, 0x11, 0x8c, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Degree by index.
	Degree(ctx context.Context, in *QueryGetDegreeRequest, opts ...grpc.CallOption) (*QueryGetDegreeResponse, error)
	// Queries a list of Degree items.
	DegreeAll(ctx context.Context, in *QueryAllDegreeRequest, opts ...grpc.CallOption) (*QueryAllDegreeResponse, error)
	// Queries degrees by student ID
	DegreesByStudent(ctx context.Context, in *QueryDegreesByStudentRequest, opts ...grpc.CallOption) (*QueryDegreesByStudentResponse, error)
	// Queries degrees by institution ID
	DegreesByInstitution(ctx context.Context, in *QueryDegreesByInstitutionRequest, opts ...grpc.CallOption) (*QueryDegreesByInstitutionResponse, error)
	// Queries degree requests (pending degrees)
	DegreeRequests(ctx context.Context, in *QueryDegreeRequestsRequest, opts ...grpc.CallOption) (*QueryDegreeRequestsResponse, error)
	// Queries degree validation status
	DegreeValidationStatus(ctx context.Context, in *QueryDegreeValidationStatusRequest, opts ...grpc.CallOption) (*QueryDegreeValidationStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Degree(ctx context.Context, in *QueryGetDegreeRequest, opts ...grpc.CallOption) (*QueryGetDegreeResponse, error) {
	out := new(QueryGetDegreeResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Query/Degree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreeAll(ctx context.Context, in *QueryAllDegreeRequest, opts ...grpc.CallOption) (*QueryAllDegreeResponse, error) {
	out := new(QueryAllDegreeResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Query/DegreeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreesByStudent(ctx context.Context, in *QueryDegreesByStudentRequest, opts ...grpc.CallOption) (*QueryDegreesByStudentResponse, error) {
	out := new(QueryDegreesByStudentResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Query/DegreesByStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreesByInstitution(ctx context.Context, in *QueryDegreesByInstitutionRequest, opts ...grpc.CallOption) (*QueryDegreesByInstitutionResponse, error) {
	out := new(QueryDegreesByInstitutionResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Query/DegreesByInstitution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreeRequests(ctx context.Context, in *QueryDegreeRequestsRequest, opts ...grpc.CallOption) (*QueryDegreeRequestsResponse, error) {
	out := new(QueryDegreeRequestsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Query/DegreeRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreeValidationStatus(ctx context.Context, in *QueryDegreeValidationStatusRequest, opts ...grpc.CallOption) (*QueryDegreeValidationStatusResponse, error) {
	out := new(QueryDegreeValidationStatusResponse)
	err := c.cc.Invoke(ctx, "/academictoken.degree.Query/DegreeValidationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Degree by index.
	Degree(context.Context, *QueryGetDegreeRequest) (*QueryGetDegreeResponse, error)
	// Queries a list of Degree items.
	DegreeAll(context.Context, *QueryAllDegreeRequest) (*QueryAllDegreeResponse, error)
	// Queries degrees by student ID
	DegreesByStudent(context.Context, *QueryDegreesByStudentRequest) (*QueryDegreesByStudentResponse, error)
	// Queries degrees by institution ID
	DegreesByInstitution(context.Context, *QueryDegreesByInstitutionRequest) (*QueryDegreesByInstitutionResponse, error)
	// Queries degree requests (pending degrees)
	DegreeRequests(context.Context, *QueryDegreeRequestsRequest) (*QueryDegreeRequestsResponse, error)
	// Queries degree validation status
	DegreeValidationStatus(context.Context, *QueryDegreeValidationStatusRequest) (*QueryDegreeValidationStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Degree(ctx context.Context, req *QueryGetDegreeRequest) (*QueryGetDegreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Degree not implemented")
}
func (*UnimplementedQueryServer) DegreeAll(ctx context.Context, req *QueryAllDegreeRequest) (*QueryAllDegreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreeAll not implemented")
}
func (*UnimplementedQueryServer) DegreesByStudent(ctx context.Context, req *QueryDegreesByStudentRequest) (*QueryDegreesByStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreesByStudent not implemented")
}
func (*UnimplementedQueryServer) DegreesByInstitution(ctx context.Context, req *QueryDegreesByInstitutionRequest) (*QueryDegreesByInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreesByInstitution not implemented")
}
func (*UnimplementedQueryServer) DegreeRequests(ctx context.Context, req *QueryDegreeRequestsRequest) (*QueryDegreeRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreeRequests not implemented")
}
func (*UnimplementedQueryServer) DegreeValidationStatus(ctx context.Context, req *QueryDegreeValidationStatusRequest) (*QueryDegreeValidationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreeValidationStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Degree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Degree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Query/Degree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Degree(ctx, req.(*QueryGetDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Query/DegreeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreeAll(ctx, req.(*QueryAllDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreesByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDegreesByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreesByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Query/DegreesByStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreesByStudent(ctx, req.(*QueryDegreesByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreesByInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDegreesByInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreesByInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Query/DegreesByInstitution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreesByInstitution(ctx, req.(*QueryDegreesByInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDegreeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Query/DegreeRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreeRequests(ctx, req.(*QueryDegreeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreeValidationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDegreeValidationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreeValidationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.degree.Query/DegreeValidationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreeValidationStatus(ctx, req.(*QueryDegreeValidationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.degree.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Degree",
			Handler:    _Query_Degree_Handler,
		},
		{
			MethodName: "DegreeAll",
			Handler:    _Query_DegreeAll_Handler,
		},
		{
			MethodName: "DegreesByStudent",
			Handler:    _Query_DegreesByStudent_Handler,
		},
		{
			MethodName: "DegreesByInstitution",
			Handler:    _Query_DegreesByInstitution_Handler,
		},
		{
			MethodName: "DegreeRequests",
			Handler:    _Query_DegreeRequests_Handler,
		},
		{
			MethodName: "DegreeValidationStatus",
			Handler:    _Query_DegreeValidationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/degree/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetDegreeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDegreeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDegreeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDegreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDegreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDegreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Degree.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDegreeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDegreeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDegreeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDegreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDegreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDegreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Degree) > 0 {
		for iNdEx := len(m.Degree) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Degree[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDegreesByStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDegreesByStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDegreesByStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDegreesByStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDegreesByStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDegreesByStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Degrees) > 0 {
		for iNdEx := len(m.Degrees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Degrees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDegreesByInstitutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDegreesByInstitutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDegreesByInstitutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InstitutionId) > 0 {
		i -= len(m.InstitutionId)
		copy(dAtA[i:], m.InstitutionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InstitutionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDegreesByInstitutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDegreesByInstitutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDegreesByInstitutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Degrees) > 0 {
		for iNdEx := len(m.Degrees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Degrees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDegreeRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDegreeRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDegreeRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDegreeRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDegreeRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDegreeRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDegreeValidationStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDegreeValidationStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDegreeValidationStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DegreeId) > 0 {
		i -= len(m.DegreeId)
		copy(dAtA[i:], m.DegreeId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DegreeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDegreeValidationStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDegreeValidationStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDegreeValidationStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidationDetails) > 0 {
		i -= len(m.ValidationDetails)
		copy(dAtA[i:], m.ValidationDetails)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidationDetails)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidationDate) > 0 {
		i -= len(m.ValidationDate)
		copy(dAtA[i:], m.ValidationDate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidationDate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidationScore) > 0 {
		i -= len(m.ValidationScore)
		copy(dAtA[i:], m.ValidationScore)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidationScore)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetDegreeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDegreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Degree.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDegreeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDegreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Degree) > 0 {
		for _, e := range m.Degree {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDegreesByStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDegreesByStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Degrees) > 0 {
		for _, e := range m.Degrees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDegreesByInstitutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InstitutionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDegreesByInstitutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Degrees) > 0 {
		for _, e := range m.Degrees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDegreeRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDegreeRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDegreeValidationStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DegreeId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDegreeValidationStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidationScore)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidationDate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidationDetails)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDegreeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDegreeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDegreeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDegreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDegreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDegreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Degree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Degree.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDegreeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDegreeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDegreeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDegreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDegreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDegreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Degree", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Degree = append(m.Degree, Degree{})
			if err := m.Degree[len(m.Degree)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDegreesByStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDegreesByStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDegreesByStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDegreesByStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDegreesByStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDegreesByStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Degrees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Degrees = append(m.Degrees, Degree{})
			if err := m.Degrees[len(m.Degrees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDegreesByInstitutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDegreesByInstitutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDegreesByInstitutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstitutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstitutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDegreesByInstitutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDegreesByInstitutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDegreesByInstitutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Degrees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Degrees = append(m.Degrees, Degree{})
			if err := m.Degrees[len(m.Degrees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDegreeRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDegreeRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDegreeRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDegreeRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDegreeRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDegreeRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, DegreeRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDegreeValidationStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDegreeValidationStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDegreeValidationStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DegreeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DegreeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDegreeValidationStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDegreeValidationStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDegreeValidationStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationScore", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationScore = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidationDetails", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidationDetails = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
