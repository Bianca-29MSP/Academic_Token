// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/elective_group.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ElectiveGroup struct {
	GroupId             string   `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Name                string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description         string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SubjectIds          []string `protobuf:"bytes,4,rep,name=subjectIds,proto3" json:"subjectIds,omitempty"`
	MinSubjectsRequired string   `protobuf:"bytes,5,opt,name=minSubjectsRequired,proto3" json:"minSubjectsRequired,omitempty"`
	CreditsRequired     string   `protobuf:"bytes,6,opt,name=creditsRequired,proto3" json:"creditsRequired,omitempty"`
	KnowledgeArea       string   `protobuf:"bytes,7,opt,name=knowledgeArea,proto3" json:"knowledgeArea,omitempty"`
}

func (m *ElectiveGroup) Reset()         { *m = ElectiveGroup{} }
func (m *ElectiveGroup) String() string { return proto.CompactTextString(m) }
func (*ElectiveGroup) ProtoMessage()    {}
func (*ElectiveGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_704ebf7ac8ac5e03, []int{0}
}
func (m *ElectiveGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElectiveGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ElectiveGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ElectiveGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElectiveGroup.Merge(m, src)
}
func (m *ElectiveGroup) XXX_Size() int {
	return m.Size()
}
func (m *ElectiveGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ElectiveGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ElectiveGroup proto.InternalMessageInfo

func (m *ElectiveGroup) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *ElectiveGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ElectiveGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ElectiveGroup) GetSubjectIds() []string {
	if m != nil {
		return m.SubjectIds
	}
	return nil
}

func (m *ElectiveGroup) GetMinSubjectsRequired() string {
	if m != nil {
		return m.MinSubjectsRequired
	}
	return ""
}

func (m *ElectiveGroup) GetCreditsRequired() string {
	if m != nil {
		return m.CreditsRequired
	}
	return ""
}

func (m *ElectiveGroup) GetKnowledgeArea() string {
	if m != nil {
		return m.KnowledgeArea
	}
	return ""
}

func init() {
	proto.RegisterType((*ElectiveGroup)(nil), "academictoken.curriculum.ElectiveGroup")
}

func init() {
	proto.RegisterFile("academictoken/curriculum/elective_group.proto", fileDescriptor_704ebf7ac8ac5e03)
}

var fileDescriptor_704ebf7ac8ac5e03 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xe3, 0xb6, 0xb4, 0xea, 0x45, 0x15, 0x92, 0x59, 0x3c, 0x59, 0x11, 0x62, 0xc8, 0x42,
	0x8b, 0xc4, 0xc6, 0x06, 0x12, 0x42, 0x5d, 0xc3, 0xc6, 0x82, 0x52, 0xfb, 0xaa, 0x32, 0x4d, 0xec,
	0xe0, 0x1f, 0x7e, 0x46, 0xde, 0x80, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0x18, 0x10,
	0x09, 0x62, 0xb3, 0xbf, 0xf3, 0x9d, 0x3b, 0x1c, 0x38, 0x2a, 0x44, 0x21, 0xb1, 0x52, 0xc2, 0x9b,
	0x0d, 0xea, 0x85, 0x08, 0xd6, 0x2a, 0x11, 0xca, 0x50, 0x2d, 0xb0, 0x44, 0xe1, 0xd5, 0x3d, 0xde,
	0xac, 0xad, 0x09, 0xf5, 0xbc, 0xb6, 0xc6, 0x1b, 0xca, 0x7a, 0xfa, 0xfc, 0x57, 0x3f, 0x78, 0x1e,
	0xc0, 0xec, 0xe2, 0xbb, 0x72, 0xf9, 0xd9, 0xa0, 0x0c, 0x26, 0xb1, 0xba, 0x94, 0x8c, 0xa4, 0x24,
	0x9b, 0xe6, 0x3f, 0x5f, 0x4a, 0x61, 0xa4, 0x8b, 0x0a, 0xd9, 0x20, 0xe2, 0xf8, 0xa6, 0x29, 0xec,
	0x4a, 0x74, 0xc2, 0xaa, 0xda, 0x2b, 0xa3, 0xd9, 0x30, 0x46, 0x5d, 0x44, 0x39, 0x80, 0x0b, 0xab,
	0x5b, 0x14, 0x7e, 0x29, 0x1d, 0x1b, 0xa5, 0xc3, 0x6c, 0x9a, 0x77, 0x08, 0x3d, 0x86, 0xfd, 0x4a,
	0xe9, 0xab, 0x2f, 0xe0, 0x72, 0xbc, 0x0b, 0xca, 0xa2, 0x64, 0x3b, 0xf1, 0xd2, 0x7f, 0x11, 0xcd,
	0x60, 0x4f, 0x58, 0x94, 0xaa, 0x63, 0x8f, 0xa3, 0xfd, 0x17, 0xd3, 0x43, 0x98, 0x6d, 0xb4, 0x79,
	0x28, 0x51, 0xae, 0xf1, 0xcc, 0x62, 0xc1, 0x26, 0xd1, 0xeb, 0xc3, 0xf3, 0xd3, 0xd7, 0x86, 0x93,
	0x6d, 0xc3, 0xc9, 0x7b, 0xc3, 0xc9, 0x4b, 0xcb, 0x93, 0x6d, 0xcb, 0x93, 0xb7, 0x96, 0x27, 0xd7,
	0x69, 0x7f, 0xe6, 0xc7, 0xee, 0xd0, 0xfe, 0xa9, 0x46, 0xb7, 0x1a, 0xc7, 0x81, 0x4f, 0x3e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x4f, 0x3f, 0x0d, 0x0f, 0x91, 0x01, 0x00, 0x00,
}

func (m *ElectiveGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElectiveGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElectiveGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KnowledgeArea) > 0 {
		i -= len(m.KnowledgeArea)
		copy(dAtA[i:], m.KnowledgeArea)
		i = encodeVarintElectiveGroup(dAtA, i, uint64(len(m.KnowledgeArea)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreditsRequired) > 0 {
		i -= len(m.CreditsRequired)
		copy(dAtA[i:], m.CreditsRequired)
		i = encodeVarintElectiveGroup(dAtA, i, uint64(len(m.CreditsRequired)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MinSubjectsRequired) > 0 {
		i -= len(m.MinSubjectsRequired)
		copy(dAtA[i:], m.MinSubjectsRequired)
		i = encodeVarintElectiveGroup(dAtA, i, uint64(len(m.MinSubjectsRequired)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SubjectIds) > 0 {
		for iNdEx := len(m.SubjectIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectIds[iNdEx])
			copy(dAtA[i:], m.SubjectIds[iNdEx])
			i = encodeVarintElectiveGroup(dAtA, i, uint64(len(m.SubjectIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintElectiveGroup(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintElectiveGroup(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintElectiveGroup(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintElectiveGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovElectiveGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ElectiveGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovElectiveGroup(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovElectiveGroup(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovElectiveGroup(uint64(l))
	}
	if len(m.SubjectIds) > 0 {
		for _, s := range m.SubjectIds {
			l = len(s)
			n += 1 + l + sovElectiveGroup(uint64(l))
		}
	}
	l = len(m.MinSubjectsRequired)
	if l > 0 {
		n += 1 + l + sovElectiveGroup(uint64(l))
	}
	l = len(m.CreditsRequired)
	if l > 0 {
		n += 1 + l + sovElectiveGroup(uint64(l))
	}
	l = len(m.KnowledgeArea)
	if l > 0 {
		n += 1 + l + sovElectiveGroup(uint64(l))
	}
	return n
}

func sovElectiveGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozElectiveGroup(x uint64) (n int) {
	return sovElectiveGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ElectiveGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElectiveGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElectiveGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElectiveGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectIds = append(m.SubjectIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSubjectsRequired", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinSubjectsRequired = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditsRequired", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditsRequired = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnowledgeArea", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KnowledgeArea = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElectiveGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthElectiveGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipElectiveGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowElectiveGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElectiveGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthElectiveGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupElectiveGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthElectiveGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthElectiveGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowElectiveGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupElectiveGroup = fmt.Errorf("proto: unexpected end of group")
)
