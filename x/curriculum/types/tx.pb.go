// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/tx.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgCreateCurriculumTree struct {
	Creator            string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CourseId           string   `protobuf:"bytes,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	Version            string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ElectiveMin        uint64   `protobuf:"varint,4,opt,name=electiveMin,proto3" json:"electiveMin,omitempty"`
	TotalWorkloadHours uint64   `protobuf:"varint,5,opt,name=totalWorkloadHours,proto3" json:"totalWorkloadHours,omitempty"`
	RequiredSubjects   []string `protobuf:"bytes,6,rep,name=requiredSubjects,proto3" json:"requiredSubjects,omitempty"`
	ElectiveSubjects   []string `protobuf:"bytes,7,rep,name=electiveSubjects,proto3" json:"electiveSubjects,omitempty"`
}

func (m *MsgCreateCurriculumTree) Reset()         { *m = MsgCreateCurriculumTree{} }
func (m *MsgCreateCurriculumTree) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCurriculumTree) ProtoMessage()    {}
func (*MsgCreateCurriculumTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{2}
}
func (m *MsgCreateCurriculumTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCurriculumTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCurriculumTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCurriculumTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCurriculumTree.Merge(m, src)
}
func (m *MsgCreateCurriculumTree) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCurriculumTree) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCurriculumTree.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCurriculumTree proto.InternalMessageInfo

func (m *MsgCreateCurriculumTree) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCurriculumTree) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *MsgCreateCurriculumTree) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MsgCreateCurriculumTree) GetElectiveMin() uint64 {
	if m != nil {
		return m.ElectiveMin
	}
	return 0
}

func (m *MsgCreateCurriculumTree) GetTotalWorkloadHours() uint64 {
	if m != nil {
		return m.TotalWorkloadHours
	}
	return 0
}

func (m *MsgCreateCurriculumTree) GetRequiredSubjects() []string {
	if m != nil {
		return m.RequiredSubjects
	}
	return nil
}

func (m *MsgCreateCurriculumTree) GetElectiveSubjects() []string {
	if m != nil {
		return m.ElectiveSubjects
	}
	return nil
}

type MsgCreateCurriculumTreeResponse struct {
}

func (m *MsgCreateCurriculumTreeResponse) Reset()         { *m = MsgCreateCurriculumTreeResponse{} }
func (m *MsgCreateCurriculumTreeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCurriculumTreeResponse) ProtoMessage()    {}
func (*MsgCreateCurriculumTreeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{3}
}
func (m *MsgCreateCurriculumTreeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCurriculumTreeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCurriculumTreeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCurriculumTreeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCurriculumTreeResponse.Merge(m, src)
}
func (m *MsgCreateCurriculumTreeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCurriculumTreeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCurriculumTreeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCurriculumTreeResponse proto.InternalMessageInfo

type MsgAddSemesterToCurriculum struct {
	Creator         string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CurriculumIndex string   `protobuf:"bytes,2,opt,name=curriculumIndex,proto3" json:"curriculumIndex,omitempty"`
	SemesterNumber  uint64   `protobuf:"varint,3,opt,name=semesterNumber,proto3" json:"semesterNumber,omitempty"`
	SubjectIds      []string `protobuf:"bytes,4,rep,name=subjectIds,proto3" json:"subjectIds,omitempty"`
}

func (m *MsgAddSemesterToCurriculum) Reset()         { *m = MsgAddSemesterToCurriculum{} }
func (m *MsgAddSemesterToCurriculum) String() string { return proto.CompactTextString(m) }
func (*MsgAddSemesterToCurriculum) ProtoMessage()    {}
func (*MsgAddSemesterToCurriculum) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{4}
}
func (m *MsgAddSemesterToCurriculum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddSemesterToCurriculum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddSemesterToCurriculum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddSemesterToCurriculum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddSemesterToCurriculum.Merge(m, src)
}
func (m *MsgAddSemesterToCurriculum) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddSemesterToCurriculum) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddSemesterToCurriculum.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddSemesterToCurriculum proto.InternalMessageInfo

func (m *MsgAddSemesterToCurriculum) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddSemesterToCurriculum) GetCurriculumIndex() string {
	if m != nil {
		return m.CurriculumIndex
	}
	return ""
}

func (m *MsgAddSemesterToCurriculum) GetSemesterNumber() uint64 {
	if m != nil {
		return m.SemesterNumber
	}
	return 0
}

func (m *MsgAddSemesterToCurriculum) GetSubjectIds() []string {
	if m != nil {
		return m.SubjectIds
	}
	return nil
}

type MsgAddSemesterToCurriculumResponse struct {
}

func (m *MsgAddSemesterToCurriculumResponse) Reset()         { *m = MsgAddSemesterToCurriculumResponse{} }
func (m *MsgAddSemesterToCurriculumResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddSemesterToCurriculumResponse) ProtoMessage()    {}
func (*MsgAddSemesterToCurriculumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{5}
}
func (m *MsgAddSemesterToCurriculumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddSemesterToCurriculumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddSemesterToCurriculumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddSemesterToCurriculumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddSemesterToCurriculumResponse.Merge(m, src)
}
func (m *MsgAddSemesterToCurriculumResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddSemesterToCurriculumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddSemesterToCurriculumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddSemesterToCurriculumResponse proto.InternalMessageInfo

type MsgAddElectiveGroup struct {
	Creator             string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CurriculumIndex     string   `protobuf:"bytes,2,opt,name=curriculumIndex,proto3" json:"curriculumIndex,omitempty"`
	Name                string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description         string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	MinSubjectsRequired uint64   `protobuf:"varint,5,opt,name=minSubjectsRequired,proto3" json:"minSubjectsRequired,omitempty"`
	CreditsRequired     uint64   `protobuf:"varint,6,opt,name=creditsRequired,proto3" json:"creditsRequired,omitempty"`
	KnowledgeArea       string   `protobuf:"bytes,7,opt,name=knowledgeArea,proto3" json:"knowledgeArea,omitempty"`
	SubjectIds          []string `protobuf:"bytes,8,rep,name=subjectIds,proto3" json:"subjectIds,omitempty"`
}

func (m *MsgAddElectiveGroup) Reset()         { *m = MsgAddElectiveGroup{} }
func (m *MsgAddElectiveGroup) String() string { return proto.CompactTextString(m) }
func (*MsgAddElectiveGroup) ProtoMessage()    {}
func (*MsgAddElectiveGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{6}
}
func (m *MsgAddElectiveGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddElectiveGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddElectiveGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddElectiveGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddElectiveGroup.Merge(m, src)
}
func (m *MsgAddElectiveGroup) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddElectiveGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddElectiveGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddElectiveGroup proto.InternalMessageInfo

func (m *MsgAddElectiveGroup) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddElectiveGroup) GetCurriculumIndex() string {
	if m != nil {
		return m.CurriculumIndex
	}
	return ""
}

func (m *MsgAddElectiveGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgAddElectiveGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgAddElectiveGroup) GetMinSubjectsRequired() uint64 {
	if m != nil {
		return m.MinSubjectsRequired
	}
	return 0
}

func (m *MsgAddElectiveGroup) GetCreditsRequired() uint64 {
	if m != nil {
		return m.CreditsRequired
	}
	return 0
}

func (m *MsgAddElectiveGroup) GetKnowledgeArea() string {
	if m != nil {
		return m.KnowledgeArea
	}
	return ""
}

func (m *MsgAddElectiveGroup) GetSubjectIds() []string {
	if m != nil {
		return m.SubjectIds
	}
	return nil
}

type MsgAddElectiveGroupResponse struct {
}

func (m *MsgAddElectiveGroupResponse) Reset()         { *m = MsgAddElectiveGroupResponse{} }
func (m *MsgAddElectiveGroupResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddElectiveGroupResponse) ProtoMessage()    {}
func (*MsgAddElectiveGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{7}
}
func (m *MsgAddElectiveGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddElectiveGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddElectiveGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddElectiveGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddElectiveGroupResponse.Merge(m, src)
}
func (m *MsgAddElectiveGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddElectiveGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddElectiveGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddElectiveGroupResponse proto.InternalMessageInfo

type MsgSetGraduationRequirements struct {
	Creator                 string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CurriculumIndex         string   `protobuf:"bytes,2,opt,name=curriculumIndex,proto3" json:"curriculumIndex,omitempty"`
	TotalCreditsRequired    uint64   `protobuf:"varint,3,opt,name=totalCreditsRequired,proto3" json:"totalCreditsRequired,omitempty"`
	MinGpa                  float32  `protobuf:"fixed32,4,opt,name=minGpa,proto3" json:"minGpa,omitempty"`
	RequiredElectiveCredits uint64   `protobuf:"varint,5,opt,name=requiredElectiveCredits,proto3" json:"requiredElectiveCredits,omitempty"`
	MinimumTimeYears        float32  `protobuf:"fixed32,6,opt,name=minimumTimeYears,proto3" json:"minimumTimeYears,omitempty"`
	MaximumTimeYears        float32  `protobuf:"fixed32,7,opt,name=maximumTimeYears,proto3" json:"maximumTimeYears,omitempty"`
	RequiredActivities      []string `protobuf:"bytes,8,rep,name=requiredActivities,proto3" json:"requiredActivities,omitempty"`
}

func (m *MsgSetGraduationRequirements) Reset()         { *m = MsgSetGraduationRequirements{} }
func (m *MsgSetGraduationRequirements) String() string { return proto.CompactTextString(m) }
func (*MsgSetGraduationRequirements) ProtoMessage()    {}
func (*MsgSetGraduationRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{8}
}
func (m *MsgSetGraduationRequirements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetGraduationRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGraduationRequirements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetGraduationRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGraduationRequirements.Merge(m, src)
}
func (m *MsgSetGraduationRequirements) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetGraduationRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGraduationRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGraduationRequirements proto.InternalMessageInfo

func (m *MsgSetGraduationRequirements) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetGraduationRequirements) GetCurriculumIndex() string {
	if m != nil {
		return m.CurriculumIndex
	}
	return ""
}

func (m *MsgSetGraduationRequirements) GetTotalCreditsRequired() uint64 {
	if m != nil {
		return m.TotalCreditsRequired
	}
	return 0
}

func (m *MsgSetGraduationRequirements) GetMinGpa() float32 {
	if m != nil {
		return m.MinGpa
	}
	return 0
}

func (m *MsgSetGraduationRequirements) GetRequiredElectiveCredits() uint64 {
	if m != nil {
		return m.RequiredElectiveCredits
	}
	return 0
}

func (m *MsgSetGraduationRequirements) GetMinimumTimeYears() float32 {
	if m != nil {
		return m.MinimumTimeYears
	}
	return 0
}

func (m *MsgSetGraduationRequirements) GetMaximumTimeYears() float32 {
	if m != nil {
		return m.MaximumTimeYears
	}
	return 0
}

func (m *MsgSetGraduationRequirements) GetRequiredActivities() []string {
	if m != nil {
		return m.RequiredActivities
	}
	return nil
}

type MsgSetGraduationRequirementsResponse struct {
}

func (m *MsgSetGraduationRequirementsResponse) Reset()         { *m = MsgSetGraduationRequirementsResponse{} }
func (m *MsgSetGraduationRequirementsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetGraduationRequirementsResponse) ProtoMessage()    {}
func (*MsgSetGraduationRequirementsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a05da18e86456bf, []int{9}
}
func (m *MsgSetGraduationRequirementsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetGraduationRequirementsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetGraduationRequirementsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetGraduationRequirementsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetGraduationRequirementsResponse.Merge(m, src)
}
func (m *MsgSetGraduationRequirementsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetGraduationRequirementsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetGraduationRequirementsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetGraduationRequirementsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "academictoken.curriculum.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "academictoken.curriculum.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateCurriculumTree)(nil), "academictoken.curriculum.MsgCreateCurriculumTree")
	proto.RegisterType((*MsgCreateCurriculumTreeResponse)(nil), "academictoken.curriculum.MsgCreateCurriculumTreeResponse")
	proto.RegisterType((*MsgAddSemesterToCurriculum)(nil), "academictoken.curriculum.MsgAddSemesterToCurriculum")
	proto.RegisterType((*MsgAddSemesterToCurriculumResponse)(nil), "academictoken.curriculum.MsgAddSemesterToCurriculumResponse")
	proto.RegisterType((*MsgAddElectiveGroup)(nil), "academictoken.curriculum.MsgAddElectiveGroup")
	proto.RegisterType((*MsgAddElectiveGroupResponse)(nil), "academictoken.curriculum.MsgAddElectiveGroupResponse")
	proto.RegisterType((*MsgSetGraduationRequirements)(nil), "academictoken.curriculum.MsgSetGraduationRequirements")
	proto.RegisterType((*MsgSetGraduationRequirementsResponse)(nil), "academictoken.curriculum.MsgSetGraduationRequirementsResponse")
}

func init() { proto.RegisterFile("academictoken/curriculum/tx.proto", fileDescriptor_9a05da18e86456bf) }

var fileDescriptor_9a05da18e86456bf = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x3a, 0x8e, 0x53, 0xbf, 0x16, 0x5a, 0xa6, 0x11, 0xd9, 0x2c, 0xe0, 0xba, 0x56, 0xa8,
	0x8c, 0xa5, 0xda, 0x34, 0x40, 0x05, 0x11, 0x20, 0x25, 0x11, 0x0a, 0x39, 0x18, 0xa1, 0x4d, 0x10,
	0x82, 0x0b, 0x9a, 0xec, 0x3e, 0x2d, 0x43, 0xbc, 0x3b, 0x66, 0x66, 0x36, 0xb8, 0x37, 0x84, 0x38,
	0x21, 0x21, 0x21, 0xf1, 0x17, 0xf4, 0xc6, 0x31, 0x07, 0xc4, 0x95, 0x6b, 0x2f, 0x48, 0x15, 0x27,
	0x4e, 0x08, 0x25, 0x87, 0xfc, 0x17, 0x08, 0xed, 0xec, 0xec, 0xda, 0xde, 0x78, 0x5d, 0x5a, 0xe5,
	0x92, 0xec, 0x7c, 0xef, 0x7b, 0xbf, 0xbe, 0x37, 0x33, 0x1e, 0xb8, 0x4d, 0x3d, 0xea, 0x63, 0xc8,
	0x3c, 0xc5, 0x8f, 0x30, 0xea, 0x79, 0xb1, 0x10, 0xcc, 0x8b, 0x07, 0x71, 0xd8, 0x53, 0xa3, 0xee,
	0x50, 0x70, 0xc5, 0x89, 0x3d, 0x45, 0xe9, 0x8e, 0x29, 0xce, 0x0b, 0x34, 0x64, 0x11, 0xef, 0xe9,
	0xbf, 0x29, 0xd9, 0x59, 0xf5, 0xb8, 0x0c, 0xb9, 0xec, 0x85, 0x32, 0xe8, 0x1d, 0xdf, 0x4b, 0xfe,
	0x19, 0xc3, 0x5a, 0x6a, 0xf8, 0x42, 0xaf, 0x7a, 0xe9, 0xc2, 0x98, 0x56, 0x02, 0x1e, 0xf0, 0x14,
	0x4f, 0xbe, 0x0c, 0xfa, 0x6a, 0x69, 0x65, 0x43, 0x2a, 0x68, 0x68, 0x9c, 0x5b, 0x7f, 0x58, 0x70,
	0xbd, 0x2f, 0x83, 0x4f, 0x86, 0x3e, 0x55, 0xf8, 0xb1, 0xb6, 0x90, 0xfb, 0x50, 0xa7, 0xb1, 0xfa,
	0x92, 0x0b, 0xa6, 0x1e, 0xd8, 0x56, 0xd3, 0x6a, 0xd7, 0xb7, 0xed, 0x3f, 0x7f, 0xbd, 0xbb, 0x62,
	0xb2, 0x6e, 0xf9, 0xbe, 0x40, 0x29, 0xf7, 0x95, 0x60, 0x51, 0xe0, 0x8e, 0xa9, 0x64, 0x07, 0x6a,
	0x69, 0x6c, 0xbb, 0xd2, 0xb4, 0xda, 0x57, 0x37, 0x9a, 0xdd, 0xb2, 0xd6, 0xbb, 0x69, 0xa6, 0xed,
	0xfa, 0xa3, 0xbf, 0x6f, 0x2d, 0xfc, 0x72, 0x7e, 0xd2, 0xb1, 0x5c, 0xe3, 0xba, 0xf9, 0xde, 0x77,
	0xe7, 0x27, 0x9d, 0x71, 0xd0, 0x1f, 0xce, 0x4f, 0x3a, 0x9d, 0xe9, 0x56, 0x46, 0x93, 0xcd, 0x14,
	0x6a, 0x6f, 0xad, 0xc1, 0x6a, 0x01, 0x72, 0x51, 0x0e, 0x79, 0x24, 0xb1, 0xf5, 0xb0, 0xa2, 0x6d,
	0x3b, 0x02, 0xa9, 0xc2, 0x9d, 0x3c, 0xc4, 0x81, 0x40, 0x24, 0x36, 0x2c, 0x7b, 0x09, 0xce, 0x45,
	0xda, 0xb0, 0x9b, 0x2d, 0x89, 0x03, 0x57, 0x3c, 0x1e, 0x0b, 0x89, 0x7b, 0xbe, 0x6e, 0xab, 0xee,
	0xe6, 0xeb, 0xc4, 0xeb, 0x18, 0x85, 0x64, 0x3c, 0xb2, 0x17, 0x53, 0x2f, 0xb3, 0x24, 0x4d, 0xb8,
	0x8a, 0x03, 0xf4, 0x14, 0x3b, 0xc6, 0x3e, 0x8b, 0xec, 0x6a, 0xd3, 0x6a, 0x57, 0xdd, 0x49, 0x88,
	0x74, 0x81, 0x28, 0xae, 0xe8, 0xe0, 0x53, 0x2e, 0x8e, 0x06, 0x9c, 0xfa, 0x1f, 0x26, 0x41, 0xed,
	0x25, 0x4d, 0x9c, 0x61, 0x21, 0x1d, 0xb8, 0x21, 0xf0, 0xeb, 0x98, 0x09, 0xf4, 0xf7, 0xe3, 0xc3,
	0xaf, 0xd0, 0x53, 0xd2, 0xae, 0x35, 0x17, 0xdb, 0x75, 0xf7, 0x02, 0x9e, 0x70, 0xb3, 0x54, 0x39,
	0x77, 0x39, 0xe5, 0x16, 0xf1, 0xcd, 0x6b, 0x89, 0xde, 0x59, 0xb7, 0xad, 0xdb, 0x70, 0xab, 0x44,
	0xa2, 0x5c, 0xc6, 0xdf, 0x2c, 0x70, 0xfa, 0x32, 0xd8, 0xf2, 0xfd, 0x7d, 0x0c, 0x51, 0x2a, 0x14,
	0x07, 0x7c, 0x4c, 0x9d, 0xa3, 0x64, 0x1b, 0xae, 0x8f, 0x07, 0xb7, 0x17, 0xf9, 0x38, 0x32, 0x82,
	0x16, 0x61, 0x72, 0x07, 0x9e, 0x97, 0x26, 0xf6, 0x47, 0x71, 0x78, 0x88, 0x42, 0xcb, 0x5b, 0x75,
	0x0b, 0x28, 0x69, 0x00, 0xc8, 0xb4, 0x8f, 0x3d, 0x5f, 0xda, 0x55, 0xdd, 0xe1, 0x04, 0x52, 0xe8,
	0x6d, 0x1d, 0x5a, 0xe5, 0x75, 0xe7, 0xed, 0xfd, 0x5e, 0x81, 0x9b, 0x29, 0xed, 0x03, 0x23, 0xd5,
	0xae, 0xe0, 0xf1, 0xf0, 0x52, 0xfa, 0x22, 0x50, 0x8d, 0x68, 0x88, 0x66, 0xb3, 0xe8, 0xef, 0x64,
	0xa7, 0xf8, 0x28, 0x3d, 0xc1, 0x86, 0x2a, 0xd9, 0x47, 0x55, 0x6d, 0x9a, 0x84, 0xc8, 0xeb, 0x70,
	0x33, 0x64, 0x51, 0x36, 0x30, 0xd7, 0x0c, 0xdb, 0x6c, 0x95, 0x59, 0x26, 0x5d, 0x91, 0x40, 0x9f,
	0x4d, 0xb0, 0x6b, 0x9a, 0x5d, 0x84, 0xc9, 0x3a, 0x3c, 0x77, 0x14, 0xf1, 0x6f, 0x06, 0xe8, 0x07,
	0xb8, 0x25, 0x90, 0xda, 0xcb, 0x3a, 0xff, 0x34, 0x58, 0xd0, 0xf9, 0xca, 0x13, 0x74, 0x7e, 0x05,
	0x5e, 0x9a, 0x21, 0x60, 0x2e, 0xf0, 0xbf, 0x15, 0x78, 0xb9, 0x2f, 0x83, 0x7d, 0x54, 0xbb, 0x82,
	0xfa, 0x31, 0x4d, 0x7a, 0x34, 0xf5, 0x84, 0x18, 0x29, 0x79, 0x29, 0x4a, 0x6f, 0xc0, 0x8a, 0x3e,
	0x43, 0x3b, 0x05, 0x19, 0xd2, 0x7d, 0x34, 0xd3, 0x46, 0x5e, 0x84, 0x5a, 0xc8, 0xa2, 0xdd, 0x21,
	0xd5, 0x43, 0xa8, 0xb8, 0x66, 0x45, 0xde, 0x86, 0xd5, 0xec, 0x84, 0x65, 0x1d, 0x19, 0x57, 0x33,
	0x83, 0x32, 0x73, 0x72, 0x0e, 0x43, 0x16, 0xb1, 0x30, 0x0e, 0x0f, 0x58, 0x88, 0x9f, 0x21, 0x15,
	0x52, 0x0f, 0xa2, 0xe2, 0x5e, 0xc0, 0x35, 0x97, 0x8e, 0xa6, 0xb9, 0xcb, 0x86, 0x5b, 0xc0, 0x93,
	0xbb, 0x23, 0x4b, 0xb9, 0x95, 0x24, 0x64, 0x8a, 0x61, 0x36, 0x97, 0x19, 0x96, 0xc2, 0x7c, 0xee,
	0xc0, 0xfa, 0x3c, 0xfd, 0xb3, 0x41, 0x6d, 0x3c, 0x5c, 0x82, 0xc5, 0xbe, 0x0c, 0xc8, 0x00, 0xae,
	0x4d, 0xfd, 0x3c, 0xbc, 0x56, 0x7e, 0xad, 0x17, 0xae, 0x5e, 0xe7, 0xde, 0xff, 0xa6, 0x66, 0x59,
	0xc9, 0xf7, 0x16, 0xac, 0xcc, 0xbc, 0xa2, 0xe7, 0xc7, 0x9a, 0xe5, 0xe2, 0xbc, 0xf3, 0xd4, 0x2e,
	0x79, 0x19, 0x3f, 0x5a, 0xb0, 0x5a, 0x76, 0xc5, 0xbd, 0x39, 0x37, 0x6c, 0x89, 0x97, 0xf3, 0xee,
	0xb3, 0x78, 0xe5, 0xf5, 0x8c, 0xe0, 0xc6, 0x85, 0x2b, 0xe9, 0xee, 0x93, 0x22, 0x4e, 0xd1, 0x9d,
	0xb7, 0x9e, 0x8a, 0x9e, 0x67, 0xfe, 0xd9, 0x82, 0xb5, 0xf2, 0xc3, 0x7a, 0x7f, 0x6e, 0xd0, 0x52,
	0x3f, 0xe7, 0xfd, 0x67, 0xf3, 0xcb, 0xaa, 0x72, 0x96, 0xbe, 0x4d, 0x5e, 0x0d, 0xdb, 0x9b, 0x8f,
	0x4e, 0x1b, 0xd6, 0xe3, 0xd3, 0x86, 0xf5, 0xcf, 0x69, 0xc3, 0xfa, 0xe9, 0xac, 0xb1, 0xf0, 0xf8,
	0xac, 0xb1, 0xf0, 0xd7, 0x59, 0x63, 0xe1, 0xf3, 0xe6, 0x9c, 0x47, 0x83, 0x7a, 0x30, 0x44, 0x79,
	0x58, 0xd3, 0x2f, 0xa0, 0x37, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x8b, 0x8b, 0x92, 0xc4,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateCurriculumTree(ctx context.Context, in *MsgCreateCurriculumTree, opts ...grpc.CallOption) (*MsgCreateCurriculumTreeResponse, error)
	AddSemesterToCurriculum(ctx context.Context, in *MsgAddSemesterToCurriculum, opts ...grpc.CallOption) (*MsgAddSemesterToCurriculumResponse, error)
	AddElectiveGroup(ctx context.Context, in *MsgAddElectiveGroup, opts ...grpc.CallOption) (*MsgAddElectiveGroupResponse, error)
	SetGraduationRequirements(ctx context.Context, in *MsgSetGraduationRequirements, opts ...grpc.CallOption) (*MsgSetGraduationRequirementsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.curriculum.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCurriculumTree(ctx context.Context, in *MsgCreateCurriculumTree, opts ...grpc.CallOption) (*MsgCreateCurriculumTreeResponse, error) {
	out := new(MsgCreateCurriculumTreeResponse)
	err := c.cc.Invoke(ctx, "/academictoken.curriculum.Msg/CreateCurriculumTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddSemesterToCurriculum(ctx context.Context, in *MsgAddSemesterToCurriculum, opts ...grpc.CallOption) (*MsgAddSemesterToCurriculumResponse, error) {
	out := new(MsgAddSemesterToCurriculumResponse)
	err := c.cc.Invoke(ctx, "/academictoken.curriculum.Msg/AddSemesterToCurriculum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddElectiveGroup(ctx context.Context, in *MsgAddElectiveGroup, opts ...grpc.CallOption) (*MsgAddElectiveGroupResponse, error) {
	out := new(MsgAddElectiveGroupResponse)
	err := c.cc.Invoke(ctx, "/academictoken.curriculum.Msg/AddElectiveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetGraduationRequirements(ctx context.Context, in *MsgSetGraduationRequirements, opts ...grpc.CallOption) (*MsgSetGraduationRequirementsResponse, error) {
	out := new(MsgSetGraduationRequirementsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.curriculum.Msg/SetGraduationRequirements", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateCurriculumTree(context.Context, *MsgCreateCurriculumTree) (*MsgCreateCurriculumTreeResponse, error)
	AddSemesterToCurriculum(context.Context, *MsgAddSemesterToCurriculum) (*MsgAddSemesterToCurriculumResponse, error)
	AddElectiveGroup(context.Context, *MsgAddElectiveGroup) (*MsgAddElectiveGroupResponse, error)
	SetGraduationRequirements(context.Context, *MsgSetGraduationRequirements) (*MsgSetGraduationRequirementsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateCurriculumTree(ctx context.Context, req *MsgCreateCurriculumTree) (*MsgCreateCurriculumTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurriculumTree not implemented")
}
func (*UnimplementedMsgServer) AddSemesterToCurriculum(ctx context.Context, req *MsgAddSemesterToCurriculum) (*MsgAddSemesterToCurriculumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSemesterToCurriculum not implemented")
}
func (*UnimplementedMsgServer) AddElectiveGroup(ctx context.Context, req *MsgAddElectiveGroup) (*MsgAddElectiveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddElectiveGroup not implemented")
}
func (*UnimplementedMsgServer) SetGraduationRequirements(ctx context.Context, req *MsgSetGraduationRequirements) (*MsgSetGraduationRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGraduationRequirements not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.curriculum.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCurriculumTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCurriculumTree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCurriculumTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.curriculum.Msg/CreateCurriculumTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCurriculumTree(ctx, req.(*MsgCreateCurriculumTree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddSemesterToCurriculum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddSemesterToCurriculum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddSemesterToCurriculum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.curriculum.Msg/AddSemesterToCurriculum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddSemesterToCurriculum(ctx, req.(*MsgAddSemesterToCurriculum))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddElectiveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddElectiveGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddElectiveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.curriculum.Msg/AddElectiveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddElectiveGroup(ctx, req.(*MsgAddElectiveGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetGraduationRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetGraduationRequirements)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetGraduationRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.curriculum.Msg/SetGraduationRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetGraduationRequirements(ctx, req.(*MsgSetGraduationRequirements))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.curriculum.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateCurriculumTree",
			Handler:    _Msg_CreateCurriculumTree_Handler,
		},
		{
			MethodName: "AddSemesterToCurriculum",
			Handler:    _Msg_AddSemesterToCurriculum_Handler,
		},
		{
			MethodName: "AddElectiveGroup",
			Handler:    _Msg_AddElectiveGroup_Handler,
		},
		{
			MethodName: "SetGraduationRequirements",
			Handler:    _Msg_SetGraduationRequirements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/curriculum/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateCurriculumTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCurriculumTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCurriculumTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ElectiveSubjects) > 0 {
		for iNdEx := len(m.ElectiveSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ElectiveSubjects[iNdEx])
			copy(dAtA[i:], m.ElectiveSubjects[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ElectiveSubjects[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RequiredSubjects) > 0 {
		for iNdEx := len(m.RequiredSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredSubjects[iNdEx])
			copy(dAtA[i:], m.RequiredSubjects[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RequiredSubjects[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TotalWorkloadHours != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalWorkloadHours))
		i--
		dAtA[i] = 0x28
	}
	if m.ElectiveMin != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ElectiveMin))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCurriculumTreeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCurriculumTreeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCurriculumTreeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddSemesterToCurriculum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddSemesterToCurriculum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddSemesterToCurriculum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectIds) > 0 {
		for iNdEx := len(m.SubjectIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectIds[iNdEx])
			copy(dAtA[i:], m.SubjectIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SemesterNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SemesterNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CurriculumIndex) > 0 {
		i -= len(m.CurriculumIndex)
		copy(dAtA[i:], m.CurriculumIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CurriculumIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddSemesterToCurriculumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddSemesterToCurriculumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddSemesterToCurriculumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddElectiveGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddElectiveGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddElectiveGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectIds) > 0 {
		for iNdEx := len(m.SubjectIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SubjectIds[iNdEx])
			copy(dAtA[i:], m.SubjectIds[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.SubjectIds[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.KnowledgeArea) > 0 {
		i -= len(m.KnowledgeArea)
		copy(dAtA[i:], m.KnowledgeArea)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KnowledgeArea)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CreditsRequired != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CreditsRequired))
		i--
		dAtA[i] = 0x30
	}
	if m.MinSubjectsRequired != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinSubjectsRequired))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurriculumIndex) > 0 {
		i -= len(m.CurriculumIndex)
		copy(dAtA[i:], m.CurriculumIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CurriculumIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddElectiveGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddElectiveGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddElectiveGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetGraduationRequirements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGraduationRequirements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGraduationRequirements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequiredActivities) > 0 {
		for iNdEx := len(m.RequiredActivities) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredActivities[iNdEx])
			copy(dAtA[i:], m.RequiredActivities[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RequiredActivities[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.MaximumTimeYears != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaximumTimeYears))))
		i--
		dAtA[i] = 0x3d
	}
	if m.MinimumTimeYears != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinimumTimeYears))))
		i--
		dAtA[i] = 0x35
	}
	if m.RequiredElectiveCredits != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequiredElectiveCredits))
		i--
		dAtA[i] = 0x28
	}
	if m.MinGpa != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinGpa))))
		i--
		dAtA[i] = 0x25
	}
	if m.TotalCreditsRequired != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalCreditsRequired))
		i--
		dAtA[i] = 0x18
	}
	if len(m.CurriculumIndex) > 0 {
		i -= len(m.CurriculumIndex)
		copy(dAtA[i:], m.CurriculumIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CurriculumIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetGraduationRequirementsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetGraduationRequirementsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetGraduationRequirementsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateCurriculumTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ElectiveMin != 0 {
		n += 1 + sovTx(uint64(m.ElectiveMin))
	}
	if m.TotalWorkloadHours != 0 {
		n += 1 + sovTx(uint64(m.TotalWorkloadHours))
	}
	if len(m.RequiredSubjects) > 0 {
		for _, s := range m.RequiredSubjects {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ElectiveSubjects) > 0 {
		for _, s := range m.ElectiveSubjects {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateCurriculumTreeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddSemesterToCurriculum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CurriculumIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SemesterNumber != 0 {
		n += 1 + sovTx(uint64(m.SemesterNumber))
	}
	if len(m.SubjectIds) > 0 {
		for _, s := range m.SubjectIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddSemesterToCurriculumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddElectiveGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CurriculumIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MinSubjectsRequired != 0 {
		n += 1 + sovTx(uint64(m.MinSubjectsRequired))
	}
	if m.CreditsRequired != 0 {
		n += 1 + sovTx(uint64(m.CreditsRequired))
	}
	l = len(m.KnowledgeArea)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SubjectIds) > 0 {
		for _, s := range m.SubjectIds {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddElectiveGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetGraduationRequirements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CurriculumIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TotalCreditsRequired != 0 {
		n += 1 + sovTx(uint64(m.TotalCreditsRequired))
	}
	if m.MinGpa != 0 {
		n += 5
	}
	if m.RequiredElectiveCredits != 0 {
		n += 1 + sovTx(uint64(m.RequiredElectiveCredits))
	}
	if m.MinimumTimeYears != 0 {
		n += 5
	}
	if m.MaximumTimeYears != 0 {
		n += 5
	}
	if len(m.RequiredActivities) > 0 {
		for _, s := range m.RequiredActivities {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetGraduationRequirementsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCurriculumTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCurriculumTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCurriculumTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectiveMin", wireType)
			}
			m.ElectiveMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElectiveMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWorkloadHours", wireType)
			}
			m.TotalWorkloadHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalWorkloadHours |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredSubjects = append(m.RequiredSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectiveSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElectiveSubjects = append(m.ElectiveSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCurriculumTreeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCurriculumTreeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCurriculumTreeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddSemesterToCurriculum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddSemesterToCurriculum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddSemesterToCurriculum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurriculumIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurriculumIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemesterNumber", wireType)
			}
			m.SemesterNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SemesterNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectIds = append(m.SubjectIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddSemesterToCurriculumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddSemesterToCurriculumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddSemesterToCurriculumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddElectiveGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddElectiveGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddElectiveGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurriculumIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurriculumIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSubjectsRequired", wireType)
			}
			m.MinSubjectsRequired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSubjectsRequired |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditsRequired", wireType)
			}
			m.CreditsRequired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditsRequired |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnowledgeArea", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KnowledgeArea = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectIds = append(m.SubjectIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddElectiveGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddElectiveGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddElectiveGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetGraduationRequirements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGraduationRequirements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGraduationRequirements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurriculumIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurriculumIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCreditsRequired", wireType)
			}
			m.TotalCreditsRequired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCreditsRequired |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGpa", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinGpa = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredElectiveCredits", wireType)
			}
			m.RequiredElectiveCredits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredElectiveCredits |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumTimeYears", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinimumTimeYears = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumTimeYears", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaximumTimeYears = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredActivities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredActivities = append(m.RequiredActivities, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetGraduationRequirementsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetGraduationRequirementsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetGraduationRequirementsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
