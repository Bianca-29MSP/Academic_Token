// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/curriculum_tree.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CurriculumTree struct {
	Index                  string                  `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	CourseId               string                  `protobuf:"bytes,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	Version                string                  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	TotalWorkloadHours     string                  `protobuf:"bytes,4,opt,name=totalWorkloadHours,proto3" json:"totalWorkloadHours,omitempty"`
	RequiredSubjects       []string                `protobuf:"bytes,5,rep,name=requiredSubjects,proto3" json:"requiredSubjects,omitempty"`
	ElectiveMin            uint64                  `protobuf:"varint,6,opt,name=electiveMin,proto3" json:"electiveMin,omitempty"`
	ElectiveSubjects       []string                `protobuf:"bytes,7,rep,name=electiveSubjects,proto3" json:"electiveSubjects,omitempty"`
	SemesterStructure      []*CurriculumSemester   `protobuf:"bytes,8,rep,name=semesterStructure,proto3" json:"semesterStructure,omitempty"`
	GraduationRequirements *GraduationRequirements `protobuf:"bytes,9,opt,name=graduationRequirements,proto3" json:"graduationRequirements,omitempty"`
	ElectiveGroups         []*ElectiveGroup        `protobuf:"bytes,10,rep,name=electiveGroups,proto3" json:"electiveGroups,omitempty"`
}

func (m *CurriculumTree) Reset()         { *m = CurriculumTree{} }
func (m *CurriculumTree) String() string { return proto.CompactTextString(m) }
func (*CurriculumTree) ProtoMessage()    {}
func (*CurriculumTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_d89d4d5b3f4e6ad5, []int{0}
}
func (m *CurriculumTree) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurriculumTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurriculumTree.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurriculumTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurriculumTree.Merge(m, src)
}
func (m *CurriculumTree) XXX_Size() int {
	return m.Size()
}
func (m *CurriculumTree) XXX_DiscardUnknown() {
	xxx_messageInfo_CurriculumTree.DiscardUnknown(m)
}

var xxx_messageInfo_CurriculumTree proto.InternalMessageInfo

func (m *CurriculumTree) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CurriculumTree) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *CurriculumTree) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *CurriculumTree) GetTotalWorkloadHours() string {
	if m != nil {
		return m.TotalWorkloadHours
	}
	return ""
}

func (m *CurriculumTree) GetRequiredSubjects() []string {
	if m != nil {
		return m.RequiredSubjects
	}
	return nil
}

func (m *CurriculumTree) GetElectiveMin() uint64 {
	if m != nil {
		return m.ElectiveMin
	}
	return 0
}

func (m *CurriculumTree) GetElectiveSubjects() []string {
	if m != nil {
		return m.ElectiveSubjects
	}
	return nil
}

func (m *CurriculumTree) GetSemesterStructure() []*CurriculumSemester {
	if m != nil {
		return m.SemesterStructure
	}
	return nil
}

func (m *CurriculumTree) GetGraduationRequirements() *GraduationRequirements {
	if m != nil {
		return m.GraduationRequirements
	}
	return nil
}

func (m *CurriculumTree) GetElectiveGroups() []*ElectiveGroup {
	if m != nil {
		return m.ElectiveGroups
	}
	return nil
}

func init() {
	proto.RegisterType((*CurriculumTree)(nil), "academictoken.curriculum.CurriculumTree")
}

func init() {
	proto.RegisterFile("academictoken/curriculum/curriculum_tree.proto", fileDescriptor_d89d4d5b3f4e6ad5)
}

var fileDescriptor_d89d4d5b3f4e6ad5 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4a, 0xe3, 0x50,
	0x18, 0x6d, 0xa6, 0xff, 0xb7, 0x50, 0x66, 0x2e, 0xc3, 0x70, 0xe9, 0x22, 0x84, 0xd9, 0x4c, 0x18,
	0x66, 0xa2, 0x54, 0x70, 0xe1, 0x52, 0x91, 0xea, 0x42, 0x84, 0x54, 0x10, 0xba, 0x29, 0xe9, 0xcd,
	0x47, 0xbd, 0x36, 0xc9, 0xad, 0xf7, 0xa7, 0xd4, 0xb7, 0xf0, 0x05, 0x7c, 0x1f, 0x97, 0x5d, 0xba,
	0x94, 0xf6, 0x45, 0xa4, 0x49, 0xd3, 0xa6, 0x3f, 0x01, 0x77, 0x39, 0xdf, 0x77, 0xce, 0xb9, 0x9c,
	0x9c, 0x0f, 0x39, 0x1e, 0xf5, 0x7c, 0x08, 0x19, 0x55, 0x7c, 0x04, 0xd1, 0x11, 0xd5, 0x42, 0x30,
	0xaa, 0x03, 0x1d, 0x66, 0x3e, 0xfb, 0x4a, 0x00, 0x38, 0x63, 0xc1, 0x15, 0xc7, 0x64, 0x8b, 0xef,
	0x6c, 0x48, 0xad, 0xf6, 0x57, 0x9c, 0x24, 0x84, 0x20, 0x15, 0x88, 0xc4, 0xad, 0x75, 0x9a, 0xab,
	0x19, 0x0a, 0xcf, 0xd7, 0x9e, 0x62, 0x3c, 0xea, 0x0b, 0x78, 0xd2, 0x4c, 0x40, 0x08, 0x91, 0x92,
	0x2b, 0xdd, 0xff, 0x5c, 0x1d, 0x04, 0x40, 0x15, 0x9b, 0x40, 0x7f, 0x28, 0xb8, 0x1e, 0x27, 0xf4,
	0xdf, 0xaf, 0x25, 0xd4, 0xbc, 0x58, 0x73, 0xee, 0x04, 0x00, 0xfe, 0x89, 0xca, 0x2c, 0xf2, 0x61,
	0x4a, 0x0c, 0xcb, 0xb0, 0xeb, 0x6e, 0x02, 0x70, 0x0b, 0xd5, 0x28, 0xd7, 0x42, 0xc2, 0xb5, 0x4f,
	0xbe, 0xc5, 0x8b, 0x35, 0xc6, 0x04, 0x55, 0x27, 0x20, 0x24, 0xe3, 0x11, 0x29, 0xc6, 0xab, 0x14,
	0x62, 0x07, 0x61, 0xc5, 0x95, 0x17, 0xdc, 0x73, 0x31, 0x0a, 0xb8, 0xe7, 0x5f, 0x2d, 0x25, 0xa4,
	0x14, 0x93, 0x0e, 0x6c, 0xf0, 0x5f, 0xf4, 0x7d, 0x95, 0xc9, 0xef, 0xea, 0xc1, 0x23, 0x50, 0x25,
	0x49, 0xd9, 0x2a, 0xda, 0x75, 0x77, 0x6f, 0x8e, 0x2d, 0xd4, 0x48, 0x23, 0xdd, 0xb0, 0x88, 0x54,
	0x2c, 0xc3, 0x2e, 0xb9, 0xd9, 0xd1, 0xd2, 0x2d, 0x85, 0x6b, 0xb7, 0x6a, 0xe2, 0xb6, 0x3b, 0xc7,
	0x3d, 0xf4, 0x23, 0x6d, 0xa0, 0xab, 0x84, 0xa6, 0x4a, 0x0b, 0x20, 0x35, 0xab, 0x68, 0x37, 0xda,
	0xff, 0x9c, 0xbc, 0x66, 0x9d, 0xcd, 0xaf, 0xeb, 0xae, 0xc4, 0xee, 0xbe, 0x0d, 0x7e, 0x40, 0xbf,
	0x36, 0xa5, 0xb9, 0x99, 0xce, 0x48, 0xdd, 0x32, 0xec, 0x46, 0xfb, 0x38, 0xff, 0x81, 0xce, 0x41,
	0x9d, 0x9b, 0xe3, 0x87, 0x6f, 0x51, 0x33, 0x4d, 0xd6, 0x59, 0xb6, 0x2c, 0x09, 0x8a, 0x23, 0xfc,
	0xc9, 0x7f, 0xe1, 0x32, 0xcb, 0x77, 0x77, 0xe4, 0xe7, 0x67, 0x6f, 0x73, 0xd3, 0x98, 0xcd, 0x4d,
	0xe3, 0x63, 0x6e, 0x1a, 0x2f, 0x0b, 0xb3, 0x30, 0x5b, 0x98, 0x85, 0xf7, 0x85, 0x59, 0xe8, 0x59,
	0xdb, 0x87, 0x36, 0xcd, 0x9e, 0x9a, 0x7a, 0x1e, 0x83, 0x1c, 0x54, 0xe2, 0x13, 0x3b, 0xf9, 0x0c,
	0x00, 0x00, 0xff, 0xff, 0xcb, 0x72, 0xc1, 0x7c, 0x49, 0x03, 0x00, 0x00,
}

func (m *CurriculumTree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurriculumTree) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurriculumTree) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ElectiveGroups) > 0 {
		for iNdEx := len(m.ElectiveGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ElectiveGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCurriculumTree(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.GraduationRequirements != nil {
		{
			size, err := m.GraduationRequirements.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCurriculumTree(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SemesterStructure) > 0 {
		for iNdEx := len(m.SemesterStructure) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SemesterStructure[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCurriculumTree(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ElectiveSubjects) > 0 {
		for iNdEx := len(m.ElectiveSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ElectiveSubjects[iNdEx])
			copy(dAtA[i:], m.ElectiveSubjects[iNdEx])
			i = encodeVarintCurriculumTree(dAtA, i, uint64(len(m.ElectiveSubjects[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ElectiveMin != 0 {
		i = encodeVarintCurriculumTree(dAtA, i, uint64(m.ElectiveMin))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RequiredSubjects) > 0 {
		for iNdEx := len(m.RequiredSubjects) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredSubjects[iNdEx])
			copy(dAtA[i:], m.RequiredSubjects[iNdEx])
			i = encodeVarintCurriculumTree(dAtA, i, uint64(len(m.RequiredSubjects[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TotalWorkloadHours) > 0 {
		i -= len(m.TotalWorkloadHours)
		copy(dAtA[i:], m.TotalWorkloadHours)
		i = encodeVarintCurriculumTree(dAtA, i, uint64(len(m.TotalWorkloadHours)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintCurriculumTree(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintCurriculumTree(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCurriculumTree(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCurriculumTree(dAtA []byte, offset int, v uint64) int {
	offset -= sovCurriculumTree(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CurriculumTree) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCurriculumTree(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovCurriculumTree(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovCurriculumTree(uint64(l))
	}
	l = len(m.TotalWorkloadHours)
	if l > 0 {
		n += 1 + l + sovCurriculumTree(uint64(l))
	}
	if len(m.RequiredSubjects) > 0 {
		for _, s := range m.RequiredSubjects {
			l = len(s)
			n += 1 + l + sovCurriculumTree(uint64(l))
		}
	}
	if m.ElectiveMin != 0 {
		n += 1 + sovCurriculumTree(uint64(m.ElectiveMin))
	}
	if len(m.ElectiveSubjects) > 0 {
		for _, s := range m.ElectiveSubjects {
			l = len(s)
			n += 1 + l + sovCurriculumTree(uint64(l))
		}
	}
	if len(m.SemesterStructure) > 0 {
		for _, e := range m.SemesterStructure {
			l = e.Size()
			n += 1 + l + sovCurriculumTree(uint64(l))
		}
	}
	if m.GraduationRequirements != nil {
		l = m.GraduationRequirements.Size()
		n += 1 + l + sovCurriculumTree(uint64(l))
	}
	if len(m.ElectiveGroups) > 0 {
		for _, e := range m.ElectiveGroups {
			l = e.Size()
			n += 1 + l + sovCurriculumTree(uint64(l))
		}
	}
	return n
}

func sovCurriculumTree(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCurriculumTree(x uint64) (n int) {
	return sovCurriculumTree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CurriculumTree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCurriculumTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurriculumTree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurriculumTree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWorkloadHours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalWorkloadHours = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredSubjects = append(m.RequiredSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectiveMin", wireType)
			}
			m.ElectiveMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElectiveMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectiveSubjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElectiveSubjects = append(m.ElectiveSubjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemesterStructure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SemesterStructure = append(m.SemesterStructure, &CurriculumSemester{})
			if err := m.SemesterStructure[len(m.SemesterStructure)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraduationRequirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GraduationRequirements == nil {
				m.GraduationRequirements = &GraduationRequirements{}
			}
			if err := m.GraduationRequirements.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectiveGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElectiveGroups = append(m.ElectiveGroups, &ElectiveGroup{})
			if err := m.ElectiveGroups[len(m.ElectiveGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCurriculumTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCurriculumTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCurriculumTree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCurriculumTree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCurriculumTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCurriculumTree
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCurriculumTree
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCurriculumTree
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCurriculumTree        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCurriculumTree          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCurriculumTree = fmt.Errorf("proto: unexpected end of group")
)
