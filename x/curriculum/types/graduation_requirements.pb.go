// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/curriculum/graduation_requirements.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GraduationRequirements struct {
	TotalCreditsRequired    string   `protobuf:"bytes,1,opt,name=totalCreditsRequired,proto3" json:"totalCreditsRequired,omitempty"`
	MinGpa                  string   `protobuf:"bytes,2,opt,name=minGpa,proto3" json:"minGpa,omitempty"`
	RequiredElectiveCredits string   `protobuf:"bytes,3,opt,name=requiredElectiveCredits,proto3" json:"requiredElectiveCredits,omitempty"`
	RequiredActivities      []string `protobuf:"bytes,4,rep,name=requiredActivities,proto3" json:"requiredActivities,omitempty"`
	MinimumTimeYears        string   `protobuf:"bytes,5,opt,name=minimumTimeYears,proto3" json:"minimumTimeYears,omitempty"`
	MaximumTimeYears        string   `protobuf:"bytes,6,opt,name=maximumTimeYears,proto3" json:"maximumTimeYears,omitempty"`
}

func (m *GraduationRequirements) Reset()         { *m = GraduationRequirements{} }
func (m *GraduationRequirements) String() string { return proto.CompactTextString(m) }
func (*GraduationRequirements) ProtoMessage()    {}
func (*GraduationRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor_e94948c5d258d280, []int{0}
}
func (m *GraduationRequirements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraduationRequirements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraduationRequirements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GraduationRequirements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraduationRequirements.Merge(m, src)
}
func (m *GraduationRequirements) XXX_Size() int {
	return m.Size()
}
func (m *GraduationRequirements) XXX_DiscardUnknown() {
	xxx_messageInfo_GraduationRequirements.DiscardUnknown(m)
}

var xxx_messageInfo_GraduationRequirements proto.InternalMessageInfo

func (m *GraduationRequirements) GetTotalCreditsRequired() string {
	if m != nil {
		return m.TotalCreditsRequired
	}
	return ""
}

func (m *GraduationRequirements) GetMinGpa() string {
	if m != nil {
		return m.MinGpa
	}
	return ""
}

func (m *GraduationRequirements) GetRequiredElectiveCredits() string {
	if m != nil {
		return m.RequiredElectiveCredits
	}
	return ""
}

func (m *GraduationRequirements) GetRequiredActivities() []string {
	if m != nil {
		return m.RequiredActivities
	}
	return nil
}

func (m *GraduationRequirements) GetMinimumTimeYears() string {
	if m != nil {
		return m.MinimumTimeYears
	}
	return ""
}

func (m *GraduationRequirements) GetMaximumTimeYears() string {
	if m != nil {
		return m.MaximumTimeYears
	}
	return ""
}

func init() {
	proto.RegisterType((*GraduationRequirements)(nil), "academictoken.curriculum.GraduationRequirements")
}

func init() {
	proto.RegisterFile("academictoken/curriculum/graduation_requirements.proto", fileDescriptor_e94948c5d258d280)
}

var fileDescriptor_e94948c5d258d280 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4a, 0xf4, 0x40,
	0x14, 0x46, 0x93, 0xdd, 0xff, 0x0f, 0xec, 0x54, 0x32, 0xc8, 0x3a, 0xd5, 0x10, 0xac, 0x16, 0x8b,
	0x2c, 0x28, 0x88, 0xd8, 0xa9, 0xc8, 0xf6, 0xc1, 0x46, 0x1b, 0x19, 0x93, 0x8b, 0x5c, 0xcc, 0x24,
	0x71, 0xe6, 0x8e, 0xac, 0x6f, 0xe1, 0x53, 0xf8, 0x2c, 0x96, 0x5b, 0x5a, 0x4a, 0xf2, 0x22, 0xe2,
	0x30, 0xea, 0x46, 0xd7, 0x32, 0xf7, 0x9c, 0x43, 0x06, 0x3e, 0x76, 0xa8, 0x0a, 0x55, 0x82, 0xc6,
	0x82, 0x9a, 0x3b, 0xa8, 0xe7, 0x85, 0x33, 0x06, 0x0b, 0x57, 0x39, 0x3d, 0xbf, 0x35, 0xaa, 0x74,
	0x8a, 0xb0, 0xa9, 0xaf, 0x0d, 0xdc, 0x3b, 0x34, 0xa0, 0xa1, 0x26, 0x9b, 0xb5, 0xa6, 0xa1, 0x86,
	0x8b, 0x41, 0x97, 0x7d, 0x77, 0xbb, 0xcf, 0x23, 0x36, 0x5d, 0x7c, 0xb5, 0xf9, 0x5a, 0xca, 0xf7,
	0xd9, 0x36, 0x35, 0xa4, 0xaa, 0x33, 0x03, 0x25, 0x92, 0x0d, 0xac, 0x14, 0x71, 0x1a, 0xcf, 0x26,
	0xf9, 0x46, 0xc6, 0xa7, 0x2c, 0xd1, 0x58, 0x2f, 0x5a, 0x25, 0x46, 0xde, 0x0a, 0x5f, 0xfc, 0x88,
	0xed, 0x84, 0x67, 0x95, 0xe7, 0x15, 0x14, 0x84, 0x0f, 0x10, 0x52, 0x31, 0xf6, 0xe2, 0x5f, 0x98,
	0x67, 0x8c, 0x7f, 0xa2, 0x93, 0x0f, 0x80, 0x84, 0x60, 0xc5, 0xbf, 0x74, 0x3c, 0x9b, 0xe4, 0x1b,
	0x08, 0xdf, 0x63, 0x5b, 0x1a, 0x6b, 0xd4, 0x4e, 0x5f, 0xa0, 0x86, 0x4b, 0x50, 0xc6, 0x8a, 0xff,
	0xfe, 0x17, 0xbf, 0xee, 0xde, 0x55, 0xcb, 0xa1, 0x9b, 0x04, 0xf7, 0xc7, 0xfd, 0xf4, 0xf8, 0xa5,
	0x93, 0xf1, 0xaa, 0x93, 0xf1, 0x5b, 0x27, 0xe3, 0xa7, 0x5e, 0x46, 0xab, 0x5e, 0x46, 0xaf, 0xbd,
	0x8c, 0xae, 0xd2, 0xe1, 0x28, 0xcb, 0xf5, 0x59, 0xe8, 0xb1, 0x05, 0x7b, 0x93, 0xf8, 0x15, 0x0e,
	0xde, 0x03, 0x00, 0x00, 0xff, 0xff, 0x56, 0x7b, 0x65, 0xdc, 0xbf, 0x01, 0x00, 0x00,
}

func (m *GraduationRequirements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraduationRequirements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GraduationRequirements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaximumTimeYears) > 0 {
		i -= len(m.MaximumTimeYears)
		copy(dAtA[i:], m.MaximumTimeYears)
		i = encodeVarintGraduationRequirements(dAtA, i, uint64(len(m.MaximumTimeYears)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MinimumTimeYears) > 0 {
		i -= len(m.MinimumTimeYears)
		copy(dAtA[i:], m.MinimumTimeYears)
		i = encodeVarintGraduationRequirements(dAtA, i, uint64(len(m.MinimumTimeYears)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RequiredActivities) > 0 {
		for iNdEx := len(m.RequiredActivities) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredActivities[iNdEx])
			copy(dAtA[i:], m.RequiredActivities[iNdEx])
			i = encodeVarintGraduationRequirements(dAtA, i, uint64(len(m.RequiredActivities[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RequiredElectiveCredits) > 0 {
		i -= len(m.RequiredElectiveCredits)
		copy(dAtA[i:], m.RequiredElectiveCredits)
		i = encodeVarintGraduationRequirements(dAtA, i, uint64(len(m.RequiredElectiveCredits)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinGpa) > 0 {
		i -= len(m.MinGpa)
		copy(dAtA[i:], m.MinGpa)
		i = encodeVarintGraduationRequirements(dAtA, i, uint64(len(m.MinGpa)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TotalCreditsRequired) > 0 {
		i -= len(m.TotalCreditsRequired)
		copy(dAtA[i:], m.TotalCreditsRequired)
		i = encodeVarintGraduationRequirements(dAtA, i, uint64(len(m.TotalCreditsRequired)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGraduationRequirements(dAtA []byte, offset int, v uint64) int {
	offset -= sovGraduationRequirements(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GraduationRequirements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalCreditsRequired)
	if l > 0 {
		n += 1 + l + sovGraduationRequirements(uint64(l))
	}
	l = len(m.MinGpa)
	if l > 0 {
		n += 1 + l + sovGraduationRequirements(uint64(l))
	}
	l = len(m.RequiredElectiveCredits)
	if l > 0 {
		n += 1 + l + sovGraduationRequirements(uint64(l))
	}
	if len(m.RequiredActivities) > 0 {
		for _, s := range m.RequiredActivities {
			l = len(s)
			n += 1 + l + sovGraduationRequirements(uint64(l))
		}
	}
	l = len(m.MinimumTimeYears)
	if l > 0 {
		n += 1 + l + sovGraduationRequirements(uint64(l))
	}
	l = len(m.MaximumTimeYears)
	if l > 0 {
		n += 1 + l + sovGraduationRequirements(uint64(l))
	}
	return n
}

func sovGraduationRequirements(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGraduationRequirements(x uint64) (n int) {
	return sovGraduationRequirements(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GraduationRequirements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraduationRequirements
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraduationRequirements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraduationRequirements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCreditsRequired", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraduationRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCreditsRequired = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGpa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraduationRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinGpa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredElectiveCredits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraduationRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredElectiveCredits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredActivities", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraduationRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredActivities = append(m.RequiredActivities, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumTimeYears", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraduationRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumTimeYears = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumTimeYears", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraduationRequirements
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaximumTimeYears = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraduationRequirements(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGraduationRequirements
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraduationRequirements(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraduationRequirements
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraduationRequirements
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraduationRequirements
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGraduationRequirements
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGraduationRequirements
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGraduationRequirements
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGraduationRequirements        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraduationRequirements          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGraduationRequirements = fmt.Errorf("proto: unexpected end of group")
)
