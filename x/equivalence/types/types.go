package types

// Only response types that are not generated by protobuf
// These are needed for the message handlers

// MsgApproveEquivalenceResponse defines the response for MsgApproveEquivalence
type MsgApproveEquivalenceResponse struct {
	EquivalenceId      string `json:"equivalence_id"`
	Status             string `json:"status"`
	EquivalencePercent string `json:"equivalence_percent"`
	Message            string `json:"message"`
	AnalysisCount      uint64 `json:"analysis_count"`
	Timestamp          string `json:"timestamp"`
}

// MsgRejectEquivalenceResponse defines the response for MsgRejectEquivalence
type MsgRejectEquivalenceResponse struct {
	EquivalenceId  string `json:"equivalence_id"`
	Status         string `json:"status"`
	PreviousStatus string `json:"previous_status"`
	Message        string `json:"message"`
	Timestamp      string `json:"timestamp"`
}

// ============================================================================
// CONTRACT INTEGRATION TYPES
// ============================================================================

// ContractAnalysisResult represents the result from equivalence contract analysis
type ContractAnalysisResult struct {
	EquivalenceId      string `json:"equivalence_id"`
	SourceSubjectId    string `json:"source_subject_id"`
	TargetSubjectId    string `json:"target_subject_id"`
	EquivalencePercent string `json:"equivalence_percent"`
	AnalysisMetadata   string `json:"analysis_metadata"`
	ContractAddress    string `json:"contract_address"`
	ContractVersion    string `json:"contract_version"`
	AnalysisHash       string `json:"analysis_hash"`
	ProcessingTime     string `json:"processing_time"`
	Success            bool   `json:"success"`
	ErrorMessage       string `json:"error_message"`
}

// ContractAnalysisRequest represents a request for contract analysis
type ContractAnalysisRequest struct {
	EquivalenceId    string                 `json:"equivalence_id"`
	SourceSubjectId  string                 `json:"source_subject_id"`
	TargetSubjectId  string                 `json:"target_subject_id"`
	AnalysisParams   map[string]interface{} `json:"analysis_params"`
	RequestTimestamp string                 `json:"request_timestamp"`
	RequesterAddress string                 `json:"requester_address"`
}

// ContractInfo represents information about the equivalence contract
type ContractInfo struct {
	Address         string `json:"address"`
	Version         string `json:"version"`
	Status          string `json:"status"`
	LastUpdated     string `json:"last_updated"`
	AnalysisCount   uint64 `json:"analysis_count"`
	SuccessRate     string `json:"success_rate"`
	AverageGasUsed  uint64 `json:"average_gas_used"`
}

// AnalysisConfig represents configuration for equivalence analysis
type AnalysisConfig struct {
	SimilarityAlgorithm    string  `json:"similarity_algorithm"`
	ConfidenceThreshold    float64 `json:"confidence_threshold"`
	TextSimilarityWeight   float64 `json:"text_similarity_weight"`
	TopicSimilarityWeight  float64 `json:"topic_similarity_weight"`
	DefaultLanguage        string  `json:"default_language"`
	AnalysisMode           string  `json:"analysis_mode"`
	MaxRetries             uint64  `json:"max_retries"`
	TimeoutSeconds         uint64  `json:"timeout_seconds"`
}

// EquivalenceStatus represents the possible status values for equivalences
type EquivalenceStatus struct {
	Pending         string
	InProgress      string
	Approved        string
	Rejected        string
	Error           string
	RequiresReview  string
}

// GetEquivalenceStatuses returns all possible equivalence status values
func GetEquivalenceStatuses() EquivalenceStatus {
	return EquivalenceStatus{
		Pending:        "pending",
		InProgress:     "in_progress",
		Approved:       "approved",
		Rejected:       "rejected",
		Error:          "error",
		RequiresReview: "requires_review",
	}
}

// ============================================================================
// HARDCODED CONSTANTS AND HELPERS
// ============================================================================

// Default analysis configuration values
const (
	DefaultSimilarityAlgorithm   = "content_comparison"
	DefaultConfidenceThreshold   = 0.7
	DefaultTextSimilarityWeight  = 0.6
	DefaultTopicSimilarityWeight = 0.4
	DefaultLanguage              = "en"
	DefaultAnalysisMode          = "comprehensive"
)

// IsValidStatus checks if a status is valid
func IsValidStatus(status string) bool {
	statuses := GetEquivalenceStatuses()
	return status == statuses.Pending ||
		status == statuses.InProgress ||
		status == statuses.Approved ||
		status == statuses.Rejected ||
		status == statuses.Error ||
		status == statuses.RequiresReview
}

// GetMockContractInfo returns mock contract information for development
func GetMockContractInfo() ContractInfo {
	return ContractInfo{
		Address:         GetHardcodedEquivalenceContractAddress(),
		Version:         "v1.0.0",
		Status:          "active",
		LastUpdated:     "2024-01-01T00:00:00Z",
		AnalysisCount:   0,
		SuccessRate:     "100.0",
		AverageGasUsed:  150000,
	}
}

// ============================================================================
// VALIDATION HELPERS (REMOVED DUPLICATES)
// ============================================================================
// Note: ValidateEquivalencePercent is in constants.go - not duplicating here
// Note: GetDefaultAnalysisConfig is in params.go - not duplicating here
