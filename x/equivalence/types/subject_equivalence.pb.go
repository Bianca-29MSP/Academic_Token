// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/equivalence/subject_equivalence.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubjectEquivalence struct {
	Index               string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	SourceSubjectId     string `protobuf:"bytes,2,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetInstitution   string `protobuf:"bytes,3,opt,name=target_institution,json=targetInstitution,proto3" json:"target_institution,omitempty"`
	TargetSubjectId     string `protobuf:"bytes,4,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	EquivalenceStatus   string `protobuf:"bytes,5,opt,name=equivalence_status,json=equivalenceStatus,proto3" json:"equivalence_status,omitempty"`
	AnalysisCount       uint64 `protobuf:"varint,6,opt,name=analysis_count,json=analysisCount,proto3" json:"analysis_count,omitempty"`
	EquivalencePercent  string `protobuf:"bytes,7,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"`
	AnalysisMetadata    string `protobuf:"bytes,8,opt,name=analysis_metadata,json=analysisMetadata,proto3" json:"analysis_metadata,omitempty"`
	ContractAddress     string `protobuf:"bytes,9,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	LastUpdateTimestamp string `protobuf:"bytes,10,opt,name=last_update_timestamp,json=lastUpdateTimestamp,proto3" json:"last_update_timestamp,omitempty"`
	RequestTimestamp    string `protobuf:"bytes,11,opt,name=request_timestamp,json=requestTimestamp,proto3" json:"request_timestamp,omitempty"`
	AnalysisHash        string `protobuf:"bytes,12,opt,name=analysis_hash,json=analysisHash,proto3" json:"analysis_hash,omitempty"`
	ContractVersion     string `protobuf:"bytes,13,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
}

func (m *SubjectEquivalence) Reset()         { *m = SubjectEquivalence{} }
func (m *SubjectEquivalence) String() string { return proto.CompactTextString(m) }
func (*SubjectEquivalence) ProtoMessage()    {}
func (*SubjectEquivalence) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a80f26c23de5277, []int{0}
}
func (m *SubjectEquivalence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectEquivalence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubjectEquivalence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubjectEquivalence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectEquivalence.Merge(m, src)
}
func (m *SubjectEquivalence) XXX_Size() int {
	return m.Size()
}
func (m *SubjectEquivalence) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectEquivalence.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectEquivalence proto.InternalMessageInfo

func (m *SubjectEquivalence) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *SubjectEquivalence) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *SubjectEquivalence) GetTargetInstitution() string {
	if m != nil {
		return m.TargetInstitution
	}
	return ""
}

func (m *SubjectEquivalence) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

func (m *SubjectEquivalence) GetEquivalenceStatus() string {
	if m != nil {
		return m.EquivalenceStatus
	}
	return ""
}

func (m *SubjectEquivalence) GetAnalysisCount() uint64 {
	if m != nil {
		return m.AnalysisCount
	}
	return 0
}

func (m *SubjectEquivalence) GetEquivalencePercent() string {
	if m != nil {
		return m.EquivalencePercent
	}
	return ""
}

func (m *SubjectEquivalence) GetAnalysisMetadata() string {
	if m != nil {
		return m.AnalysisMetadata
	}
	return ""
}

func (m *SubjectEquivalence) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *SubjectEquivalence) GetLastUpdateTimestamp() string {
	if m != nil {
		return m.LastUpdateTimestamp
	}
	return ""
}

func (m *SubjectEquivalence) GetRequestTimestamp() string {
	if m != nil {
		return m.RequestTimestamp
	}
	return ""
}

func (m *SubjectEquivalence) GetAnalysisHash() string {
	if m != nil {
		return m.AnalysisHash
	}
	return ""
}

func (m *SubjectEquivalence) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*SubjectEquivalence)(nil), "academictoken.equivalence.SubjectEquivalence")
}

func init() {
	proto.RegisterFile("academictoken/equivalence/subject_equivalence.proto", fileDescriptor_9a80f26c23de5277)
}

var fileDescriptor_9a80f26c23de5277 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xb3, 0x90, 0x16, 0x6a, 0x5a, 0x68, 0x5c, 0x90, 0xcc, 0x65, 0x55, 0x40, 0x48, 0x05,
	0x44, 0x23, 0xd1, 0x23, 0x27, 0x40, 0x48, 0xf4, 0x80, 0x84, 0x5a, 0xe0, 0xc0, 0xc5, 0x9a, 0x7a,
	0x47, 0xc4, 0x90, 0x78, 0xb7, 0x9e, 0x71, 0xd5, 0xbe, 0x05, 0xaf, 0xc4, 0x8d, 0x63, 0x8f, 0x1c,
	0x51, 0xf2, 0x22, 0x68, 0xed, 0x6c, 0xe2, 0x3d, 0xee, 0xff, 0xfd, 0xfe, 0x3c, 0xd6, 0x8e, 0x38,
	0x02, 0x03, 0x15, 0xce, 0xac, 0xe1, 0xfa, 0x27, 0xba, 0x31, 0x9e, 0x07, 0x7b, 0x01, 0x53, 0x74,
	0x06, 0xc7, 0x14, 0xce, 0x7e, 0xa0, 0x61, 0x9d, 0x65, 0x87, 0x8d, 0xaf, 0xb9, 0x96, 0x0f, 0x7b,
	0x87, 0x0e, 0xb3, 0xc2, 0xe3, 0xdf, 0x43, 0x21, 0x4f, 0xd3, 0xc1, 0xf7, 0xeb, 0x58, 0xde, 0x17,
	0x1b, 0xd6, 0x55, 0x78, 0xa9, 0x8a, 0xfd, 0xe2, 0x60, 0xeb, 0x24, 0x7d, 0xc8, 0xe7, 0x62, 0x44,
	0x75, 0xf0, 0x06, 0x75, 0x77, 0x97, 0xad, 0xd4, 0x8d, 0xd8, 0xb8, 0x97, 0xc0, 0x52, 0x75, 0x5c,
	0xc9, 0x97, 0x42, 0x32, 0xf8, 0xef, 0xc8, 0xda, 0x3a, 0x62, 0xcb, 0x81, 0x6d, 0xed, 0xd4, 0xcd,
	0x58, 0x1e, 0x25, 0x72, 0xbc, 0x06, 0xad, 0x7a, 0x59, 0xcf, 0xd4, 0xc3, 0xa4, 0x4e, 0xa0, 0xa7,
	0xce, 0x9e, 0xa0, 0x89, 0x81, 0x03, 0xa9, 0x8d, 0xa4, 0xce, 0xc8, 0x69, 0x04, 0xf2, 0xa9, 0xb8,
	0x0b, 0x0e, 0xa6, 0x57, 0x64, 0x49, 0x9b, 0x3a, 0x38, 0x56, 0x9b, 0xfb, 0xc5, 0xc1, 0xf0, 0x64,
	0xa7, 0x4b, 0xdf, 0xb5, 0xa1, 0x1c, 0x8b, 0xbd, 0xdc, 0xda, 0xa0, 0x37, 0xe8, 0x58, 0xdd, 0x8a,
	0xda, 0xfc, 0xc2, 0x4f, 0x89, 0xc8, 0x17, 0x62, 0xb4, 0xf2, 0xce, 0x90, 0xa1, 0x02, 0x06, 0x75,
	0x3b, 0xd6, 0x77, 0x3b, 0xf0, 0x71, 0x99, 0xcb, 0x67, 0x62, 0xd7, 0xd4, 0x8e, 0x3d, 0x18, 0xd6,
	0x50, 0x55, 0x1e, 0x89, 0xd4, 0x56, 0x7a, 0x5e, 0x97, 0xbf, 0x49, 0xb1, 0x7c, 0x25, 0x1e, 0x4c,
	0x81, 0x58, 0x87, 0xa6, 0x02, 0x46, 0xcd, 0x76, 0x86, 0xc4, 0x30, 0x6b, 0x94, 0x88, 0xfd, 0xbd,
	0x16, 0x7e, 0x89, 0xec, 0x73, 0x87, 0xda, 0x59, 0x3c, 0x9e, 0x07, 0x24, 0xce, 0xfa, 0x77, 0xd2,
	0x2c, 0x4b, 0xb0, 0x2e, 0x3f, 0x11, 0xab, 0xa7, 0xeb, 0x09, 0xd0, 0x44, 0x6d, 0xc7, 0xe2, 0x76,
	0x17, 0x7e, 0x00, 0x9a, 0xf4, 0x06, 0xbe, 0x40, 0x4f, 0xed, 0xdf, 0xdb, 0xe9, 0x0f, 0xfc, 0x35,
	0xc5, 0x6f, 0x5f, 0xff, 0x99, 0x97, 0xc5, 0xf5, 0xbc, 0x2c, 0xfe, 0xcd, 0xcb, 0xe2, 0xd7, 0xa2,
	0x1c, 0x5c, 0x2f, 0xca, 0xc1, 0xdf, 0x45, 0x39, 0xf8, 0xf6, 0xa8, 0xbf, 0xad, 0x97, 0xbd, 0x7d,
	0xe5, 0xab, 0x06, 0xe9, 0x6c, 0x33, 0xae, 0xe8, 0xd1, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94,
	0x00, 0x90, 0xc3, 0xd9, 0x02, 0x00, 0x00,
}

func (m *SubjectEquivalence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectEquivalence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectEquivalence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AnalysisHash) > 0 {
		i -= len(m.AnalysisHash)
		copy(dAtA[i:], m.AnalysisHash)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.AnalysisHash)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.RequestTimestamp) > 0 {
		i -= len(m.RequestTimestamp)
		copy(dAtA[i:], m.RequestTimestamp)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.RequestTimestamp)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LastUpdateTimestamp) > 0 {
		i -= len(m.LastUpdateTimestamp)
		copy(dAtA[i:], m.LastUpdateTimestamp)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.LastUpdateTimestamp)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AnalysisMetadata) > 0 {
		i -= len(m.AnalysisMetadata)
		copy(dAtA[i:], m.AnalysisMetadata)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.AnalysisMetadata)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EquivalencePercent) > 0 {
		i -= len(m.EquivalencePercent)
		copy(dAtA[i:], m.EquivalencePercent)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.EquivalencePercent)))
		i--
		dAtA[i] = 0x3a
	}
	if m.AnalysisCount != 0 {
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(m.AnalysisCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.EquivalenceStatus) > 0 {
		i -= len(m.EquivalenceStatus)
		copy(dAtA[i:], m.EquivalenceStatus)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.EquivalenceStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetInstitution) > 0 {
		i -= len(m.TargetInstitution)
		copy(dAtA[i:], m.TargetInstitution)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.TargetInstitution)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSubjectEquivalence(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubjectEquivalence(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubjectEquivalence(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubjectEquivalence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.TargetInstitution)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.EquivalenceStatus)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	if m.AnalysisCount != 0 {
		n += 1 + sovSubjectEquivalence(uint64(m.AnalysisCount))
	}
	l = len(m.EquivalencePercent)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.AnalysisMetadata)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.LastUpdateTimestamp)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.RequestTimestamp)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.AnalysisHash)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovSubjectEquivalence(uint64(l))
	}
	return n
}

func sovSubjectEquivalence(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubjectEquivalence(x uint64) (n int) {
	return sovSubjectEquivalence(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubjectEquivalence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubjectEquivalence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectEquivalence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetInstitution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetInstitution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisCount", wireType)
			}
			m.AnalysisCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnalysisCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalencePercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdateTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubjectEquivalence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubjectEquivalence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubjectEquivalence(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubjectEquivalence
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubjectEquivalence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubjectEquivalence
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubjectEquivalence
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubjectEquivalence
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubjectEquivalence        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubjectEquivalence          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubjectEquivalence = fmt.Errorf("proto: unexpected end of group")
)
