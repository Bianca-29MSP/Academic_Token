// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/equivalence/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgRequestEquivalence requests automated equivalence analysis between two subjects
type MsgRequestEquivalence struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SourceSubjectId    string `protobuf:"bytes,2,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetInstitution  string `protobuf:"bytes,3,opt,name=target_institution,json=targetInstitution,proto3" json:"target_institution,omitempty"`
	TargetSubjectId    string `protobuf:"bytes,4,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	ForceRecalculation bool   `protobuf:"varint,5,opt,name=force_recalculation,json=forceRecalculation,proto3" json:"force_recalculation,omitempty"`
	ContractAddress    string `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgRequestEquivalence) Reset()         { *m = MsgRequestEquivalence{} }
func (m *MsgRequestEquivalence) String() string { return proto.CompactTextString(m) }
func (*MsgRequestEquivalence) ProtoMessage()    {}
func (*MsgRequestEquivalence) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{2}
}
func (m *MsgRequestEquivalence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestEquivalence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestEquivalence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestEquivalence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestEquivalence.Merge(m, src)
}
func (m *MsgRequestEquivalence) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestEquivalence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestEquivalence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestEquivalence proto.InternalMessageInfo

func (m *MsgRequestEquivalence) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestEquivalence) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *MsgRequestEquivalence) GetTargetInstitution() string {
	if m != nil {
		return m.TargetInstitution
	}
	return ""
}

func (m *MsgRequestEquivalence) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

func (m *MsgRequestEquivalence) GetForceRecalculation() bool {
	if m != nil {
		return m.ForceRecalculation
	}
	return false
}

func (m *MsgRequestEquivalence) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// MsgRequestEquivalenceResponse defines the response for MsgRequestEquivalence
type MsgRequestEquivalenceResponse struct {
	EquivalenceId     string `protobuf:"bytes,1,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
	Status            string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	AnalysisTriggered bool   `protobuf:"varint,3,opt,name=analysis_triggered,json=analysisTriggered,proto3" json:"analysis_triggered,omitempty"`
}

func (m *MsgRequestEquivalenceResponse) Reset()         { *m = MsgRequestEquivalenceResponse{} }
func (m *MsgRequestEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestEquivalenceResponse) ProtoMessage()    {}
func (*MsgRequestEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{3}
}
func (m *MsgRequestEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestEquivalenceResponse.Merge(m, src)
}
func (m *MsgRequestEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestEquivalenceResponse proto.InternalMessageInfo

func (m *MsgRequestEquivalenceResponse) GetEquivalenceId() string {
	if m != nil {
		return m.EquivalenceId
	}
	return ""
}

func (m *MsgRequestEquivalenceResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgRequestEquivalenceResponse) GetAnalysisTriggered() bool {
	if m != nil {
		return m.AnalysisTriggered
	}
	return false
}

// MsgExecuteEquivalenceAnalysis triggers the CosmWasm contract analysis
type MsgExecuteEquivalenceAnalysis struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EquivalenceId      string `protobuf:"bytes,2,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
	ContractAddress    string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	AnalysisParameters string `protobuf:"bytes,4,opt,name=analysis_parameters,json=analysisParameters,proto3" json:"analysis_parameters,omitempty"`
}

func (m *MsgExecuteEquivalenceAnalysis) Reset()         { *m = MsgExecuteEquivalenceAnalysis{} }
func (m *MsgExecuteEquivalenceAnalysis) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteEquivalenceAnalysis) ProtoMessage()    {}
func (*MsgExecuteEquivalenceAnalysis) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{4}
}
func (m *MsgExecuteEquivalenceAnalysis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteEquivalenceAnalysis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteEquivalenceAnalysis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteEquivalenceAnalysis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteEquivalenceAnalysis.Merge(m, src)
}
func (m *MsgExecuteEquivalenceAnalysis) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteEquivalenceAnalysis) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteEquivalenceAnalysis.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteEquivalenceAnalysis proto.InternalMessageInfo

func (m *MsgExecuteEquivalenceAnalysis) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgExecuteEquivalenceAnalysis) GetEquivalenceId() string {
	if m != nil {
		return m.EquivalenceId
	}
	return ""
}

func (m *MsgExecuteEquivalenceAnalysis) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgExecuteEquivalenceAnalysis) GetAnalysisParameters() string {
	if m != nil {
		return m.AnalysisParameters
	}
	return ""
}

// MsgExecuteEquivalenceAnalysisResponse defines the response for MsgExecuteEquivalenceAnalysis
type MsgExecuteEquivalenceAnalysisResponse struct {
	Success            bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	EquivalencePercent string `protobuf:"bytes,2,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"`
	AnalysisMetadata   string `protobuf:"bytes,3,opt,name=analysis_metadata,json=analysisMetadata,proto3" json:"analysis_metadata,omitempty"`
	AnalysisHash       string `protobuf:"bytes,4,opt,name=analysis_hash,json=analysisHash,proto3" json:"analysis_hash,omitempty"`
	UpdatedStatus      string `protobuf:"bytes,5,opt,name=updated_status,json=updatedStatus,proto3" json:"updated_status,omitempty"`
}

func (m *MsgExecuteEquivalenceAnalysisResponse) Reset()         { *m = MsgExecuteEquivalenceAnalysisResponse{} }
func (m *MsgExecuteEquivalenceAnalysisResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteEquivalenceAnalysisResponse) ProtoMessage()    {}
func (*MsgExecuteEquivalenceAnalysisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{5}
}
func (m *MsgExecuteEquivalenceAnalysisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteEquivalenceAnalysisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteEquivalenceAnalysisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteEquivalenceAnalysisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteEquivalenceAnalysisResponse.Merge(m, src)
}
func (m *MsgExecuteEquivalenceAnalysisResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteEquivalenceAnalysisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteEquivalenceAnalysisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteEquivalenceAnalysisResponse proto.InternalMessageInfo

func (m *MsgExecuteEquivalenceAnalysisResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgExecuteEquivalenceAnalysisResponse) GetEquivalencePercent() string {
	if m != nil {
		return m.EquivalencePercent
	}
	return ""
}

func (m *MsgExecuteEquivalenceAnalysisResponse) GetAnalysisMetadata() string {
	if m != nil {
		return m.AnalysisMetadata
	}
	return ""
}

func (m *MsgExecuteEquivalenceAnalysisResponse) GetAnalysisHash() string {
	if m != nil {
		return m.AnalysisHash
	}
	return ""
}

func (m *MsgExecuteEquivalenceAnalysisResponse) GetUpdatedStatus() string {
	if m != nil {
		return m.UpdatedStatus
	}
	return ""
}

// EquivalenceRequest defines a single equivalence request for batch operations
type EquivalenceRequest struct {
	SourceSubjectId   string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetInstitution string `protobuf:"bytes,2,opt,name=target_institution,json=targetInstitution,proto3" json:"target_institution,omitempty"`
	TargetSubjectId   string `protobuf:"bytes,3,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
}

func (m *EquivalenceRequest) Reset()         { *m = EquivalenceRequest{} }
func (m *EquivalenceRequest) String() string { return proto.CompactTextString(m) }
func (*EquivalenceRequest) ProtoMessage()    {}
func (*EquivalenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{6}
}
func (m *EquivalenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquivalenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquivalenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquivalenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquivalenceRequest.Merge(m, src)
}
func (m *EquivalenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *EquivalenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EquivalenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EquivalenceRequest proto.InternalMessageInfo

func (m *EquivalenceRequest) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *EquivalenceRequest) GetTargetInstitution() string {
	if m != nil {
		return m.TargetInstitution
	}
	return ""
}

func (m *EquivalenceRequest) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

// MsgBatchRequestEquivalence allows requesting multiple equivalences at once
type MsgBatchRequestEquivalence struct {
	Creator            string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Requests           []*EquivalenceRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	ForceRecalculation bool                  `protobuf:"varint,3,opt,name=force_recalculation,json=forceRecalculation,proto3" json:"force_recalculation,omitempty"`
	ContractAddress    string                `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *MsgBatchRequestEquivalence) Reset()         { *m = MsgBatchRequestEquivalence{} }
func (m *MsgBatchRequestEquivalence) String() string { return proto.CompactTextString(m) }
func (*MsgBatchRequestEquivalence) ProtoMessage()    {}
func (*MsgBatchRequestEquivalence) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{7}
}
func (m *MsgBatchRequestEquivalence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchRequestEquivalence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchRequestEquivalence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchRequestEquivalence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchRequestEquivalence.Merge(m, src)
}
func (m *MsgBatchRequestEquivalence) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchRequestEquivalence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchRequestEquivalence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchRequestEquivalence proto.InternalMessageInfo

func (m *MsgBatchRequestEquivalence) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBatchRequestEquivalence) GetRequests() []*EquivalenceRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

func (m *MsgBatchRequestEquivalence) GetForceRecalculation() bool {
	if m != nil {
		return m.ForceRecalculation
	}
	return false
}

func (m *MsgBatchRequestEquivalence) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

// BatchEquivalenceResult defines the result of a single equivalence request in a batch
type BatchEquivalenceResult struct {
	EquivalenceId      string `protobuf:"bytes,1,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
	SourceSubjectId    string `protobuf:"bytes,2,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetSubjectId    string `protobuf:"bytes,3,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	Status             string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	EquivalencePercent string `protobuf:"bytes,5,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"`
	Error              string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *BatchEquivalenceResult) Reset()         { *m = BatchEquivalenceResult{} }
func (m *BatchEquivalenceResult) String() string { return proto.CompactTextString(m) }
func (*BatchEquivalenceResult) ProtoMessage()    {}
func (*BatchEquivalenceResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{8}
}
func (m *BatchEquivalenceResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchEquivalenceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchEquivalenceResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchEquivalenceResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchEquivalenceResult.Merge(m, src)
}
func (m *BatchEquivalenceResult) XXX_Size() int {
	return m.Size()
}
func (m *BatchEquivalenceResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchEquivalenceResult.DiscardUnknown(m)
}

var xxx_messageInfo_BatchEquivalenceResult proto.InternalMessageInfo

func (m *BatchEquivalenceResult) GetEquivalenceId() string {
	if m != nil {
		return m.EquivalenceId
	}
	return ""
}

func (m *BatchEquivalenceResult) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *BatchEquivalenceResult) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

func (m *BatchEquivalenceResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BatchEquivalenceResult) GetEquivalencePercent() string {
	if m != nil {
		return m.EquivalencePercent
	}
	return ""
}

func (m *BatchEquivalenceResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// MsgBatchRequestEquivalenceResponse defines the response for MsgBatchRequestEquivalence
type MsgBatchRequestEquivalenceResponse struct {
	Results            []*BatchEquivalenceResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	SuccessfulRequests uint64                    `protobuf:"varint,2,opt,name=successful_requests,json=successfulRequests,proto3" json:"successful_requests,omitempty"`
	FailedRequests     uint64                    `protobuf:"varint,3,opt,name=failed_requests,json=failedRequests,proto3" json:"failed_requests,omitempty"`
	PendingAnalysis    uint64                    `protobuf:"varint,4,opt,name=pending_analysis,json=pendingAnalysis,proto3" json:"pending_analysis,omitempty"`
}

func (m *MsgBatchRequestEquivalenceResponse) Reset()         { *m = MsgBatchRequestEquivalenceResponse{} }
func (m *MsgBatchRequestEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBatchRequestEquivalenceResponse) ProtoMessage()    {}
func (*MsgBatchRequestEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{9}
}
func (m *MsgBatchRequestEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchRequestEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchRequestEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchRequestEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchRequestEquivalenceResponse.Merge(m, src)
}
func (m *MsgBatchRequestEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchRequestEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchRequestEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchRequestEquivalenceResponse proto.InternalMessageInfo

func (m *MsgBatchRequestEquivalenceResponse) GetResults() []*BatchEquivalenceResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *MsgBatchRequestEquivalenceResponse) GetSuccessfulRequests() uint64 {
	if m != nil {
		return m.SuccessfulRequests
	}
	return 0
}

func (m *MsgBatchRequestEquivalenceResponse) GetFailedRequests() uint64 {
	if m != nil {
		return m.FailedRequests
	}
	return 0
}

func (m *MsgBatchRequestEquivalenceResponse) GetPendingAnalysis() uint64 {
	if m != nil {
		return m.PendingAnalysis
	}
	return 0
}

// MsgUpdateContractAddress updates the CosmWasm contract address for equivalence analysis
type MsgUpdateContractAddress struct {
	Authority          string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	NewContractAddress string `protobuf:"bytes,2,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
	ContractVersion    string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
}

func (m *MsgUpdateContractAddress) Reset()         { *m = MsgUpdateContractAddress{} }
func (m *MsgUpdateContractAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateContractAddress) ProtoMessage()    {}
func (*MsgUpdateContractAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{10}
}
func (m *MsgUpdateContractAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateContractAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateContractAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateContractAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateContractAddress.Merge(m, src)
}
func (m *MsgUpdateContractAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateContractAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateContractAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateContractAddress proto.InternalMessageInfo

func (m *MsgUpdateContractAddress) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateContractAddress) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

func (m *MsgUpdateContractAddress) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

// MsgUpdateContractAddressResponse defines the response for MsgUpdateContractAddress
type MsgUpdateContractAddressResponse struct {
	Success                 bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PreviousContractAddress string `protobuf:"bytes,2,opt,name=previous_contract_address,json=previousContractAddress,proto3" json:"previous_contract_address,omitempty"`
	NewContractAddress      string `protobuf:"bytes,3,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
}

func (m *MsgUpdateContractAddressResponse) Reset()         { *m = MsgUpdateContractAddressResponse{} }
func (m *MsgUpdateContractAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateContractAddressResponse) ProtoMessage()    {}
func (*MsgUpdateContractAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{11}
}
func (m *MsgUpdateContractAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateContractAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateContractAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateContractAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateContractAddressResponse.Merge(m, src)
}
func (m *MsgUpdateContractAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateContractAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateContractAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateContractAddressResponse proto.InternalMessageInfo

func (m *MsgUpdateContractAddressResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgUpdateContractAddressResponse) GetPreviousContractAddress() string {
	if m != nil {
		return m.PreviousContractAddress
	}
	return ""
}

func (m *MsgUpdateContractAddressResponse) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

// MsgReanalyzeEquivalence forces re-analysis of an existing equivalence
type MsgReanalyzeEquivalence struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EquivalenceId    string `protobuf:"bytes,2,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
	ContractAddress  string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ReanalysisReason string `protobuf:"bytes,4,opt,name=reanalysis_reason,json=reanalysisReason,proto3" json:"reanalysis_reason,omitempty"`
}

func (m *MsgReanalyzeEquivalence) Reset()         { *m = MsgReanalyzeEquivalence{} }
func (m *MsgReanalyzeEquivalence) String() string { return proto.CompactTextString(m) }
func (*MsgReanalyzeEquivalence) ProtoMessage()    {}
func (*MsgReanalyzeEquivalence) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{12}
}
func (m *MsgReanalyzeEquivalence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReanalyzeEquivalence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReanalyzeEquivalence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReanalyzeEquivalence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReanalyzeEquivalence.Merge(m, src)
}
func (m *MsgReanalyzeEquivalence) XXX_Size() int {
	return m.Size()
}
func (m *MsgReanalyzeEquivalence) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReanalyzeEquivalence.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReanalyzeEquivalence proto.InternalMessageInfo

func (m *MsgReanalyzeEquivalence) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgReanalyzeEquivalence) GetEquivalenceId() string {
	if m != nil {
		return m.EquivalenceId
	}
	return ""
}

func (m *MsgReanalyzeEquivalence) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *MsgReanalyzeEquivalence) GetReanalysisReason() string {
	if m != nil {
		return m.ReanalysisReason
	}
	return ""
}

// MsgReanalyzeEquivalenceResponse defines the response for MsgReanalyzeEquivalence
type MsgReanalyzeEquivalenceResponse struct {
	Success            bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PreviousStatus     string `protobuf:"bytes,2,opt,name=previous_status,json=previousStatus,proto3" json:"previous_status,omitempty"`
	NewStatus          string `protobuf:"bytes,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	EquivalencePercent string `protobuf:"bytes,4,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"`
	AnalysisMetadata   string `protobuf:"bytes,5,opt,name=analysis_metadata,json=analysisMetadata,proto3" json:"analysis_metadata,omitempty"`
}

func (m *MsgReanalyzeEquivalenceResponse) Reset()         { *m = MsgReanalyzeEquivalenceResponse{} }
func (m *MsgReanalyzeEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReanalyzeEquivalenceResponse) ProtoMessage()    {}
func (*MsgReanalyzeEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_981c8a4f21bfea36, []int{13}
}
func (m *MsgReanalyzeEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReanalyzeEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReanalyzeEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReanalyzeEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReanalyzeEquivalenceResponse.Merge(m, src)
}
func (m *MsgReanalyzeEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReanalyzeEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReanalyzeEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReanalyzeEquivalenceResponse proto.InternalMessageInfo

func (m *MsgReanalyzeEquivalenceResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MsgReanalyzeEquivalenceResponse) GetPreviousStatus() string {
	if m != nil {
		return m.PreviousStatus
	}
	return ""
}

func (m *MsgReanalyzeEquivalenceResponse) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *MsgReanalyzeEquivalenceResponse) GetEquivalencePercent() string {
	if m != nil {
		return m.EquivalencePercent
	}
	return ""
}

func (m *MsgReanalyzeEquivalenceResponse) GetAnalysisMetadata() string {
	if m != nil {
		return m.AnalysisMetadata
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "academictoken.equivalence.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "academictoken.equivalence.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgRequestEquivalence)(nil), "academictoken.equivalence.MsgRequestEquivalence")
	proto.RegisterType((*MsgRequestEquivalenceResponse)(nil), "academictoken.equivalence.MsgRequestEquivalenceResponse")
	proto.RegisterType((*MsgExecuteEquivalenceAnalysis)(nil), "academictoken.equivalence.MsgExecuteEquivalenceAnalysis")
	proto.RegisterType((*MsgExecuteEquivalenceAnalysisResponse)(nil), "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse")
	proto.RegisterType((*EquivalenceRequest)(nil), "academictoken.equivalence.EquivalenceRequest")
	proto.RegisterType((*MsgBatchRequestEquivalence)(nil), "academictoken.equivalence.MsgBatchRequestEquivalence")
	proto.RegisterType((*BatchEquivalenceResult)(nil), "academictoken.equivalence.BatchEquivalenceResult")
	proto.RegisterType((*MsgBatchRequestEquivalenceResponse)(nil), "academictoken.equivalence.MsgBatchRequestEquivalenceResponse")
	proto.RegisterType((*MsgUpdateContractAddress)(nil), "academictoken.equivalence.MsgUpdateContractAddress")
	proto.RegisterType((*MsgUpdateContractAddressResponse)(nil), "academictoken.equivalence.MsgUpdateContractAddressResponse")
	proto.RegisterType((*MsgReanalyzeEquivalence)(nil), "academictoken.equivalence.MsgReanalyzeEquivalence")
	proto.RegisterType((*MsgReanalyzeEquivalenceResponse)(nil), "academictoken.equivalence.MsgReanalyzeEquivalenceResponse")
}

func init() {
	proto.RegisterFile("academictoken/equivalence/tx.proto", fileDescriptor_981c8a4f21bfea36)
}

var fileDescriptor_981c8a4f21bfea36 = []byte{
	// 1144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4b, 0x6c, 0xdc, 0x44,
	0x18, 0xce, 0x64, 0x77, 0xf3, 0xf8, 0x9b, 0xe6, 0x61, 0xd2, 0x66, 0x63, 0xa9, 0xdb, 0xd4, 0xa8,
	0x34, 0x4d, 0x94, 0x6c, 0x9b, 0x0a, 0x84, 0x52, 0x81, 0x68, 0xa0, 0x12, 0x11, 0x8a, 0x14, 0x39,
	0xc0, 0x81, 0x8b, 0x35, 0xb5, 0x27, 0x5e, 0xc3, 0xae, 0xbd, 0x9d, 0x19, 0xe7, 0xc1, 0xa9, 0xe2,
	0x80, 0x04, 0x12, 0x82, 0x23, 0x12, 0x37, 0x4e, 0x88, 0x53, 0x0e, 0xdc, 0x81, 0x5b, 0xc5, 0x85,
	0x8a, 0x13, 0x27, 0x04, 0xc9, 0x21, 0x07, 0xee, 0x9c, 0x91, 0x67, 0xc6, 0x5e, 0xef, 0xae, 0xed,
	0xee, 0x46, 0xbd, 0x24, 0x3b, 0xff, 0xcb, 0xff, 0xf7, 0xfd, 0x8f, 0xb1, 0xc1, 0xc0, 0x36, 0x76,
	0x48, 0xcb, 0xb3, 0x79, 0xf0, 0x09, 0xf1, 0xeb, 0xe4, 0x71, 0xe8, 0x1d, 0xe0, 0x26, 0xf1, 0x6d,
	0x52, 0xe7, 0x47, 0xeb, 0x6d, 0x1a, 0xf0, 0x40, 0x5b, 0xec, 0xb2, 0x59, 0x4f, 0xd9, 0xe8, 0x73,
	0xb8, 0xe5, 0xf9, 0x41, 0x5d, 0xfc, 0x95, 0xd6, 0xfa, 0x82, 0x1d, 0xb0, 0x56, 0xc0, 0xea, 0x2d,
	0xe6, 0xd6, 0x0f, 0xee, 0x46, 0xff, 0x94, 0x62, 0x51, 0x2a, 0x2c, 0x71, 0xaa, 0xcb, 0x83, 0x52,
	0xcd, 0xbb, 0x81, 0x1b, 0x48, 0x79, 0xf4, 0x4b, 0x49, 0x5f, 0xc9, 0xcf, 0xad, 0x8d, 0x29, 0x6e,
	0x29, 0x6f, 0xe3, 0x77, 0x04, 0x33, 0x3b, 0xcc, 0xfd, 0xa0, 0xed, 0x60, 0x4e, 0x76, 0x85, 0x46,
	0x7b, 0x0d, 0x26, 0x71, 0xc8, 0x1b, 0x01, 0xf5, 0xf8, 0x71, 0x15, 0x2d, 0xa1, 0xe5, 0xc9, 0xad,
	0xea, 0x1f, 0x3f, 0xad, 0xcd, 0xab, 0xc7, 0x3e, 0x70, 0x1c, 0x4a, 0x18, 0xdb, 0xe3, 0xd4, 0xf3,
	0x5d, 0xb3, 0x63, 0xaa, 0xbd, 0x03, 0x63, 0x32, 0x76, 0x75, 0x74, 0x09, 0x2d, 0x5f, 0xda, 0xb8,
	0xb1, 0x9e, 0x0b, 0x7e, 0x5d, 0x3e, 0x6a, 0x6b, 0xf2, 0xe9, 0x5f, 0xd7, 0x47, 0x7e, 0x38, 0x3f,
	0x59, 0x41, 0xa6, 0xf2, 0xdd, 0x7c, 0xf3, 0xb3, 0xf3, 0x93, 0x95, 0x4e, 0xd4, 0x2f, 0xcf, 0x4f,
	0x56, 0x56, 0xbb, 0xc1, 0x1c, 0x75, 0xc1, 0xe9, 0xc9, 0xde, 0x58, 0x84, 0x85, 0x1e, 0x91, 0x49,
	0x58, 0x3b, 0xf0, 0x19, 0x31, 0xbe, 0x1f, 0x85, 0x2b, 0x3b, 0xcc, 0x35, 0xc9, 0xe3, 0x90, 0x30,
	0xfe, 0xb0, 0x13, 0x44, 0xab, 0xc2, 0xb8, 0x4d, 0x09, 0xe6, 0x01, 0x95, 0x80, 0xcd, 0xf8, 0xa8,
	0xad, 0xc0, 0x1c, 0x0b, 0x42, 0x6a, 0x13, 0x8b, 0x85, 0x8f, 0x3e, 0x26, 0x36, 0xb7, 0x3c, 0x47,
	0xe0, 0x9b, 0x34, 0x67, 0xa4, 0x62, 0x4f, 0xca, 0xb7, 0x1d, 0x6d, 0x0d, 0x34, 0x8e, 0xa9, 0x4b,
	0xb8, 0xe5, 0xf9, 0x8c, 0x7b, 0x3c, 0xe4, 0x5e, 0xe0, 0x57, 0x4b, 0xc2, 0x78, 0x4e, 0x6a, 0xb6,
	0x3b, 0x8a, 0x28, 0xb4, 0x32, 0x4f, 0x85, 0x2e, 0xcb, 0xd0, 0x52, 0xd1, 0x09, 0x5d, 0x87, 0x97,
	0xf6, 0x83, 0x28, 0x0b, 0x4a, 0x6c, 0xdc, 0xb4, 0xc3, 0x26, 0x16, 0xb1, 0x2b, 0x4b, 0x68, 0x79,
	0xc2, 0xd4, 0x84, 0xca, 0x4c, 0x6b, 0xb4, 0xdb, 0x30, 0x6b, 0x07, 0x3e, 0xa7, 0xd8, 0xe6, 0x16,
	0x96, 0x15, 0xab, 0x8e, 0xc9, 0xd8, 0xb1, 0x5c, 0x15, 0x72, 0x73, 0x2a, 0x62, 0x3c, 0x06, 0x6c,
	0x7c, 0x85, 0xe0, 0x5a, 0x26, 0x49, 0x31, 0x8d, 0xda, 0x4d, 0x98, 0x4e, 0x15, 0x20, 0x4a, 0x5a,
	0x72, 0x76, 0x39, 0x25, 0xdd, 0x76, 0xb4, 0xab, 0x30, 0xc6, 0x38, 0xe6, 0x21, 0x53, 0x74, 0xa9,
	0x53, 0xc4, 0x12, 0xf6, 0x71, 0xf3, 0x98, 0x79, 0xcc, 0xe2, 0xd4, 0x73, 0x5d, 0x42, 0x89, 0x23,
	0x58, 0x9a, 0x30, 0xe7, 0x62, 0xcd, 0xfb, 0xb1, 0xc2, 0xf8, 0x4d, 0xe6, 0xf3, 0xf0, 0x88, 0xd8,
	0x21, 0x27, 0xa9, 0x7c, 0x1e, 0x28, 0xd3, 0x82, 0xe2, 0xf5, 0x67, 0x3a, 0x9a, 0x95, 0x69, 0x16,
	0x57, 0xa5, 0x4c, 0xae, 0xa2, 0x3a, 0x24, 0xc9, 0x8b, 0x86, 0x25, 0x9c, 0x50, 0xa6, 0xaa, 0x96,
	0xe0, 0xda, 0x4d, 0x34, 0x3d, 0xe4, 0xfe, 0x8b, 0xe0, 0x66, 0x21, 0x98, 0x84, 0xe4, 0x2a, 0x8c,
	0xb3, 0xd0, 0xb6, 0xa3, 0x54, 0x90, 0xa0, 0x26, 0x3e, 0x46, 0x29, 0xa4, 0x41, 0xb5, 0x09, 0xb5,
	0x89, 0xcf, 0x15, 0x32, 0x2d, 0xa5, 0xda, 0x95, 0x1a, 0x6d, 0x15, 0x12, 0x5a, 0xad, 0x16, 0xe1,
	0xd8, 0xc1, 0x1c, 0x2b, 0x7c, 0xb3, 0xb1, 0x62, 0x47, 0xc9, 0xb5, 0x97, 0xe1, 0x72, 0x62, 0xdc,
	0xc0, 0xac, 0xa1, 0xa0, 0x4d, 0xc5, 0xc2, 0x77, 0x31, 0x6b, 0x44, 0xbc, 0x86, 0x62, 0xc0, 0x1c,
	0x4b, 0x95, 0xb8, 0x22, 0x79, 0x55, 0xd2, 0x3d, 0x21, 0x34, 0xbe, 0x43, 0xa0, 0x75, 0x35, 0x90,
	0x68, 0xa9, 0xec, 0x91, 0x42, 0xc3, 0x8c, 0xd4, 0xe8, 0x50, 0x23, 0x55, 0xca, 0x1c, 0xa9, 0xa8,
	0x16, 0xfa, 0x0e, 0x73, 0xb7, 0x30, 0xb7, 0x1b, 0x43, 0xad, 0x84, 0x6d, 0x98, 0xa0, 0xd2, 0x3e,
	0x6a, 0xed, 0xd2, 0xf2, 0xa5, 0x8d, 0xb5, 0x82, 0x4d, 0xd7, 0x4f, 0x80, 0x99, 0xb8, 0xe7, 0x8d,
	0x75, 0x69, 0xa8, 0xb1, 0x2e, 0x0f, 0x32, 0xd6, 0xff, 0x21, 0xb8, 0x2a, 0xa0, 0x76, 0x4f, 0x74,
	0xd8, 0xe4, 0x83, 0xce, 0xf3, 0x30, 0x9b, 0x70, 0x88, 0x3a, 0xa4, 0xf6, 0x44, 0xb9, 0x6b, 0x4f,
	0xe4, 0xf4, 0x79, 0x25, 0xb7, 0xcf, 0xe7, 0xa1, 0x42, 0x28, 0x0d, 0xa8, 0xda, 0x73, 0xf2, 0x10,
	0x01, 0x37, 0xf2, 0xcb, 0x9c, 0xcc, 0xdb, 0x7b, 0x30, 0x4e, 0x05, 0x1d, 0xd1, 0xbc, 0x45, 0x35,
	0xbd, 0x5b, 0x50, 0xd3, 0x6c, 0x22, 0xcd, 0x38, 0x42, 0x94, 0xba, 0x9a, 0xd6, 0xfd, 0xb0, 0x69,
	0xa5, 0x9a, 0x05, 0x2d, 0x97, 0x4d, 0xad, 0xa3, 0x32, 0xe3, 0x3e, 0xb8, 0x05, 0x33, 0xfb, 0xd8,
	0x6b, 0x12, 0xa7, 0x63, 0x5c, 0x12, 0xc6, 0xd3, 0x52, 0x9c, 0x18, 0xde, 0x86, 0xd9, 0x36, 0xf1,
	0x1d, 0xcf, 0x77, 0xad, 0x78, 0x22, 0x05, 0x6d, 0x65, 0x73, 0x46, 0xc9, 0xe3, 0x4d, 0x62, 0xfc,
	0x8c, 0xa0, 0x9a, 0xdc, 0x84, 0x6f, 0xf7, 0xec, 0xb1, 0x8b, 0xde, 0xf1, 0x77, 0x60, 0xde, 0x27,
	0x87, 0x56, 0x5f, 0x0f, 0xaa, 0xed, 0xe3, 0x93, 0xc3, 0xde, 0x27, 0xa5, 0x3b, 0xf6, 0x80, 0x50,
	0xd6, 0xb9, 0x12, 0x93, 0x8e, 0xfd, 0x50, 0x8a, 0x37, 0xa7, 0xbb, 0xaf, 0x7e, 0xe3, 0x47, 0x04,
	0x4b, 0x79, 0x08, 0x06, 0x58, 0x94, 0x9b, 0xb0, 0xd8, 0xa6, 0xe4, 0xc0, 0x0b, 0x42, 0x96, 0x97,
	0xf0, 0x42, 0x6c, 0xd0, 0x9b, 0x75, 0x1e, 0xce, 0x52, 0x1e, 0x4e, 0xe3, 0x17, 0x24, 0x5e, 0x3c,
	0x4c, 0x22, 0xea, 0xf2, 0x29, 0x19, 0x6c, 0x97, 0xbc, 0xf8, 0x1b, 0x6a, 0x15, 0xe6, 0x28, 0x49,
	0x56, 0x38, 0x25, 0x98, 0x05, 0xbe, 0x9a, 0xac, 0xd9, 0x8e, 0xc2, 0x14, 0xf2, 0x9e, 0x1d, 0xf1,
	0x0f, 0x82, 0xeb, 0x39, 0x10, 0x06, 0xa0, 0xfb, 0x16, 0xcc, 0x24, 0x74, 0x77, 0x5d, 0xfc, 0xd3,
	0xb1, 0x58, 0x5e, 0x0b, 0xda, 0x35, 0x80, 0x88, 0x5b, 0x65, 0x23, 0x61, 0x4c, 0xfa, 0xe4, 0x70,
	0xaf, 0x70, 0xee, 0xcb, 0xc3, 0xdd, 0x6f, 0x95, 0xec, 0xfb, 0x6d, 0xe3, 0xd7, 0x31, 0x28, 0xed,
	0x30, 0x57, 0xf3, 0x61, 0xaa, 0xeb, 0xa5, 0x77, 0xa5, 0x60, 0xdc, 0x7b, 0xde, 0x27, 0xf5, 0x8d,
	0xc1, 0x6d, 0x13, 0xde, 0x9e, 0x20, 0xd0, 0x32, 0x6e, 0x99, 0x3b, 0xc5, 0xa1, 0xfa, 0x3d, 0xf4,
	0xd7, 0x87, 0xf5, 0x48, 0x52, 0xf8, 0x16, 0x81, 0x5e, 0xf0, 0x1a, 0xf5, 0x9c, 0xc0, 0xf9, 0x9e,
	0xfa, 0x5b, 0x17, 0xf5, 0x4c, 0x52, 0xfb, 0x1a, 0xc1, 0x42, 0xde, 0x45, 0xfc, 0x6a, 0x71, 0xf4,
	0x1c, 0x37, 0xfd, 0x8d, 0x0b, 0xb9, 0x25, 0x19, 0x7d, 0x81, 0xe0, 0x4a, 0xf6, 0xea, 0xbc, 0x37,
	0x48, 0xf5, 0x7b, 0x9c, 0xf4, 0xfb, 0x17, 0x70, 0x4a, 0x72, 0xf9, 0x1c, 0xc1, 0x7c, 0xe6, 0x5e,
	0xd9, 0x78, 0x5e, 0x2f, 0xf4, 0xfb, 0xe8, 0x9b, 0xc3, 0xfb, 0xc4, 0x89, 0xe8, 0x95, 0x27, 0xd1,
	0xa7, 0xda, 0xd6, 0xfd, 0xa7, 0xa7, 0x35, 0xf4, 0xec, 0xb4, 0x86, 0xfe, 0x3e, 0xad, 0xa1, 0x6f,
	0xce, 0x6a, 0x23, 0xcf, 0xce, 0x6a, 0x23, 0x7f, 0x9e, 0xd5, 0x46, 0x3e, 0xba, 0x51, 0xf4, 0xa5,
	0xc6, 0x8f, 0xdb, 0x84, 0x3d, 0x1a, 0x13, 0x1f, 0x9e, 0xf7, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0xfe, 0xfb, 0x4a, 0xb1, 0x3e, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// RequestEquivalence requests automated equivalence analysis between two subjects
	RequestEquivalence(ctx context.Context, in *MsgRequestEquivalence, opts ...grpc.CallOption) (*MsgRequestEquivalenceResponse, error)
	// ExecuteEquivalenceAnalysis triggers the CosmWasm contract analysis
	ExecuteEquivalenceAnalysis(ctx context.Context, in *MsgExecuteEquivalenceAnalysis, opts ...grpc.CallOption) (*MsgExecuteEquivalenceAnalysisResponse, error)
	// BatchRequestEquivalence allows requesting multiple equivalences at once
	BatchRequestEquivalence(ctx context.Context, in *MsgBatchRequestEquivalence, opts ...grpc.CallOption) (*MsgBatchRequestEquivalenceResponse, error)
	// UpdateContractAddress updates the CosmWasm contract address for equivalence analysis
	UpdateContractAddress(ctx context.Context, in *MsgUpdateContractAddress, opts ...grpc.CallOption) (*MsgUpdateContractAddressResponse, error)
	// ReanalyzeEquivalence forces re-analysis of an existing equivalence
	ReanalyzeEquivalence(ctx context.Context, in *MsgReanalyzeEquivalence, opts ...grpc.CallOption) (*MsgReanalyzeEquivalenceResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestEquivalence(ctx context.Context, in *MsgRequestEquivalence, opts ...grpc.CallOption) (*MsgRequestEquivalenceResponse, error) {
	out := new(MsgRequestEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Msg/RequestEquivalence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteEquivalenceAnalysis(ctx context.Context, in *MsgExecuteEquivalenceAnalysis, opts ...grpc.CallOption) (*MsgExecuteEquivalenceAnalysisResponse, error) {
	out := new(MsgExecuteEquivalenceAnalysisResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Msg/ExecuteEquivalenceAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BatchRequestEquivalence(ctx context.Context, in *MsgBatchRequestEquivalence, opts ...grpc.CallOption) (*MsgBatchRequestEquivalenceResponse, error) {
	out := new(MsgBatchRequestEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Msg/BatchRequestEquivalence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateContractAddress(ctx context.Context, in *MsgUpdateContractAddress, opts ...grpc.CallOption) (*MsgUpdateContractAddressResponse, error) {
	out := new(MsgUpdateContractAddressResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Msg/UpdateContractAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReanalyzeEquivalence(ctx context.Context, in *MsgReanalyzeEquivalence, opts ...grpc.CallOption) (*MsgReanalyzeEquivalenceResponse, error) {
	out := new(MsgReanalyzeEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Msg/ReanalyzeEquivalence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// RequestEquivalence requests automated equivalence analysis between two subjects
	RequestEquivalence(context.Context, *MsgRequestEquivalence) (*MsgRequestEquivalenceResponse, error)
	// ExecuteEquivalenceAnalysis triggers the CosmWasm contract analysis
	ExecuteEquivalenceAnalysis(context.Context, *MsgExecuteEquivalenceAnalysis) (*MsgExecuteEquivalenceAnalysisResponse, error)
	// BatchRequestEquivalence allows requesting multiple equivalences at once
	BatchRequestEquivalence(context.Context, *MsgBatchRequestEquivalence) (*MsgBatchRequestEquivalenceResponse, error)
	// UpdateContractAddress updates the CosmWasm contract address for equivalence analysis
	UpdateContractAddress(context.Context, *MsgUpdateContractAddress) (*MsgUpdateContractAddressResponse, error)
	// ReanalyzeEquivalence forces re-analysis of an existing equivalence
	ReanalyzeEquivalence(context.Context, *MsgReanalyzeEquivalence) (*MsgReanalyzeEquivalenceResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) RequestEquivalence(ctx context.Context, req *MsgRequestEquivalence) (*MsgRequestEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEquivalence not implemented")
}
func (*UnimplementedMsgServer) ExecuteEquivalenceAnalysis(ctx context.Context, req *MsgExecuteEquivalenceAnalysis) (*MsgExecuteEquivalenceAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEquivalenceAnalysis not implemented")
}
func (*UnimplementedMsgServer) BatchRequestEquivalence(ctx context.Context, req *MsgBatchRequestEquivalence) (*MsgBatchRequestEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRequestEquivalence not implemented")
}
func (*UnimplementedMsgServer) UpdateContractAddress(ctx context.Context, req *MsgUpdateContractAddress) (*MsgUpdateContractAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractAddress not implemented")
}
func (*UnimplementedMsgServer) ReanalyzeEquivalence(ctx context.Context, req *MsgReanalyzeEquivalence) (*MsgReanalyzeEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReanalyzeEquivalence not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Msg/RequestEquivalence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestEquivalence(ctx, req.(*MsgRequestEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteEquivalenceAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteEquivalenceAnalysis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteEquivalenceAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Msg/ExecuteEquivalenceAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteEquivalenceAnalysis(ctx, req.(*MsgExecuteEquivalenceAnalysis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BatchRequestEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBatchRequestEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BatchRequestEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Msg/BatchRequestEquivalence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BatchRequestEquivalence(ctx, req.(*MsgBatchRequestEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateContractAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Msg/UpdateContractAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateContractAddress(ctx, req.(*MsgUpdateContractAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReanalyzeEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReanalyzeEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReanalyzeEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Msg/ReanalyzeEquivalence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReanalyzeEquivalence(ctx, req.(*MsgReanalyzeEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.equivalence.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RequestEquivalence",
			Handler:    _Msg_RequestEquivalence_Handler,
		},
		{
			MethodName: "ExecuteEquivalenceAnalysis",
			Handler:    _Msg_ExecuteEquivalenceAnalysis_Handler,
		},
		{
			MethodName: "BatchRequestEquivalence",
			Handler:    _Msg_BatchRequestEquivalence_Handler,
		},
		{
			MethodName: "UpdateContractAddress",
			Handler:    _Msg_UpdateContractAddress_Handler,
		},
		{
			MethodName: "ReanalyzeEquivalence",
			Handler:    _Msg_ReanalyzeEquivalence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/equivalence/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestEquivalence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestEquivalence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestEquivalence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.ForceRecalculation {
		i--
		if m.ForceRecalculation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetInstitution) > 0 {
		i -= len(m.TargetInstitution)
		copy(dAtA[i:], m.TargetInstitution)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetInstitution)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnalysisTriggered {
		i--
		if m.AnalysisTriggered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EquivalenceId) > 0 {
		i -= len(m.EquivalenceId)
		copy(dAtA[i:], m.EquivalenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EquivalenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteEquivalenceAnalysis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteEquivalenceAnalysis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteEquivalenceAnalysis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AnalysisParameters) > 0 {
		i -= len(m.AnalysisParameters)
		copy(dAtA[i:], m.AnalysisParameters)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AnalysisParameters)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EquivalenceId) > 0 {
		i -= len(m.EquivalenceId)
		copy(dAtA[i:], m.EquivalenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EquivalenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteEquivalenceAnalysisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteEquivalenceAnalysisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteEquivalenceAnalysisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedStatus) > 0 {
		i -= len(m.UpdatedStatus)
		copy(dAtA[i:], m.UpdatedStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UpdatedStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AnalysisHash) > 0 {
		i -= len(m.AnalysisHash)
		copy(dAtA[i:], m.AnalysisHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AnalysisHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AnalysisMetadata) > 0 {
		i -= len(m.AnalysisMetadata)
		copy(dAtA[i:], m.AnalysisMetadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AnalysisMetadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EquivalencePercent) > 0 {
		i -= len(m.EquivalencePercent)
		copy(dAtA[i:], m.EquivalencePercent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EquivalencePercent)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EquivalenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquivalenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquivalenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetInstitution) > 0 {
		i -= len(m.TargetInstitution)
		copy(dAtA[i:], m.TargetInstitution)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetInstitution)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchRequestEquivalence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchRequestEquivalence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchRequestEquivalence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.ForceRecalculation {
		i--
		if m.ForceRecalculation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchEquivalenceResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchEquivalenceResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchEquivalenceResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EquivalencePercent) > 0 {
		i -= len(m.EquivalencePercent)
		copy(dAtA[i:], m.EquivalencePercent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EquivalencePercent)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EquivalenceId) > 0 {
		i -= len(m.EquivalenceId)
		copy(dAtA[i:], m.EquivalenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EquivalenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchRequestEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchRequestEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchRequestEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingAnalysis != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PendingAnalysis))
		i--
		dAtA[i] = 0x20
	}
	if m.FailedRequests != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FailedRequests))
		i--
		dAtA[i] = 0x18
	}
	if m.SuccessfulRequests != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SuccessfulRequests))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateContractAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateContractAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateContractAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateContractAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateContractAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateContractAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PreviousContractAddress) > 0 {
		i -= len(m.PreviousContractAddress)
		copy(dAtA[i:], m.PreviousContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PreviousContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReanalyzeEquivalence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReanalyzeEquivalence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReanalyzeEquivalence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReanalysisReason) > 0 {
		i -= len(m.ReanalysisReason)
		copy(dAtA[i:], m.ReanalysisReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReanalysisReason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EquivalenceId) > 0 {
		i -= len(m.EquivalenceId)
		copy(dAtA[i:], m.EquivalenceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EquivalenceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReanalyzeEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReanalyzeEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReanalyzeEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AnalysisMetadata) > 0 {
		i -= len(m.AnalysisMetadata)
		copy(dAtA[i:], m.AnalysisMetadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AnalysisMetadata)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EquivalencePercent) > 0 {
		i -= len(m.EquivalencePercent)
		copy(dAtA[i:], m.EquivalencePercent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EquivalencePercent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PreviousStatus) > 0 {
		i -= len(m.PreviousStatus)
		copy(dAtA[i:], m.PreviousStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PreviousStatus)))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestEquivalence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetInstitution)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ForceRecalculation {
		n += 2
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRequestEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EquivalenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AnalysisTriggered {
		n += 2
	}
	return n
}

func (m *MsgExecuteEquivalenceAnalysis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EquivalenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AnalysisParameters)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExecuteEquivalenceAnalysisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.EquivalencePercent)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AnalysisMetadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AnalysisHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UpdatedStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *EquivalenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetInstitution)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBatchRequestEquivalence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ForceRecalculation {
		n += 2
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *BatchEquivalenceResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EquivalenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EquivalencePercent)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBatchRequestEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SuccessfulRequests != 0 {
		n += 1 + sovTx(uint64(m.SuccessfulRequests))
	}
	if m.FailedRequests != 0 {
		n += 1 + sovTx(uint64(m.FailedRequests))
	}
	if m.PendingAnalysis != 0 {
		n += 1 + sovTx(uint64(m.PendingAnalysis))
	}
	return n
}

func (m *MsgUpdateContractAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateContractAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.PreviousContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReanalyzeEquivalence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EquivalenceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReanalysisReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReanalyzeEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.PreviousStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EquivalencePercent)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AnalysisMetadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestEquivalence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestEquivalence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetInstitution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetInstitution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceRecalculation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceRecalculation = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisTriggered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AnalysisTriggered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteEquivalenceAnalysis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteEquivalenceAnalysis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteEquivalenceAnalysis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisParameters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisParameters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteEquivalenceAnalysisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteEquivalenceAnalysisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteEquivalenceAnalysisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalencePercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquivalenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquivalenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquivalenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetInstitution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetInstitution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchRequestEquivalence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchRequestEquivalence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchRequestEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &EquivalenceRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceRecalculation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceRecalculation = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchEquivalenceResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchEquivalenceResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchEquivalenceResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalencePercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchRequestEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchRequestEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchRequestEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &BatchEquivalenceResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessfulRequests", wireType)
			}
			m.SuccessfulRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuccessfulRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedRequests", wireType)
			}
			m.FailedRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailedRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAnalysis", wireType)
			}
			m.PendingAnalysis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingAnalysis |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateContractAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateContractAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateContractAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateContractAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateContractAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateContractAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReanalyzeEquivalence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReanalyzeEquivalence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReanalyzeEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReanalysisReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReanalysisReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReanalyzeEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReanalyzeEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReanalyzeEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalencePercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
