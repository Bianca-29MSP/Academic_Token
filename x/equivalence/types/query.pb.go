// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: academictoken/equivalence/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryListEquivalencesRequest is request type for the Query/ListEquivalences RPC method.
type QueryListEquivalencesRequest struct {
	Pagination   *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	StatusFilter string             `protobuf:"bytes,2,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"`
}

func (m *QueryListEquivalencesRequest) Reset()         { *m = QueryListEquivalencesRequest{} }
func (m *QueryListEquivalencesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListEquivalencesRequest) ProtoMessage()    {}
func (*QueryListEquivalencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{2}
}
func (m *QueryListEquivalencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListEquivalencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListEquivalencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListEquivalencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListEquivalencesRequest.Merge(m, src)
}
func (m *QueryListEquivalencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListEquivalencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListEquivalencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListEquivalencesRequest proto.InternalMessageInfo

func (m *QueryListEquivalencesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryListEquivalencesRequest) GetStatusFilter() string {
	if m != nil {
		return m.StatusFilter
	}
	return ""
}

// QueryListEquivalencesResponse is response type for the Query/ListEquivalences RPC method.
type QueryListEquivalencesResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListEquivalencesResponse) Reset()         { *m = QueryListEquivalencesResponse{} }
func (m *QueryListEquivalencesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListEquivalencesResponse) ProtoMessage()    {}
func (*QueryListEquivalencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{3}
}
func (m *QueryListEquivalencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListEquivalencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListEquivalencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListEquivalencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListEquivalencesResponse.Merge(m, src)
}
func (m *QueryListEquivalencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListEquivalencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListEquivalencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListEquivalencesResponse proto.InternalMessageInfo

func (m *QueryListEquivalencesResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryListEquivalencesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalenceRequest is request type for the Query/GetEquivalence RPC method.
type QueryGetEquivalenceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetEquivalenceRequest) Reset()         { *m = QueryGetEquivalenceRequest{} }
func (m *QueryGetEquivalenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalenceRequest) ProtoMessage()    {}
func (*QueryGetEquivalenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{4}
}
func (m *QueryGetEquivalenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalenceRequest.Merge(m, src)
}
func (m *QueryGetEquivalenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalenceRequest proto.InternalMessageInfo

func (m *QueryGetEquivalenceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// QueryGetEquivalenceResponse is response type for the Query/GetEquivalence RPC method.
type QueryGetEquivalenceResponse struct {
	Equivalence SubjectEquivalence `protobuf:"bytes,1,opt,name=equivalence,proto3" json:"equivalence"`
}

func (m *QueryGetEquivalenceResponse) Reset()         { *m = QueryGetEquivalenceResponse{} }
func (m *QueryGetEquivalenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalenceResponse) ProtoMessage()    {}
func (*QueryGetEquivalenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{5}
}
func (m *QueryGetEquivalenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalenceResponse.Merge(m, src)
}
func (m *QueryGetEquivalenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalenceResponse proto.InternalMessageInfo

func (m *QueryGetEquivalenceResponse) GetEquivalence() SubjectEquivalence {
	if m != nil {
		return m.Equivalence
	}
	return SubjectEquivalence{}
}

// QueryGetEquivalencesBySourceSubjectRequest is request type for the Query/GetEquivalencesBySourceSubject RPC method.
type QueryGetEquivalencesBySourceSubjectRequest struct {
	SourceSubjectId string             `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	StatusFilter    string             `protobuf:"bytes,3,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"`
}

func (m *QueryGetEquivalencesBySourceSubjectRequest) Reset() {
	*m = QueryGetEquivalencesBySourceSubjectRequest{}
}
func (m *QueryGetEquivalencesBySourceSubjectRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEquivalencesBySourceSubjectRequest) ProtoMessage() {}
func (*QueryGetEquivalencesBySourceSubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{6}
}
func (m *QueryGetEquivalencesBySourceSubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesBySourceSubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesBySourceSubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesBySourceSubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesBySourceSubjectRequest.Merge(m, src)
}
func (m *QueryGetEquivalencesBySourceSubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesBySourceSubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesBySourceSubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesBySourceSubjectRequest proto.InternalMessageInfo

func (m *QueryGetEquivalencesBySourceSubjectRequest) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *QueryGetEquivalencesBySourceSubjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryGetEquivalencesBySourceSubjectRequest) GetStatusFilter() string {
	if m != nil {
		return m.StatusFilter
	}
	return ""
}

// QueryGetEquivalencesBySourceSubjectResponse is response type for the Query/GetEquivalencesBySourceSubject RPC method.
type QueryGetEquivalencesBySourceSubjectResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalencesBySourceSubjectResponse) Reset() {
	*m = QueryGetEquivalencesBySourceSubjectResponse{}
}
func (m *QueryGetEquivalencesBySourceSubjectResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEquivalencesBySourceSubjectResponse) ProtoMessage() {}
func (*QueryGetEquivalencesBySourceSubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{7}
}
func (m *QueryGetEquivalencesBySourceSubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesBySourceSubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesBySourceSubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesBySourceSubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesBySourceSubjectResponse.Merge(m, src)
}
func (m *QueryGetEquivalencesBySourceSubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesBySourceSubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesBySourceSubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesBySourceSubjectResponse proto.InternalMessageInfo

func (m *QueryGetEquivalencesBySourceSubjectResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetEquivalencesBySourceSubjectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalencesByTargetSubjectRequest is request type for the Query/GetEquivalencesByTargetSubject RPC method.
type QueryGetEquivalencesByTargetSubjectRequest struct {
	TargetSubjectId string             `protobuf:"bytes,1,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	StatusFilter    string             `protobuf:"bytes,3,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"`
}

func (m *QueryGetEquivalencesByTargetSubjectRequest) Reset() {
	*m = QueryGetEquivalencesByTargetSubjectRequest{}
}
func (m *QueryGetEquivalencesByTargetSubjectRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEquivalencesByTargetSubjectRequest) ProtoMessage() {}
func (*QueryGetEquivalencesByTargetSubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{8}
}
func (m *QueryGetEquivalencesByTargetSubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesByTargetSubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesByTargetSubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesByTargetSubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesByTargetSubjectRequest.Merge(m, src)
}
func (m *QueryGetEquivalencesByTargetSubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesByTargetSubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesByTargetSubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesByTargetSubjectRequest proto.InternalMessageInfo

func (m *QueryGetEquivalencesByTargetSubjectRequest) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

func (m *QueryGetEquivalencesByTargetSubjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryGetEquivalencesByTargetSubjectRequest) GetStatusFilter() string {
	if m != nil {
		return m.StatusFilter
	}
	return ""
}

// QueryGetEquivalencesByTargetSubjectResponse is response type for the Query/GetEquivalencesByTargetSubject RPC method.
type QueryGetEquivalencesByTargetSubjectResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalencesByTargetSubjectResponse) Reset() {
	*m = QueryGetEquivalencesByTargetSubjectResponse{}
}
func (m *QueryGetEquivalencesByTargetSubjectResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEquivalencesByTargetSubjectResponse) ProtoMessage() {}
func (*QueryGetEquivalencesByTargetSubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{9}
}
func (m *QueryGetEquivalencesByTargetSubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesByTargetSubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesByTargetSubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesByTargetSubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesByTargetSubjectResponse.Merge(m, src)
}
func (m *QueryGetEquivalencesByTargetSubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesByTargetSubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesByTargetSubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesByTargetSubjectResponse proto.InternalMessageInfo

func (m *QueryGetEquivalencesByTargetSubjectResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetEquivalencesByTargetSubjectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalencesByInstitutionRequest is request type for the Query/GetEquivalencesByInstitution RPC method.
type QueryGetEquivalencesByInstitutionRequest struct {
	InstitutionId string             `protobuf:"bytes,1,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	StatusFilter  string             `protobuf:"bytes,3,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"`
}

func (m *QueryGetEquivalencesByInstitutionRequest) Reset() {
	*m = QueryGetEquivalencesByInstitutionRequest{}
}
func (m *QueryGetEquivalencesByInstitutionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalencesByInstitutionRequest) ProtoMessage()    {}
func (*QueryGetEquivalencesByInstitutionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{10}
}
func (m *QueryGetEquivalencesByInstitutionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesByInstitutionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesByInstitutionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesByInstitutionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesByInstitutionRequest.Merge(m, src)
}
func (m *QueryGetEquivalencesByInstitutionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesByInstitutionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesByInstitutionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesByInstitutionRequest proto.InternalMessageInfo

func (m *QueryGetEquivalencesByInstitutionRequest) GetInstitutionId() string {
	if m != nil {
		return m.InstitutionId
	}
	return ""
}

func (m *QueryGetEquivalencesByInstitutionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryGetEquivalencesByInstitutionRequest) GetStatusFilter() string {
	if m != nil {
		return m.StatusFilter
	}
	return ""
}

// QueryGetEquivalencesByInstitutionResponse is response type for the Query/GetEquivalencesByInstitution RPC method.
type QueryGetEquivalencesByInstitutionResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalencesByInstitutionResponse) Reset() {
	*m = QueryGetEquivalencesByInstitutionResponse{}
}
func (m *QueryGetEquivalencesByInstitutionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEquivalencesByInstitutionResponse) ProtoMessage() {}
func (*QueryGetEquivalencesByInstitutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{11}
}
func (m *QueryGetEquivalencesByInstitutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesByInstitutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesByInstitutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesByInstitutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesByInstitutionResponse.Merge(m, src)
}
func (m *QueryGetEquivalencesByInstitutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesByInstitutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesByInstitutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesByInstitutionResponse proto.InternalMessageInfo

func (m *QueryGetEquivalencesByInstitutionResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetEquivalencesByInstitutionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCheckEquivalenceStatusRequest is request type for the Query/CheckEquivalenceStatus RPC method.
type QueryCheckEquivalenceStatusRequest struct {
	SourceSubjectId string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetSubjectId string `protobuf:"bytes,2,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
}

func (m *QueryCheckEquivalenceStatusRequest) Reset()         { *m = QueryCheckEquivalenceStatusRequest{} }
func (m *QueryCheckEquivalenceStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckEquivalenceStatusRequest) ProtoMessage()    {}
func (*QueryCheckEquivalenceStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{12}
}
func (m *QueryCheckEquivalenceStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckEquivalenceStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckEquivalenceStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckEquivalenceStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckEquivalenceStatusRequest.Merge(m, src)
}
func (m *QueryCheckEquivalenceStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckEquivalenceStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckEquivalenceStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckEquivalenceStatusRequest proto.InternalMessageInfo

func (m *QueryCheckEquivalenceStatusRequest) GetSourceSubjectId() string {
	if m != nil {
		return m.SourceSubjectId
	}
	return ""
}

func (m *QueryCheckEquivalenceStatusRequest) GetTargetSubjectId() string {
	if m != nil {
		return m.TargetSubjectId
	}
	return ""
}

// QueryCheckEquivalenceStatusResponse is response type for the Query/CheckEquivalenceStatus RPC method.
type QueryCheckEquivalenceStatusResponse struct {
	HasEquivalence     bool                `protobuf:"varint,1,opt,name=has_equivalence,json=hasEquivalence,proto3" json:"has_equivalence,omitempty"`
	Status             string              `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	EquivalencePercent string              `protobuf:"bytes,3,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"`
	Equivalence        *SubjectEquivalence `protobuf:"bytes,4,opt,name=equivalence,proto3" json:"equivalence,omitempty"`
	ContractVersion    string              `protobuf:"bytes,5,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	AnalysisTimestamp  string              `protobuf:"bytes,6,opt,name=analysis_timestamp,json=analysisTimestamp,proto3" json:"analysis_timestamp,omitempty"`
}

func (m *QueryCheckEquivalenceStatusResponse) Reset()         { *m = QueryCheckEquivalenceStatusResponse{} }
func (m *QueryCheckEquivalenceStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckEquivalenceStatusResponse) ProtoMessage()    {}
func (*QueryCheckEquivalenceStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{13}
}
func (m *QueryCheckEquivalenceStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckEquivalenceStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckEquivalenceStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckEquivalenceStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckEquivalenceStatusResponse.Merge(m, src)
}
func (m *QueryCheckEquivalenceStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckEquivalenceStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckEquivalenceStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckEquivalenceStatusResponse proto.InternalMessageInfo

func (m *QueryCheckEquivalenceStatusResponse) GetHasEquivalence() bool {
	if m != nil {
		return m.HasEquivalence
	}
	return false
}

func (m *QueryCheckEquivalenceStatusResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryCheckEquivalenceStatusResponse) GetEquivalencePercent() string {
	if m != nil {
		return m.EquivalencePercent
	}
	return ""
}

func (m *QueryCheckEquivalenceStatusResponse) GetEquivalence() *SubjectEquivalence {
	if m != nil {
		return m.Equivalence
	}
	return nil
}

func (m *QueryCheckEquivalenceStatusResponse) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *QueryCheckEquivalenceStatusResponse) GetAnalysisTimestamp() string {
	if m != nil {
		return m.AnalysisTimestamp
	}
	return ""
}

// QueryGetPendingAnalysisRequest is request type for the Query/GetPendingAnalysis RPC method.
type QueryGetPendingAnalysisRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetPendingAnalysisRequest) Reset()         { *m = QueryGetPendingAnalysisRequest{} }
func (m *QueryGetPendingAnalysisRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingAnalysisRequest) ProtoMessage()    {}
func (*QueryGetPendingAnalysisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{14}
}
func (m *QueryGetPendingAnalysisRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingAnalysisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingAnalysisRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingAnalysisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingAnalysisRequest.Merge(m, src)
}
func (m *QueryGetPendingAnalysisRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingAnalysisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingAnalysisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingAnalysisRequest proto.InternalMessageInfo

func (m *QueryGetPendingAnalysisRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetPendingAnalysisResponse is response type for the Query/GetPendingAnalysis RPC method.
type QueryGetPendingAnalysisResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetPendingAnalysisResponse) Reset()         { *m = QueryGetPendingAnalysisResponse{} }
func (m *QueryGetPendingAnalysisResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingAnalysisResponse) ProtoMessage()    {}
func (*QueryGetPendingAnalysisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{15}
}
func (m *QueryGetPendingAnalysisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingAnalysisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingAnalysisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingAnalysisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingAnalysisResponse.Merge(m, src)
}
func (m *QueryGetPendingAnalysisResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingAnalysisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingAnalysisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingAnalysisResponse proto.InternalMessageInfo

func (m *QueryGetPendingAnalysisResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetPendingAnalysisResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetApprovedEquivalencesRequest is request type for the Query/GetApprovedEquivalences RPC method.
type QueryGetApprovedEquivalencesRequest struct {
	Pagination            *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	MinEquivalencePercent string             `protobuf:"bytes,2,opt,name=min_equivalence_percent,json=minEquivalencePercent,proto3" json:"min_equivalence_percent,omitempty"`
}

func (m *QueryGetApprovedEquivalencesRequest) Reset()         { *m = QueryGetApprovedEquivalencesRequest{} }
func (m *QueryGetApprovedEquivalencesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedEquivalencesRequest) ProtoMessage()    {}
func (*QueryGetApprovedEquivalencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{16}
}
func (m *QueryGetApprovedEquivalencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedEquivalencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedEquivalencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedEquivalencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedEquivalencesRequest.Merge(m, src)
}
func (m *QueryGetApprovedEquivalencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedEquivalencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedEquivalencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedEquivalencesRequest proto.InternalMessageInfo

func (m *QueryGetApprovedEquivalencesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryGetApprovedEquivalencesRequest) GetMinEquivalencePercent() string {
	if m != nil {
		return m.MinEquivalencePercent
	}
	return ""
}

// QueryGetApprovedEquivalencesResponse is response type for the Query/GetApprovedEquivalences RPC method.
type QueryGetApprovedEquivalencesResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetApprovedEquivalencesResponse) Reset()         { *m = QueryGetApprovedEquivalencesResponse{} }
func (m *QueryGetApprovedEquivalencesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovedEquivalencesResponse) ProtoMessage()    {}
func (*QueryGetApprovedEquivalencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{17}
}
func (m *QueryGetApprovedEquivalencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovedEquivalencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovedEquivalencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovedEquivalencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovedEquivalencesResponse.Merge(m, src)
}
func (m *QueryGetApprovedEquivalencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovedEquivalencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovedEquivalencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovedEquivalencesResponse proto.InternalMessageInfo

func (m *QueryGetApprovedEquivalencesResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetApprovedEquivalencesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetRejectedEquivalencesRequest is request type for the Query/GetRejectedEquivalences RPC method.
type QueryGetRejectedEquivalencesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRejectedEquivalencesRequest) Reset()         { *m = QueryGetRejectedEquivalencesRequest{} }
func (m *QueryGetRejectedEquivalencesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRejectedEquivalencesRequest) ProtoMessage()    {}
func (*QueryGetRejectedEquivalencesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{18}
}
func (m *QueryGetRejectedEquivalencesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRejectedEquivalencesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRejectedEquivalencesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRejectedEquivalencesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRejectedEquivalencesRequest.Merge(m, src)
}
func (m *QueryGetRejectedEquivalencesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRejectedEquivalencesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRejectedEquivalencesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRejectedEquivalencesRequest proto.InternalMessageInfo

func (m *QueryGetRejectedEquivalencesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetRejectedEquivalencesResponse is response type for the Query/GetRejectedEquivalences RPC method.
type QueryGetRejectedEquivalencesResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRejectedEquivalencesResponse) Reset()         { *m = QueryGetRejectedEquivalencesResponse{} }
func (m *QueryGetRejectedEquivalencesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRejectedEquivalencesResponse) ProtoMessage()    {}
func (*QueryGetRejectedEquivalencesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{19}
}
func (m *QueryGetRejectedEquivalencesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRejectedEquivalencesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRejectedEquivalencesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRejectedEquivalencesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRejectedEquivalencesResponse.Merge(m, src)
}
func (m *QueryGetRejectedEquivalencesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRejectedEquivalencesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRejectedEquivalencesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRejectedEquivalencesResponse proto.InternalMessageInfo

func (m *QueryGetRejectedEquivalencesResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetRejectedEquivalencesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalencesByContractRequest is request type for the Query/GetEquivalencesByContract RPC method.
type QueryGetEquivalencesByContractRequest struct {
	ContractAddress string             `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalencesByContractRequest) Reset()         { *m = QueryGetEquivalencesByContractRequest{} }
func (m *QueryGetEquivalencesByContractRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalencesByContractRequest) ProtoMessage()    {}
func (*QueryGetEquivalencesByContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{20}
}
func (m *QueryGetEquivalencesByContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesByContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesByContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesByContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesByContractRequest.Merge(m, src)
}
func (m *QueryGetEquivalencesByContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesByContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesByContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesByContractRequest proto.InternalMessageInfo

func (m *QueryGetEquivalencesByContractRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryGetEquivalencesByContractRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalencesByContractResponse is response type for the Query/GetEquivalencesByContract RPC method.
type QueryGetEquivalencesByContractResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalencesByContractResponse) Reset() {
	*m = QueryGetEquivalencesByContractResponse{}
}
func (m *QueryGetEquivalencesByContractResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalencesByContractResponse) ProtoMessage()    {}
func (*QueryGetEquivalencesByContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{21}
}
func (m *QueryGetEquivalencesByContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesByContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesByContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesByContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesByContractResponse.Merge(m, src)
}
func (m *QueryGetEquivalencesByContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesByContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesByContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesByContractResponse proto.InternalMessageInfo

func (m *QueryGetEquivalencesByContractResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetEquivalencesByContractResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalencesByContractVersionRequest is request type for the Query/GetEquivalencesByContractVersion RPC method.
type QueryGetEquivalencesByContractVersionRequest struct {
	ContractVersion string             `protobuf:"bytes,1,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalencesByContractVersionRequest) Reset() {
	*m = QueryGetEquivalencesByContractVersionRequest{}
}
func (m *QueryGetEquivalencesByContractVersionRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEquivalencesByContractVersionRequest) ProtoMessage() {}
func (*QueryGetEquivalencesByContractVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{22}
}
func (m *QueryGetEquivalencesByContractVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesByContractVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesByContractVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesByContractVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesByContractVersionRequest.Merge(m, src)
}
func (m *QueryGetEquivalencesByContractVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesByContractVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesByContractVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesByContractVersionRequest proto.InternalMessageInfo

func (m *QueryGetEquivalencesByContractVersionRequest) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *QueryGetEquivalencesByContractVersionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalencesByContractVersionResponse is response type for the Query/GetEquivalencesByContractVersion RPC method.
type QueryGetEquivalencesByContractVersionResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalencesByContractVersionResponse) Reset() {
	*m = QueryGetEquivalencesByContractVersionResponse{}
}
func (m *QueryGetEquivalencesByContractVersionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEquivalencesByContractVersionResponse) ProtoMessage() {}
func (*QueryGetEquivalencesByContractVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{23}
}
func (m *QueryGetEquivalencesByContractVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalencesByContractVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalencesByContractVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalencesByContractVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalencesByContractVersionResponse.Merge(m, src)
}
func (m *QueryGetEquivalencesByContractVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalencesByContractVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalencesByContractVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalencesByContractVersionResponse proto.InternalMessageInfo

func (m *QueryGetEquivalencesByContractVersionResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetEquivalencesByContractVersionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalenceHistoryRequest is request type for the Query/GetEquivalenceHistory RPC method.
type QueryGetEquivalenceHistoryRequest struct {
	SubjectId  string             `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalenceHistoryRequest) Reset()         { *m = QueryGetEquivalenceHistoryRequest{} }
func (m *QueryGetEquivalenceHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalenceHistoryRequest) ProtoMessage()    {}
func (*QueryGetEquivalenceHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{24}
}
func (m *QueryGetEquivalenceHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalenceHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalenceHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalenceHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalenceHistoryRequest.Merge(m, src)
}
func (m *QueryGetEquivalenceHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalenceHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalenceHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalenceHistoryRequest proto.InternalMessageInfo

func (m *QueryGetEquivalenceHistoryRequest) GetSubjectId() string {
	if m != nil {
		return m.SubjectId
	}
	return ""
}

func (m *QueryGetEquivalenceHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalenceHistoryResponse is response type for the Query/GetEquivalenceHistory RPC method.
type QueryGetEquivalenceHistoryResponse struct {
	Equivalences []SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences"`
	Pagination   *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetEquivalenceHistoryResponse) Reset()         { *m = QueryGetEquivalenceHistoryResponse{} }
func (m *QueryGetEquivalenceHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalenceHistoryResponse) ProtoMessage()    {}
func (*QueryGetEquivalenceHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{25}
}
func (m *QueryGetEquivalenceHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalenceHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalenceHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalenceHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalenceHistoryResponse.Merge(m, src)
}
func (m *QueryGetEquivalenceHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalenceHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalenceHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalenceHistoryResponse proto.InternalMessageInfo

func (m *QueryGetEquivalenceHistoryResponse) GetEquivalences() []SubjectEquivalence {
	if m != nil {
		return m.Equivalences
	}
	return nil
}

func (m *QueryGetEquivalenceHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetEquivalenceStatsRequest is request type for the Query/GetEquivalenceStats RPC method.
type QueryGetEquivalenceStatsRequest struct {
}

func (m *QueryGetEquivalenceStatsRequest) Reset()         { *m = QueryGetEquivalenceStatsRequest{} }
func (m *QueryGetEquivalenceStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalenceStatsRequest) ProtoMessage()    {}
func (*QueryGetEquivalenceStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{26}
}
func (m *QueryGetEquivalenceStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalenceStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalenceStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalenceStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalenceStatsRequest.Merge(m, src)
}
func (m *QueryGetEquivalenceStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalenceStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalenceStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalenceStatsRequest proto.InternalMessageInfo

// QueryGetEquivalenceStatsResponse is response type for the Query/GetEquivalenceStats RPC method.
type QueryGetEquivalenceStatsResponse struct {
	TotalEquivalences             uint64   `protobuf:"varint,1,opt,name=total_equivalences,json=totalEquivalences,proto3" json:"total_equivalences,omitempty"`
	PendingAnalysis               uint64   `protobuf:"varint,2,opt,name=pending_analysis,json=pendingAnalysis,proto3" json:"pending_analysis,omitempty"`
	ApprovedEquivalences          uint64   `protobuf:"varint,3,opt,name=approved_equivalences,json=approvedEquivalences,proto3" json:"approved_equivalences,omitempty"`
	RejectedEquivalences          uint64   `protobuf:"varint,4,opt,name=rejected_equivalences,json=rejectedEquivalences,proto3" json:"rejected_equivalences,omitempty"`
	ErrorEquivalences             uint64   `protobuf:"varint,5,opt,name=error_equivalences,json=errorEquivalences,proto3" json:"error_equivalences,omitempty"`
	AverageEquivalencePercent     string   `protobuf:"bytes,6,opt,name=average_equivalence_percent,json=averageEquivalencePercent,proto3" json:"average_equivalence_percent,omitempty"`
	TotalInstitutionsInvolved     uint64   `protobuf:"varint,7,opt,name=total_institutions_involved,json=totalInstitutionsInvolved,proto3" json:"total_institutions_involved,omitempty"`
	TotalSubjectsWithEquivalences uint64   `protobuf:"varint,8,opt,name=total_subjects_with_equivalences,json=totalSubjectsWithEquivalences,proto3" json:"total_subjects_with_equivalences,omitempty"`
	TotalContractAnalyses         uint64   `protobuf:"varint,9,opt,name=total_contract_analyses,json=totalContractAnalyses,proto3" json:"total_contract_analyses,omitempty"`
	ActiveContractVersions        []string `protobuf:"bytes,10,rep,name=active_contract_versions,json=activeContractVersions,proto3" json:"active_contract_versions,omitempty"`
}

func (m *QueryGetEquivalenceStatsResponse) Reset()         { *m = QueryGetEquivalenceStatsResponse{} }
func (m *QueryGetEquivalenceStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEquivalenceStatsResponse) ProtoMessage()    {}
func (*QueryGetEquivalenceStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{27}
}
func (m *QueryGetEquivalenceStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEquivalenceStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEquivalenceStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEquivalenceStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEquivalenceStatsResponse.Merge(m, src)
}
func (m *QueryGetEquivalenceStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEquivalenceStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEquivalenceStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEquivalenceStatsResponse proto.InternalMessageInfo

func (m *QueryGetEquivalenceStatsResponse) GetTotalEquivalences() uint64 {
	if m != nil {
		return m.TotalEquivalences
	}
	return 0
}

func (m *QueryGetEquivalenceStatsResponse) GetPendingAnalysis() uint64 {
	if m != nil {
		return m.PendingAnalysis
	}
	return 0
}

func (m *QueryGetEquivalenceStatsResponse) GetApprovedEquivalences() uint64 {
	if m != nil {
		return m.ApprovedEquivalences
	}
	return 0
}

func (m *QueryGetEquivalenceStatsResponse) GetRejectedEquivalences() uint64 {
	if m != nil {
		return m.RejectedEquivalences
	}
	return 0
}

func (m *QueryGetEquivalenceStatsResponse) GetErrorEquivalences() uint64 {
	if m != nil {
		return m.ErrorEquivalences
	}
	return 0
}

func (m *QueryGetEquivalenceStatsResponse) GetAverageEquivalencePercent() string {
	if m != nil {
		return m.AverageEquivalencePercent
	}
	return ""
}

func (m *QueryGetEquivalenceStatsResponse) GetTotalInstitutionsInvolved() uint64 {
	if m != nil {
		return m.TotalInstitutionsInvolved
	}
	return 0
}

func (m *QueryGetEquivalenceStatsResponse) GetTotalSubjectsWithEquivalences() uint64 {
	if m != nil {
		return m.TotalSubjectsWithEquivalences
	}
	return 0
}

func (m *QueryGetEquivalenceStatsResponse) GetTotalContractAnalyses() uint64 {
	if m != nil {
		return m.TotalContractAnalyses
	}
	return 0
}

func (m *QueryGetEquivalenceStatsResponse) GetActiveContractVersions() []string {
	if m != nil {
		return m.ActiveContractVersions
	}
	return nil
}

// QueryGetAnalysisMetadataRequest is request type for the Query/GetAnalysisMetadata RPC method.
type QueryGetAnalysisMetadataRequest struct {
	EquivalenceId string `protobuf:"bytes,1,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
}

func (m *QueryGetAnalysisMetadataRequest) Reset()         { *m = QueryGetAnalysisMetadataRequest{} }
func (m *QueryGetAnalysisMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAnalysisMetadataRequest) ProtoMessage()    {}
func (*QueryGetAnalysisMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{28}
}
func (m *QueryGetAnalysisMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAnalysisMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAnalysisMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAnalysisMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAnalysisMetadataRequest.Merge(m, src)
}
func (m *QueryGetAnalysisMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAnalysisMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAnalysisMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAnalysisMetadataRequest proto.InternalMessageInfo

func (m *QueryGetAnalysisMetadataRequest) GetEquivalenceId() string {
	if m != nil {
		return m.EquivalenceId
	}
	return ""
}

// QueryGetAnalysisMetadataResponse is response type for the Query/GetAnalysisMetadata RPC method.
type QueryGetAnalysisMetadataResponse struct {
	AnalysisMetadata  string `protobuf:"bytes,1,opt,name=analysis_metadata,json=analysisMetadata,proto3" json:"analysis_metadata,omitempty"`
	ContractAddress   string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ContractVersion   string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	AnalysisHash      string `protobuf:"bytes,4,opt,name=analysis_hash,json=analysisHash,proto3" json:"analysis_hash,omitempty"`
	AnalysisTimestamp string `protobuf:"bytes,5,opt,name=analysis_timestamp,json=analysisTimestamp,proto3" json:"analysis_timestamp,omitempty"`
	AnalysisCount     uint64 `protobuf:"varint,6,opt,name=analysis_count,json=analysisCount,proto3" json:"analysis_count,omitempty"`
}

func (m *QueryGetAnalysisMetadataResponse) Reset()         { *m = QueryGetAnalysisMetadataResponse{} }
func (m *QueryGetAnalysisMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAnalysisMetadataResponse) ProtoMessage()    {}
func (*QueryGetAnalysisMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{29}
}
func (m *QueryGetAnalysisMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAnalysisMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAnalysisMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAnalysisMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAnalysisMetadataResponse.Merge(m, src)
}
func (m *QueryGetAnalysisMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAnalysisMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAnalysisMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAnalysisMetadataResponse proto.InternalMessageInfo

func (m *QueryGetAnalysisMetadataResponse) GetAnalysisMetadata() string {
	if m != nil {
		return m.AnalysisMetadata
	}
	return ""
}

func (m *QueryGetAnalysisMetadataResponse) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *QueryGetAnalysisMetadataResponse) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *QueryGetAnalysisMetadataResponse) GetAnalysisHash() string {
	if m != nil {
		return m.AnalysisHash
	}
	return ""
}

func (m *QueryGetAnalysisMetadataResponse) GetAnalysisTimestamp() string {
	if m != nil {
		return m.AnalysisTimestamp
	}
	return ""
}

func (m *QueryGetAnalysisMetadataResponse) GetAnalysisCount() uint64 {
	if m != nil {
		return m.AnalysisCount
	}
	return 0
}

// QueryVerifyAnalysisIntegrityRequest is request type for the Query/VerifyAnalysisIntegrity RPC method.
type QueryVerifyAnalysisIntegrityRequest struct {
	EquivalenceId string `protobuf:"bytes,1,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
}

func (m *QueryVerifyAnalysisIntegrityRequest) Reset()         { *m = QueryVerifyAnalysisIntegrityRequest{} }
func (m *QueryVerifyAnalysisIntegrityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyAnalysisIntegrityRequest) ProtoMessage()    {}
func (*QueryVerifyAnalysisIntegrityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{30}
}
func (m *QueryVerifyAnalysisIntegrityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyAnalysisIntegrityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyAnalysisIntegrityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyAnalysisIntegrityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyAnalysisIntegrityRequest.Merge(m, src)
}
func (m *QueryVerifyAnalysisIntegrityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyAnalysisIntegrityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyAnalysisIntegrityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyAnalysisIntegrityRequest proto.InternalMessageInfo

func (m *QueryVerifyAnalysisIntegrityRequest) GetEquivalenceId() string {
	if m != nil {
		return m.EquivalenceId
	}
	return ""
}

// QueryVerifyAnalysisIntegrityResponse is response type for the Query/VerifyAnalysisIntegrity RPC method.
type QueryVerifyAnalysisIntegrityResponse struct {
	IntegrityValid        bool   `protobuf:"varint,1,opt,name=integrity_valid,json=integrityValid,proto3" json:"integrity_valid,omitempty"`
	StoredHash            string `protobuf:"bytes,2,opt,name=stored_hash,json=storedHash,proto3" json:"stored_hash,omitempty"`
	CalculatedHash        string `protobuf:"bytes,3,opt,name=calculated_hash,json=calculatedHash,proto3" json:"calculated_hash,omitempty"`
	VerificationTimestamp string `protobuf:"bytes,4,opt,name=verification_timestamp,json=verificationTimestamp,proto3" json:"verification_timestamp,omitempty"`
}

func (m *QueryVerifyAnalysisIntegrityResponse) Reset()         { *m = QueryVerifyAnalysisIntegrityResponse{} }
func (m *QueryVerifyAnalysisIntegrityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyAnalysisIntegrityResponse) ProtoMessage()    {}
func (*QueryVerifyAnalysisIntegrityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_608f2ecc1df26f1f, []int{31}
}
func (m *QueryVerifyAnalysisIntegrityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyAnalysisIntegrityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyAnalysisIntegrityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyAnalysisIntegrityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyAnalysisIntegrityResponse.Merge(m, src)
}
func (m *QueryVerifyAnalysisIntegrityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyAnalysisIntegrityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyAnalysisIntegrityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyAnalysisIntegrityResponse proto.InternalMessageInfo

func (m *QueryVerifyAnalysisIntegrityResponse) GetIntegrityValid() bool {
	if m != nil {
		return m.IntegrityValid
	}
	return false
}

func (m *QueryVerifyAnalysisIntegrityResponse) GetStoredHash() string {
	if m != nil {
		return m.StoredHash
	}
	return ""
}

func (m *QueryVerifyAnalysisIntegrityResponse) GetCalculatedHash() string {
	if m != nil {
		return m.CalculatedHash
	}
	return ""
}

func (m *QueryVerifyAnalysisIntegrityResponse) GetVerificationTimestamp() string {
	if m != nil {
		return m.VerificationTimestamp
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "academictoken.equivalence.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "academictoken.equivalence.QueryParamsResponse")
	proto.RegisterType((*QueryListEquivalencesRequest)(nil), "academictoken.equivalence.QueryListEquivalencesRequest")
	proto.RegisterType((*QueryListEquivalencesResponse)(nil), "academictoken.equivalence.QueryListEquivalencesResponse")
	proto.RegisterType((*QueryGetEquivalenceRequest)(nil), "academictoken.equivalence.QueryGetEquivalenceRequest")
	proto.RegisterType((*QueryGetEquivalenceResponse)(nil), "academictoken.equivalence.QueryGetEquivalenceResponse")
	proto.RegisterType((*QueryGetEquivalencesBySourceSubjectRequest)(nil), "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest")
	proto.RegisterType((*QueryGetEquivalencesBySourceSubjectResponse)(nil), "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse")
	proto.RegisterType((*QueryGetEquivalencesByTargetSubjectRequest)(nil), "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest")
	proto.RegisterType((*QueryGetEquivalencesByTargetSubjectResponse)(nil), "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse")
	proto.RegisterType((*QueryGetEquivalencesByInstitutionRequest)(nil), "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest")
	proto.RegisterType((*QueryGetEquivalencesByInstitutionResponse)(nil), "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse")
	proto.RegisterType((*QueryCheckEquivalenceStatusRequest)(nil), "academictoken.equivalence.QueryCheckEquivalenceStatusRequest")
	proto.RegisterType((*QueryCheckEquivalenceStatusResponse)(nil), "academictoken.equivalence.QueryCheckEquivalenceStatusResponse")
	proto.RegisterType((*QueryGetPendingAnalysisRequest)(nil), "academictoken.equivalence.QueryGetPendingAnalysisRequest")
	proto.RegisterType((*QueryGetPendingAnalysisResponse)(nil), "academictoken.equivalence.QueryGetPendingAnalysisResponse")
	proto.RegisterType((*QueryGetApprovedEquivalencesRequest)(nil), "academictoken.equivalence.QueryGetApprovedEquivalencesRequest")
	proto.RegisterType((*QueryGetApprovedEquivalencesResponse)(nil), "academictoken.equivalence.QueryGetApprovedEquivalencesResponse")
	proto.RegisterType((*QueryGetRejectedEquivalencesRequest)(nil), "academictoken.equivalence.QueryGetRejectedEquivalencesRequest")
	proto.RegisterType((*QueryGetRejectedEquivalencesResponse)(nil), "academictoken.equivalence.QueryGetRejectedEquivalencesResponse")
	proto.RegisterType((*QueryGetEquivalencesByContractRequest)(nil), "academictoken.equivalence.QueryGetEquivalencesByContractRequest")
	proto.RegisterType((*QueryGetEquivalencesByContractResponse)(nil), "academictoken.equivalence.QueryGetEquivalencesByContractResponse")
	proto.RegisterType((*QueryGetEquivalencesByContractVersionRequest)(nil), "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest")
	proto.RegisterType((*QueryGetEquivalencesByContractVersionResponse)(nil), "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse")
	proto.RegisterType((*QueryGetEquivalenceHistoryRequest)(nil), "academictoken.equivalence.QueryGetEquivalenceHistoryRequest")
	proto.RegisterType((*QueryGetEquivalenceHistoryResponse)(nil), "academictoken.equivalence.QueryGetEquivalenceHistoryResponse")
	proto.RegisterType((*QueryGetEquivalenceStatsRequest)(nil), "academictoken.equivalence.QueryGetEquivalenceStatsRequest")
	proto.RegisterType((*QueryGetEquivalenceStatsResponse)(nil), "academictoken.equivalence.QueryGetEquivalenceStatsResponse")
	proto.RegisterType((*QueryGetAnalysisMetadataRequest)(nil), "academictoken.equivalence.QueryGetAnalysisMetadataRequest")
	proto.RegisterType((*QueryGetAnalysisMetadataResponse)(nil), "academictoken.equivalence.QueryGetAnalysisMetadataResponse")
	proto.RegisterType((*QueryVerifyAnalysisIntegrityRequest)(nil), "academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest")
	proto.RegisterType((*QueryVerifyAnalysisIntegrityResponse)(nil), "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse")
}

func init() {
	proto.RegisterFile("academictoken/equivalence/query.proto", fileDescriptor_608f2ecc1df26f1f)
}

var fileDescriptor_608f2ecc1df26f1f = []byte{
	// 1870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x4d, 0x6c, 0x1c, 0x49,
	0x15, 0x4e, 0x8d, 0x7f, 0x88, 0x5f, 0x12, 0x27, 0xa9, 0xc4, 0x89, 0x3d, 0x49, 0x26, 0x76, 0x9b,
	0xc4, 0x3f, 0x8b, 0xa7, 0x89, 0xb3, 0xeb, 0x35, 0xde, 0xdd, 0xb0, 0xfe, 0xb7, 0x77, 0xb3, 0xc2,
	0x8c, 0x97, 0xac, 0x04, 0x87, 0x51, 0xb9, 0xa7, 0x76, 0xa6, 0xd9, 0x99, 0xee, 0x49, 0x57, 0xcd,
	0xb0, 0x23, 0xe3, 0x0b, 0xc7, 0xe5, 0x82, 0xe0, 0xc6, 0x69, 0x39, 0x20, 0x71, 0xe4, 0x84, 0xf6,
	0x84, 0x04, 0x08, 0x14, 0x21, 0x56, 0x18, 0x81, 0x10, 0x27, 0x84, 0x12, 0x24, 0xc4, 0x81, 0x33,
	0x07, 0x2e, 0xa8, 0xab, 0xaa, 0x3d, 0xdd, 0x33, 0xdd, 0x3d, 0x3d, 0x63, 0x2f, 0x62, 0x2e, 0xd6,
	0xcc, 0xab, 0xf7, 0x5e, 0xbd, 0xef, 0xab, 0x37, 0xaf, 0x5e, 0x3d, 0x19, 0xee, 0x11, 0x83, 0x14,
	0x68, 0xc5, 0x34, 0xb8, 0xfd, 0x01, 0xb5, 0x74, 0xfa, 0xb4, 0x66, 0xd6, 0x49, 0x99, 0x5a, 0x06,
	0xd5, 0x9f, 0xd6, 0xa8, 0xd3, 0xc8, 0x56, 0x1d, 0x9b, 0xdb, 0x78, 0x22, 0xa0, 0x96, 0xf5, 0xa9,
	0xa5, 0xaf, 0x92, 0x8a, 0x69, 0xd9, 0xba, 0xf8, 0x2b, 0xb5, 0xd3, 0xd7, 0x8b, 0x76, 0xd1, 0x16,
	0x1f, 0x75, 0xf7, 0x93, 0x92, 0xde, 0x2e, 0xda, 0x76, 0xb1, 0x4c, 0x75, 0x52, 0x35, 0x75, 0x62,
	0x59, 0x36, 0x27, 0xdc, 0xb4, 0x2d, 0xa6, 0x56, 0xe7, 0x0d, 0x9b, 0x55, 0x6c, 0xa6, 0x1f, 0x10,
	0xa6, 0xb6, 0xd6, 0xeb, 0x0f, 0x0e, 0x28, 0x27, 0x0f, 0xf4, 0x2a, 0x29, 0x9a, 0x96, 0x50, 0x56,
	0xba, 0xf7, 0xa3, 0x83, 0xae, 0x12, 0x87, 0x54, 0x3c, 0x9f, 0x0f, 0xa3, 0xf5, 0x58, 0xed, 0xe0,
	0x9b, 0xd4, 0xe0, 0x79, 0x9f, 0x4c, 0x1a, 0x69, 0xd7, 0x01, 0x7f, 0xd5, 0xdd, 0x7e, 0x4f, 0x78,
	0xca, 0xd1, 0xa7, 0x35, 0xca, 0xb8, 0xf6, 0x0d, 0xb8, 0x16, 0x90, 0xb2, 0xaa, 0x6d, 0x31, 0x8a,
	0x37, 0x60, 0x58, 0xee, 0x38, 0x8e, 0x26, 0xd1, 0xec, 0x85, 0xc5, 0xa9, 0x6c, 0x24, 0x51, 0x59,
	0x69, 0xba, 0x36, 0xf2, 0xec, 0xaf, 0x77, 0xcf, 0xfd, 0xe4, 0x1f, 0x3f, 0x9d, 0x47, 0x39, 0x65,
	0xab, 0x7d, 0x17, 0xc1, 0x6d, 0xe1, 0xfd, 0xb1, 0xc9, 0xf8, 0x66, 0xd3, 0xc4, 0xdb, 0x1d, 0x6f,
	0x01, 0x34, 0x49, 0x50, 0x5b, 0xdd, 0xcf, 0x4a, 0xc6, 0xb2, 0x2e, 0x63, 0x59, 0x79, 0x58, 0x8a,
	0xb1, 0xec, 0x1e, 0x29, 0x52, 0x65, 0x9b, 0xf3, 0x59, 0xe2, 0x69, 0xb8, 0xc4, 0x38, 0xe1, 0x35,
	0x96, 0x7f, 0xdf, 0x2c, 0x73, 0xea, 0x8c, 0xa7, 0x26, 0xd1, 0xec, 0x48, 0xee, 0xa2, 0x14, 0x6e,
	0x09, 0x99, 0xf6, 0x0b, 0x04, 0x77, 0x22, 0xa2, 0x51, 0xa8, 0xdf, 0x83, 0x8b, 0x3e, 0x60, 0x2e,
	0xf6, 0x81, 0xd9, 0x0b, 0x8b, 0x0b, 0x31, 0xd8, 0xf7, 0x25, 0xdd, 0x3e, 0x6f, 0x6b, 0x83, 0x2e,
	0x0f, 0xb9, 0x80, 0x23, 0xbc, 0x1d, 0xc0, 0x99, 0x12, 0x38, 0x67, 0x3a, 0xe2, 0x94, 0x51, 0xf9,
	0x81, 0x6a, 0x8b, 0x90, 0x16, 0x10, 0xb6, 0xa9, 0x7f, 0x4f, 0x8f, 0xce, 0xeb, 0x30, 0x64, 0x5a,
	0x05, 0xfa, 0xa1, 0x60, 0x72, 0x24, 0x27, 0xbf, 0x68, 0x1c, 0x6e, 0x85, 0xda, 0x28, 0xd0, 0x5f,
	0x83, 0x0b, 0xbe, 0x58, 0xd5, 0x21, 0xf4, 0x84, 0xd9, 0xef, 0x47, 0xfb, 0x35, 0x82, 0xf9, 0x90,
	0x6d, 0xd9, 0x5a, 0x63, 0xdf, 0xae, 0x39, 0x06, 0x55, 0x5e, 0xbc, 0xd0, 0xe7, 0xe1, 0x2a, 0x13,
	0xf2, 0xbc, 0x97, 0xc1, 0x66, 0x41, 0xc1, 0xb8, 0xcc, 0xfc, 0x06, 0xbb, 0x85, 0x96, 0xac, 0x49,
	0x9d, 0x5d, 0xd6, 0x0c, 0x84, 0x64, 0xcd, 0xef, 0x11, 0xbc, 0x94, 0x08, 0x47, 0xdf, 0xe4, 0x50,
	0xf4, 0xc9, 0xbc, 0x4b, 0x9c, 0x22, 0xe5, 0xed, 0x27, 0xc3, 0x85, 0x3c, 0xe4, 0x64, 0xb8, 0xdf,
	0xe0, 0xff, 0xe7, 0x64, 0x5a, 0x70, 0xf4, 0xcd, 0xc9, 0xfc, 0x1c, 0xc1, 0x6c, 0x38, 0xa2, 0x5d,
	0x8b, 0x71, 0x93, 0xd7, 0x5c, 0x2d, 0xef, 0x5c, 0xee, 0xc1, 0xa8, 0xd9, 0x94, 0x36, 0x0f, 0xe5,
	0x92, 0x4f, 0xfa, 0xbf, 0x3e, 0x92, 0x4f, 0x11, 0xcc, 0x25, 0x00, 0xd0, 0x37, 0x07, 0xf2, 0x6d,
	0xd0, 0x04, 0x9c, 0xf5, 0x12, 0x35, 0x3e, 0xf0, 0xed, 0xba, 0x2f, 0x40, 0xf7, 0x52, 0xbb, 0x42,
	0x7f, 0x4d, 0xa9, 0xd0, 0x5f, 0x93, 0xf6, 0xcb, 0x14, 0x4c, 0xc7, 0x6e, 0xaf, 0x78, 0x9c, 0x81,
	0xcb, 0x25, 0xc2, 0xf2, 0xad, 0x55, 0xfc, 0x7c, 0x6e, 0xb4, 0x44, 0x98, 0xcf, 0x0c, 0xdf, 0x80,
	0x61, 0x79, 0x5c, 0x6a, 0x47, 0xf5, 0x0d, 0xeb, 0x70, 0xcd, 0x67, 0x9c, 0xaf, 0x52, 0xc7, 0xa0,
	0x16, 0x57, 0x27, 0x8c, 0x7d, 0x4b, 0x7b, 0x72, 0x05, 0x7f, 0x25, 0x78, 0x67, 0x0c, 0xf6, 0x70,
	0x67, 0x04, 0x6e, 0x0b, 0x3c, 0x07, 0x57, 0x0c, 0xdb, 0xe2, 0x0e, 0x31, 0x78, 0xbe, 0x4e, 0x1d,
	0xe6, 0x9e, 0xdb, 0x90, 0x64, 0xc5, 0x93, 0x3f, 0x91, 0x62, 0xbc, 0x00, 0x98, 0x58, 0xa4, 0xdc,
	0x60, 0x26, 0xcb, 0x73, 0xb3, 0x42, 0x19, 0x27, 0x95, 0xea, 0xf8, 0xb0, 0x50, 0xbe, 0xea, 0xad,
	0xbc, 0xeb, 0x2d, 0x68, 0x25, 0xc8, 0x78, 0x19, 0xb9, 0x47, 0xad, 0x82, 0x69, 0x15, 0x57, 0x95,
	0xce, 0x19, 0x37, 0x21, 0xda, 0xaf, 0x10, 0xdc, 0x8d, 0xdc, 0xaa, 0x6f, 0x52, 0xfe, 0xc7, 0x48,
	0x25, 0xdd, 0x36, 0xe5, 0xab, 0xd5, 0xaa, 0x63, 0xd7, 0x69, 0xe1, 0xb3, 0x6c, 0xdd, 0x96, 0xe0,
	0x66, 0xc5, 0xb4, 0xf2, 0x61, 0xf9, 0x27, 0x93, 0x74, 0xac, 0x62, 0x5a, 0x9b, 0x6d, 0x29, 0xa8,
	0x3d, 0x43, 0xf0, 0xf9, 0xf8, 0x38, 0xfb, 0x86, 0xf2, 0x4a, 0x93, 0xf1, 0x1c, 0x75, 0x77, 0xfe,
	0x4c, 0x19, 0x0f, 0x30, 0x17, 0xbe, 0x5f, 0xdf, 0x30, 0xf7, 0x43, 0x04, 0xf7, 0xc2, 0xef, 0x9b,
	0x75, 0x55, 0x35, 0x3c, 0xf2, 0xfc, 0x05, 0x86, 0x14, 0x0a, 0x0e, 0x65, 0xcc, 0x2b, 0xd1, 0x9e,
	0x7c, 0x55, 0x8a, 0xcf, 0xea, 0xc6, 0xd4, 0x7e, 0x8b, 0xe0, 0x7e, 0xa7, 0xe0, 0xfa, 0x86, 0xe9,
	0x1f, 0x21, 0xf8, 0x42, 0x3c, 0x18, 0x55, 0x9f, 0xc3, 0x08, 0xf7, 0x2a, 0x3a, 0x0a, 0xaf, 0xe8,
	0x67, 0x45, 0xf8, 0x1f, 0x10, 0x2c, 0x24, 0x8c, 0xb1, 0x6f, 0x78, 0xff, 0x08, 0xc1, 0x54, 0x08,
	0xa6, 0x1d, 0x93, 0x71, 0xdb, 0x69, 0x78, 0x64, 0xdf, 0x01, 0x68, 0x6b, 0x3d, 0x46, 0xd8, 0x59,
	0xb7, 0xe5, 0xda, 0x6f, 0x90, 0xea, 0x87, 0x22, 0x82, 0xe9, 0x1b, 0x56, 0xa7, 0x9a, 0x37, 0x75,
	0x4b, 0x5b, 0x75, 0x32, 0x18, 0x39, 0x1e, 0x84, 0xc9, 0x68, 0x1d, 0x85, 0x74, 0x01, 0x30, 0xb7,
	0x39, 0x29, 0xe7, 0x5b, 0xf0, 0xa2, 0xd9, 0xc1, 0xdc, 0x55, 0xb1, 0xe2, 0xcf, 0x43, 0xf7, 0x37,
	0x51, 0x95, 0x8d, 0x41, 0xde, 0x6b, 0x54, 0x04, 0x8a, 0xc1, 0xdc, 0xe5, 0x6a, 0xb0, 0x61, 0xc0,
	0x0f, 0x61, 0x8c, 0xa8, 0x5b, 0x2d, 0xe8, 0x7c, 0x40, 0xe8, 0x5f, 0x27, 0x21, 0x57, 0x9e, 0x6b,
	0xe4, 0xa8, 0x82, 0x1e, 0x34, 0x1a, 0x94, 0x46, 0x4e, 0x48, 0xb5, 0x77, 0x31, 0x50, 0xc7, 0xb1,
	0x9d, 0xa0, 0xc5, 0x90, 0xc4, 0x20, 0x56, 0x02, 0xea, 0x8f, 0xe0, 0x16, 0xa9, 0x53, 0x87, 0x14,
	0x69, 0xe8, 0x9d, 0x2d, 0xfb, 0xb0, 0x09, 0xa5, 0xd2, 0x7e, 0x6f, 0xbb, 0xf6, 0x92, 0x32, 0xdf,
	0x33, 0x85, 0xe5, 0x4d, 0xab, 0x6e, 0x97, 0xeb, 0xb4, 0x30, 0xfe, 0x39, 0xb1, 0xef, 0x84, 0x50,
	0xf1, 0xbd, 0x19, 0xd8, 0xae, 0x52, 0xc0, 0xdb, 0x30, 0x29, 0xed, 0x55, 0x7a, 0xb3, 0xfc, 0xb7,
	0x4c, 0x5e, 0x0a, 0x06, 0x7f, 0x5e, 0x38, 0xb9, 0x23, 0xf4, 0x54, 0x6a, 0xb1, 0xf7, 0x4c, 0x5e,
	0x0a, 0x00, 0x59, 0x82, 0x9b, 0xd2, 0x51, 0xf3, 0x5e, 0x10, 0xe4, 0x53, 0x36, 0x3e, 0x22, 0xec,
	0xc7, 0xc4, 0xb2, 0x57, 0x3a, 0x56, 0xd5, 0x22, 0x5e, 0x86, 0x71, 0x62, 0x70, 0xb3, 0x4e, 0xf3,
	0xad, 0xf5, 0x8d, 0x8d, 0xc3, 0xe4, 0xc0, 0xec, 0x48, 0xee, 0x86, 0x5c, 0x6f, 0x29, 0x3a, 0x4c,
	0xdb, 0x69, 0x66, 0x9d, 0x77, 0xce, 0xef, 0x50, 0x4e, 0x0a, 0x84, 0x13, 0xdf, 0xa3, 0xce, 0xcf,
	0x6a, 0xf3, 0x51, 0xe7, 0x93, 0xee, 0x16, 0xb4, 0x8f, 0x53, 0xcd, 0xe4, 0x6c, 0x77, 0xa5, 0x92,
	0xf3, 0x25, 0x38, 0x69, 0x87, 0xf3, 0x15, 0xb5, 0xa8, 0xdc, 0x5d, 0x21, 0x2d, 0x46, 0xa1, 0xf7,
	0x63, 0x2a, 0xfc, 0x7e, 0x0c, 0xab, 0xec, 0x03, 0xe1, 0x95, 0x7d, 0x1a, 0x2e, 0x9d, 0x84, 0x50,
	0x22, 0xac, 0x24, 0x12, 0x71, 0x24, 0x77, 0xd1, 0x13, 0xee, 0x10, 0x56, 0x8a, 0x68, 0xe8, 0x87,
	0x22, 0x1a, 0x7a, 0x97, 0xa2, 0x13, 0x75, 0xc3, 0xae, 0xa9, 0x9c, 0x1b, 0xcc, 0x9d, 0xec, 0xb4,
	0xee, 0x0a, 0xb5, 0xc7, 0xaa, 0xa9, 0x7a, 0x42, 0x1d, 0xf3, 0xfd, 0x86, 0x47, 0xd2, 0xae, 0xc5,
	0x69, 0xd1, 0x31, 0x79, 0xa3, 0x4b, 0xc2, 0x8f, 0xbd, 0x9e, 0x29, 0xd2, 0x5d, 0xf3, 0x2d, 0x66,
	0x7a, 0xc2, 0x7c, 0x9d, 0x94, 0x95, 0xc3, 0xf3, 0xb9, 0xd1, 0x13, 0xf1, 0x13, 0x57, 0x8a, 0xef,
	0xc2, 0x05, 0xb7, 0x6a, 0xd2, 0x82, 0x24, 0x46, 0x72, 0x0d, 0x52, 0x24, 0x68, 0x99, 0x81, 0xcb,
	0x06, 0x29, 0x1b, 0xb5, 0x32, 0xe1, 0x9e, 0x92, 0x64, 0x79, 0xb4, 0x29, 0x16, 0x8a, 0xaf, 0xc0,
	0x8d, 0xba, 0x1b, 0x95, 0x69, 0x88, 0xe2, 0xe6, 0xe3, 0x50, 0xb2, 0x3d, 0xe6, 0x5f, 0x3d, 0xe1,
	0x71, 0xf1, 0xe3, 0x5b, 0x30, 0x24, 0x20, 0xe1, 0xef, 0x23, 0x18, 0x96, 0x43, 0x5c, 0x1c, 0x57,
	0xa4, 0xdb, 0xa7, 0xc7, 0xe9, 0x6c, 0x52, 0x75, 0xc9, 0x8e, 0x36, 0xf7, 0x9d, 0x3f, 0xfe, 0xfd,
	0x07, 0xa9, 0x69, 0x3c, 0xa5, 0x77, 0x9a, 0x74, 0xe3, 0x9f, 0x21, 0xb8, 0xd2, 0x3a, 0xa8, 0xc5,
	0xaf, 0x76, 0xda, 0x2f, 0x62, 0xd0, 0x9c, 0x5e, 0xee, 0xde, 0x50, 0x85, 0xac, 0x8b, 0x90, 0xe7,
	0xf0, 0x4c, 0x4c, 0xc8, 0x81, 0x4b, 0xea, 0x13, 0x04, 0xa3, 0xc1, 0x3b, 0x03, 0xbf, 0xd2, 0x69,
	0xf7, 0xd0, 0x71, 0x6e, 0x7a, 0xa9, 0x5b, 0x33, 0x15, 0xf2, 0xab, 0x22, 0xe4, 0x07, 0x58, 0x4f,
	0x18, 0xb2, 0x7e, 0x28, 0x06, 0xc5, 0x47, 0xf8, 0x3f, 0x08, 0x32, 0xf1, 0x63, 0x4e, 0xbc, 0xd9,
	0x5d, 0x4c, 0x11, 0xe3, 0xde, 0xf4, 0xd6, 0x69, 0xdd, 0x28, 0xa8, 0x6f, 0x09, 0xa8, 0x1b, 0x78,
	0x2d, 0x29, 0x54, 0x39, 0x8f, 0xd1, 0x0f, 0xdb, 0x06, 0x36, 0x11, 0xe8, 0x03, 0xa3, 0xc4, 0x1e,
	0xd0, 0x87, 0x8d, 0x54, 0x7b, 0x40, 0x1f, 0x3a, 0xd1, 0xec, 0x1e, 0xbd, 0x9c, 0x30, 0xe9, 0x87,
	0x6d, 0x23, 0xa8, 0x23, 0xfc, 0x6f, 0x04, 0xb7, 0xe3, 0xa6, 0x76, 0x78, 0xbd, 0xeb, 0xa0, 0xdb,
	0x87, 0x96, 0xe9, 0x8d, 0xd3, 0x39, 0x51, 0xb8, 0x1f, 0x0b, 0xdc, 0x5b, 0x78, 0x23, 0x29, 0x6e,
	0x5f, 0xaf, 0xe1, 0x26, 0xbb, 0x7f, 0x6a, 0x7a, 0x84, 0xff, 0x89, 0xe0, 0x46, 0xf8, 0x84, 0x0d,
	0xbf, 0xd1, 0x29, 0xdc, 0xd8, 0xc1, 0x60, 0xfa, 0x51, 0xaf, 0xe6, 0x0a, 0xe7, 0x9e, 0xc0, 0xf9,
	0x16, 0xde, 0x89, 0xc1, 0x69, 0xb8, 0x2e, 0xc2, 0xf2, 0x39, 0xf4, 0x94, 0x3f, 0x45, 0x80, 0xdb,
	0xc7, 0x53, 0xf8, 0x4b, 0x09, 0x8e, 0x25, 0x7c, 0x7a, 0x96, 0x5e, 0xe9, 0xc5, 0x54, 0xe1, 0x7b,
	0x53, 0xe0, 0x5b, 0xc1, 0xcb, 0x49, 0xcf, 0x51, 0x75, 0xc9, 0x0b, 0xde, 0x55, 0x8f, 0xff, 0x84,
	0xe0, 0x66, 0xc4, 0x00, 0x08, 0x3f, 0x4a, 0x10, 0x59, 0xcc, 0x84, 0x2b, 0xfd, 0xe5, 0x9e, 0xed,
	0x15, 0xbc, 0x65, 0x01, 0x6f, 0x11, 0x7f, 0x31, 0x29, 0x3c, 0xaf, 0xa9, 0xf7, 0x60, 0x85, 0x4d,
	0x67, 0x12, 0xc1, 0x8a, 0x19, 0x23, 0x25, 0x82, 0x15, 0x37, 0x16, 0xea, 0x1e, 0x96, 0xf7, 0xec,
	0xc0, 0xff, 0x42, 0x30, 0x11, 0xf9, 0x36, 0xc7, 0x6f, 0x76, 0x5d, 0x1b, 0x5a, 0x86, 0x3c, 0xe9,
	0xd5, 0x53, 0x78, 0x50, 0xe0, 0xde, 0x16, 0xe0, 0x36, 0xf1, 0x7a, 0x52, 0x70, 0x5e, 0xcb, 0xab,
	0x1f, 0xb6, 0xf6, 0xcf, 0x47, 0xf8, 0xa3, 0x14, 0x4c, 0x76, 0x9a, 0x45, 0xe0, 0xed, 0x9e, 0x83,
	0x0e, 0x4e, 0x5c, 0xd2, 0x3b, 0xa7, 0x77, 0xa4, 0x48, 0xd8, 0x17, 0x24, 0xbc, 0x83, 0xdf, 0xee,
	0x96, 0x84, 0x05, 0xf5, 0x1e, 0xf0, 0x91, 0xa1, 0x24, 0xa2, 0xf4, 0x8c, 0x85, 0xce, 0x0d, 0xf0,
	0xeb, 0xdd, 0x05, 0x1e, 0x9c, 0x7d, 0xa4, 0xdf, 0xe8, 0xd1, 0xba, 0x8b, 0x66, 0xa9, 0x24, 0x6d,
	0xf4, 0x43, 0x7f, 0x29, 0xfd, 0x04, 0xc1, 0xb5, 0x90, 0xd9, 0x00, 0x5e, 0xe9, 0x2e, 0x1e, 0xff,
	0xd0, 0x21, 0xfd, 0x5a, 0x4f, 0xb6, 0x0a, 0xc9, 0xac, 0x40, 0xa2, 0xe1, 0xc9, 0x18, 0x24, 0x4c,
	0x84, 0xf8, 0x3b, 0x19, 0x7a, 0xeb, 0xcb, 0x31, 0x51, 0xe8, 0x11, 0x2f, 0xd7, 0x44, 0xa1, 0x47,
	0x3d, 0x55, 0xb5, 0xd7, 0x45, 0xe8, 0x4b, 0xf8, 0xe5, 0x98, 0xd0, 0xbd, 0x9a, 0xaf, 0x1f, 0x06,
	0x1f, 0x6c, 0x47, 0xf8, 0xcf, 0x08, 0x6e, 0x46, 0xbc, 0xcb, 0x3a, 0x57, 0xcb, 0xf8, 0xf7, 0x61,
	0xe7, 0x6a, 0xd9, 0xe1, 0x41, 0xa8, 0xad, 0x08, 0x68, 0x2f, 0xe3, 0xc5, 0x18, 0x68, 0xe2, 0x81,
	0xd6, 0x68, 0x03, 0xb6, 0xf6, 0xda, 0xb3, 0xe7, 0x19, 0x74, 0xfc, 0x3c, 0x83, 0xfe, 0xf6, 0x3c,
	0x83, 0xbe, 0xf7, 0x22, 0x73, 0xee, 0xf8, 0x45, 0xe6, 0xdc, 0x5f, 0x5e, 0x64, 0xce, 0x7d, 0x7d,
	0x2a, 0xe8, 0xec, 0xc3, 0x80, 0x3b, 0xde, 0xa8, 0x52, 0x76, 0x30, 0x2c, 0xfe, 0xed, 0xe7, 0xe1,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x32, 0x13, 0xd9, 0x0a, 0x25, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ListEquivalences queries all subject equivalences with pagination
	ListEquivalences(ctx context.Context, in *QueryListEquivalencesRequest, opts ...grpc.CallOption) (*QueryListEquivalencesResponse, error)
	// GetEquivalence queries a specific subject equivalence by index
	GetEquivalence(ctx context.Context, in *QueryGetEquivalenceRequest, opts ...grpc.CallOption) (*QueryGetEquivalenceResponse, error)
	// GetEquivalencesBySourceSubject queries equivalences by source subject ID
	GetEquivalencesBySourceSubject(ctx context.Context, in *QueryGetEquivalencesBySourceSubjectRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesBySourceSubjectResponse, error)
	// GetEquivalencesByTargetSubject queries equivalences by target subject ID
	GetEquivalencesByTargetSubject(ctx context.Context, in *QueryGetEquivalencesByTargetSubjectRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesByTargetSubjectResponse, error)
	// GetEquivalencesByInstitution queries equivalences by target institution
	GetEquivalencesByInstitution(ctx context.Context, in *QueryGetEquivalencesByInstitutionRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesByInstitutionResponse, error)
	// CheckEquivalenceStatus checks if two subjects have an established equivalence
	CheckEquivalenceStatus(ctx context.Context, in *QueryCheckEquivalenceStatusRequest, opts ...grpc.CallOption) (*QueryCheckEquivalenceStatusResponse, error)
	// GetPendingAnalysis queries equivalences awaiting contract analysis
	GetPendingAnalysis(ctx context.Context, in *QueryGetPendingAnalysisRequest, opts ...grpc.CallOption) (*QueryGetPendingAnalysisResponse, error)
	// GetApprovedEquivalences queries equivalences with approved status (by contract)
	GetApprovedEquivalences(ctx context.Context, in *QueryGetApprovedEquivalencesRequest, opts ...grpc.CallOption) (*QueryGetApprovedEquivalencesResponse, error)
	// GetRejectedEquivalences queries equivalences rejected by contract analysis
	GetRejectedEquivalences(ctx context.Context, in *QueryGetRejectedEquivalencesRequest, opts ...grpc.CallOption) (*QueryGetRejectedEquivalencesResponse, error)
	// GetEquivalencesByContract queries equivalences analyzed by a specific contract
	GetEquivalencesByContract(ctx context.Context, in *QueryGetEquivalencesByContractRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesByContractResponse, error)
	// GetEquivalencesByContractVersion queries equivalences by contract version
	GetEquivalencesByContractVersion(ctx context.Context, in *QueryGetEquivalencesByContractVersionRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesByContractVersionResponse, error)
	// GetEquivalenceHistory queries the analysis history of equivalence requests for a subject
	GetEquivalenceHistory(ctx context.Context, in *QueryGetEquivalenceHistoryRequest, opts ...grpc.CallOption) (*QueryGetEquivalenceHistoryResponse, error)
	// GetEquivalenceStats queries statistics about automated equivalence analysis
	GetEquivalenceStats(ctx context.Context, in *QueryGetEquivalenceStatsRequest, opts ...grpc.CallOption) (*QueryGetEquivalenceStatsResponse, error)
	// GetAnalysisMetadata queries detailed analysis metadata for an equivalence
	GetAnalysisMetadata(ctx context.Context, in *QueryGetAnalysisMetadataRequest, opts ...grpc.CallOption) (*QueryGetAnalysisMetadataResponse, error)
	// VerifyAnalysisIntegrity verifies the integrity of an equivalence analysis
	VerifyAnalysisIntegrity(ctx context.Context, in *QueryVerifyAnalysisIntegrityRequest, opts ...grpc.CallOption) (*QueryVerifyAnalysisIntegrityResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListEquivalences(ctx context.Context, in *QueryListEquivalencesRequest, opts ...grpc.CallOption) (*QueryListEquivalencesResponse, error) {
	out := new(QueryListEquivalencesResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/ListEquivalences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEquivalence(ctx context.Context, in *QueryGetEquivalenceRequest, opts ...grpc.CallOption) (*QueryGetEquivalenceResponse, error) {
	out := new(QueryGetEquivalenceResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetEquivalence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEquivalencesBySourceSubject(ctx context.Context, in *QueryGetEquivalencesBySourceSubjectRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesBySourceSubjectResponse, error) {
	out := new(QueryGetEquivalencesBySourceSubjectResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetEquivalencesBySourceSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEquivalencesByTargetSubject(ctx context.Context, in *QueryGetEquivalencesByTargetSubjectRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesByTargetSubjectResponse, error) {
	out := new(QueryGetEquivalencesByTargetSubjectResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetEquivalencesByTargetSubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEquivalencesByInstitution(ctx context.Context, in *QueryGetEquivalencesByInstitutionRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesByInstitutionResponse, error) {
	out := new(QueryGetEquivalencesByInstitutionResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetEquivalencesByInstitution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckEquivalenceStatus(ctx context.Context, in *QueryCheckEquivalenceStatusRequest, opts ...grpc.CallOption) (*QueryCheckEquivalenceStatusResponse, error) {
	out := new(QueryCheckEquivalenceStatusResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/CheckEquivalenceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingAnalysis(ctx context.Context, in *QueryGetPendingAnalysisRequest, opts ...grpc.CallOption) (*QueryGetPendingAnalysisResponse, error) {
	out := new(QueryGetPendingAnalysisResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetPendingAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetApprovedEquivalences(ctx context.Context, in *QueryGetApprovedEquivalencesRequest, opts ...grpc.CallOption) (*QueryGetApprovedEquivalencesResponse, error) {
	out := new(QueryGetApprovedEquivalencesResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetApprovedEquivalences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRejectedEquivalences(ctx context.Context, in *QueryGetRejectedEquivalencesRequest, opts ...grpc.CallOption) (*QueryGetRejectedEquivalencesResponse, error) {
	out := new(QueryGetRejectedEquivalencesResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetRejectedEquivalences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEquivalencesByContract(ctx context.Context, in *QueryGetEquivalencesByContractRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesByContractResponse, error) {
	out := new(QueryGetEquivalencesByContractResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetEquivalencesByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEquivalencesByContractVersion(ctx context.Context, in *QueryGetEquivalencesByContractVersionRequest, opts ...grpc.CallOption) (*QueryGetEquivalencesByContractVersionResponse, error) {
	out := new(QueryGetEquivalencesByContractVersionResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetEquivalencesByContractVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEquivalenceHistory(ctx context.Context, in *QueryGetEquivalenceHistoryRequest, opts ...grpc.CallOption) (*QueryGetEquivalenceHistoryResponse, error) {
	out := new(QueryGetEquivalenceHistoryResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetEquivalenceHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEquivalenceStats(ctx context.Context, in *QueryGetEquivalenceStatsRequest, opts ...grpc.CallOption) (*QueryGetEquivalenceStatsResponse, error) {
	out := new(QueryGetEquivalenceStatsResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetEquivalenceStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAnalysisMetadata(ctx context.Context, in *QueryGetAnalysisMetadataRequest, opts ...grpc.CallOption) (*QueryGetAnalysisMetadataResponse, error) {
	out := new(QueryGetAnalysisMetadataResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/GetAnalysisMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyAnalysisIntegrity(ctx context.Context, in *QueryVerifyAnalysisIntegrityRequest, opts ...grpc.CallOption) (*QueryVerifyAnalysisIntegrityResponse, error) {
	out := new(QueryVerifyAnalysisIntegrityResponse)
	err := c.cc.Invoke(ctx, "/academictoken.equivalence.Query/VerifyAnalysisIntegrity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ListEquivalences queries all subject equivalences with pagination
	ListEquivalences(context.Context, *QueryListEquivalencesRequest) (*QueryListEquivalencesResponse, error)
	// GetEquivalence queries a specific subject equivalence by index
	GetEquivalence(context.Context, *QueryGetEquivalenceRequest) (*QueryGetEquivalenceResponse, error)
	// GetEquivalencesBySourceSubject queries equivalences by source subject ID
	GetEquivalencesBySourceSubject(context.Context, *QueryGetEquivalencesBySourceSubjectRequest) (*QueryGetEquivalencesBySourceSubjectResponse, error)
	// GetEquivalencesByTargetSubject queries equivalences by target subject ID
	GetEquivalencesByTargetSubject(context.Context, *QueryGetEquivalencesByTargetSubjectRequest) (*QueryGetEquivalencesByTargetSubjectResponse, error)
	// GetEquivalencesByInstitution queries equivalences by target institution
	GetEquivalencesByInstitution(context.Context, *QueryGetEquivalencesByInstitutionRequest) (*QueryGetEquivalencesByInstitutionResponse, error)
	// CheckEquivalenceStatus checks if two subjects have an established equivalence
	CheckEquivalenceStatus(context.Context, *QueryCheckEquivalenceStatusRequest) (*QueryCheckEquivalenceStatusResponse, error)
	// GetPendingAnalysis queries equivalences awaiting contract analysis
	GetPendingAnalysis(context.Context, *QueryGetPendingAnalysisRequest) (*QueryGetPendingAnalysisResponse, error)
	// GetApprovedEquivalences queries equivalences with approved status (by contract)
	GetApprovedEquivalences(context.Context, *QueryGetApprovedEquivalencesRequest) (*QueryGetApprovedEquivalencesResponse, error)
	// GetRejectedEquivalences queries equivalences rejected by contract analysis
	GetRejectedEquivalences(context.Context, *QueryGetRejectedEquivalencesRequest) (*QueryGetRejectedEquivalencesResponse, error)
	// GetEquivalencesByContract queries equivalences analyzed by a specific contract
	GetEquivalencesByContract(context.Context, *QueryGetEquivalencesByContractRequest) (*QueryGetEquivalencesByContractResponse, error)
	// GetEquivalencesByContractVersion queries equivalences by contract version
	GetEquivalencesByContractVersion(context.Context, *QueryGetEquivalencesByContractVersionRequest) (*QueryGetEquivalencesByContractVersionResponse, error)
	// GetEquivalenceHistory queries the analysis history of equivalence requests for a subject
	GetEquivalenceHistory(context.Context, *QueryGetEquivalenceHistoryRequest) (*QueryGetEquivalenceHistoryResponse, error)
	// GetEquivalenceStats queries statistics about automated equivalence analysis
	GetEquivalenceStats(context.Context, *QueryGetEquivalenceStatsRequest) (*QueryGetEquivalenceStatsResponse, error)
	// GetAnalysisMetadata queries detailed analysis metadata for an equivalence
	GetAnalysisMetadata(context.Context, *QueryGetAnalysisMetadataRequest) (*QueryGetAnalysisMetadataResponse, error)
	// VerifyAnalysisIntegrity verifies the integrity of an equivalence analysis
	VerifyAnalysisIntegrity(context.Context, *QueryVerifyAnalysisIntegrityRequest) (*QueryVerifyAnalysisIntegrityResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ListEquivalences(ctx context.Context, req *QueryListEquivalencesRequest) (*QueryListEquivalencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEquivalences not implemented")
}
func (*UnimplementedQueryServer) GetEquivalence(ctx context.Context, req *QueryGetEquivalenceRequest) (*QueryGetEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquivalence not implemented")
}
func (*UnimplementedQueryServer) GetEquivalencesBySourceSubject(ctx context.Context, req *QueryGetEquivalencesBySourceSubjectRequest) (*QueryGetEquivalencesBySourceSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquivalencesBySourceSubject not implemented")
}
func (*UnimplementedQueryServer) GetEquivalencesByTargetSubject(ctx context.Context, req *QueryGetEquivalencesByTargetSubjectRequest) (*QueryGetEquivalencesByTargetSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquivalencesByTargetSubject not implemented")
}
func (*UnimplementedQueryServer) GetEquivalencesByInstitution(ctx context.Context, req *QueryGetEquivalencesByInstitutionRequest) (*QueryGetEquivalencesByInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquivalencesByInstitution not implemented")
}
func (*UnimplementedQueryServer) CheckEquivalenceStatus(ctx context.Context, req *QueryCheckEquivalenceStatusRequest) (*QueryCheckEquivalenceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEquivalenceStatus not implemented")
}
func (*UnimplementedQueryServer) GetPendingAnalysis(ctx context.Context, req *QueryGetPendingAnalysisRequest) (*QueryGetPendingAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingAnalysis not implemented")
}
func (*UnimplementedQueryServer) GetApprovedEquivalences(ctx context.Context, req *QueryGetApprovedEquivalencesRequest) (*QueryGetApprovedEquivalencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovedEquivalences not implemented")
}
func (*UnimplementedQueryServer) GetRejectedEquivalences(ctx context.Context, req *QueryGetRejectedEquivalencesRequest) (*QueryGetRejectedEquivalencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRejectedEquivalences not implemented")
}
func (*UnimplementedQueryServer) GetEquivalencesByContract(ctx context.Context, req *QueryGetEquivalencesByContractRequest) (*QueryGetEquivalencesByContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquivalencesByContract not implemented")
}
func (*UnimplementedQueryServer) GetEquivalencesByContractVersion(ctx context.Context, req *QueryGetEquivalencesByContractVersionRequest) (*QueryGetEquivalencesByContractVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquivalencesByContractVersion not implemented")
}
func (*UnimplementedQueryServer) GetEquivalenceHistory(ctx context.Context, req *QueryGetEquivalenceHistoryRequest) (*QueryGetEquivalenceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquivalenceHistory not implemented")
}
func (*UnimplementedQueryServer) GetEquivalenceStats(ctx context.Context, req *QueryGetEquivalenceStatsRequest) (*QueryGetEquivalenceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquivalenceStats not implemented")
}
func (*UnimplementedQueryServer) GetAnalysisMetadata(ctx context.Context, req *QueryGetAnalysisMetadataRequest) (*QueryGetAnalysisMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysisMetadata not implemented")
}
func (*UnimplementedQueryServer) VerifyAnalysisIntegrity(ctx context.Context, req *QueryVerifyAnalysisIntegrityRequest) (*QueryVerifyAnalysisIntegrityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAnalysisIntegrity not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListEquivalences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListEquivalencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListEquivalences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/ListEquivalences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListEquivalences(ctx, req.(*QueryListEquivalencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEquivalenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetEquivalence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEquivalence(ctx, req.(*QueryGetEquivalenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEquivalencesBySourceSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEquivalencesBySourceSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEquivalencesBySourceSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetEquivalencesBySourceSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEquivalencesBySourceSubject(ctx, req.(*QueryGetEquivalencesBySourceSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEquivalencesByTargetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEquivalencesByTargetSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEquivalencesByTargetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetEquivalencesByTargetSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEquivalencesByTargetSubject(ctx, req.(*QueryGetEquivalencesByTargetSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEquivalencesByInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEquivalencesByInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEquivalencesByInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetEquivalencesByInstitution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEquivalencesByInstitution(ctx, req.(*QueryGetEquivalencesByInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckEquivalenceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckEquivalenceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckEquivalenceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/CheckEquivalenceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckEquivalenceStatus(ctx, req.(*QueryCheckEquivalenceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetPendingAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingAnalysis(ctx, req.(*QueryGetPendingAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetApprovedEquivalences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovedEquivalencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetApprovedEquivalences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetApprovedEquivalences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetApprovedEquivalences(ctx, req.(*QueryGetApprovedEquivalencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRejectedEquivalences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRejectedEquivalencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRejectedEquivalences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetRejectedEquivalences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRejectedEquivalences(ctx, req.(*QueryGetRejectedEquivalencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEquivalencesByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEquivalencesByContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEquivalencesByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetEquivalencesByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEquivalencesByContract(ctx, req.(*QueryGetEquivalencesByContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEquivalencesByContractVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEquivalencesByContractVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEquivalencesByContractVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetEquivalencesByContractVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEquivalencesByContractVersion(ctx, req.(*QueryGetEquivalencesByContractVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEquivalenceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEquivalenceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEquivalenceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetEquivalenceHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEquivalenceHistory(ctx, req.(*QueryGetEquivalenceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEquivalenceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEquivalenceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEquivalenceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetEquivalenceStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEquivalenceStats(ctx, req.(*QueryGetEquivalenceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAnalysisMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAnalysisMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAnalysisMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/GetAnalysisMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAnalysisMetadata(ctx, req.(*QueryGetAnalysisMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyAnalysisIntegrity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyAnalysisIntegrityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyAnalysisIntegrity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/academictoken.equivalence.Query/VerifyAnalysisIntegrity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyAnalysisIntegrity(ctx, req.(*QueryVerifyAnalysisIntegrityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.equivalence.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListEquivalences",
			Handler:    _Query_ListEquivalences_Handler,
		},
		{
			MethodName: "GetEquivalence",
			Handler:    _Query_GetEquivalence_Handler,
		},
		{
			MethodName: "GetEquivalencesBySourceSubject",
			Handler:    _Query_GetEquivalencesBySourceSubject_Handler,
		},
		{
			MethodName: "GetEquivalencesByTargetSubject",
			Handler:    _Query_GetEquivalencesByTargetSubject_Handler,
		},
		{
			MethodName: "GetEquivalencesByInstitution",
			Handler:    _Query_GetEquivalencesByInstitution_Handler,
		},
		{
			MethodName: "CheckEquivalenceStatus",
			Handler:    _Query_CheckEquivalenceStatus_Handler,
		},
		{
			MethodName: "GetPendingAnalysis",
			Handler:    _Query_GetPendingAnalysis_Handler,
		},
		{
			MethodName: "GetApprovedEquivalences",
			Handler:    _Query_GetApprovedEquivalences_Handler,
		},
		{
			MethodName: "GetRejectedEquivalences",
			Handler:    _Query_GetRejectedEquivalences_Handler,
		},
		{
			MethodName: "GetEquivalencesByContract",
			Handler:    _Query_GetEquivalencesByContract_Handler,
		},
		{
			MethodName: "GetEquivalencesByContractVersion",
			Handler:    _Query_GetEquivalencesByContractVersion_Handler,
		},
		{
			MethodName: "GetEquivalenceHistory",
			Handler:    _Query_GetEquivalenceHistory_Handler,
		},
		{
			MethodName: "GetEquivalenceStats",
			Handler:    _Query_GetEquivalenceStats_Handler,
		},
		{
			MethodName: "GetAnalysisMetadata",
			Handler:    _Query_GetAnalysisMetadata_Handler,
		},
		{
			MethodName: "VerifyAnalysisIntegrity",
			Handler:    _Query_VerifyAnalysisIntegrity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/equivalence/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListEquivalencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListEquivalencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListEquivalencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusFilter) > 0 {
		i -= len(m.StatusFilter)
		copy(dAtA[i:], m.StatusFilter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StatusFilter)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListEquivalencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListEquivalencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListEquivalencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Equivalence.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesBySourceSubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesBySourceSubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesBySourceSubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusFilter) > 0 {
		i -= len(m.StatusFilter)
		copy(dAtA[i:], m.StatusFilter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StatusFilter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesBySourceSubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesBySourceSubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesBySourceSubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesByTargetSubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesByTargetSubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesByTargetSubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusFilter) > 0 {
		i -= len(m.StatusFilter)
		copy(dAtA[i:], m.StatusFilter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StatusFilter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesByTargetSubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesByTargetSubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesByTargetSubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesByInstitutionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesByInstitutionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesByInstitutionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StatusFilter) > 0 {
		i -= len(m.StatusFilter)
		copy(dAtA[i:], m.StatusFilter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StatusFilter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InstitutionId) > 0 {
		i -= len(m.InstitutionId)
		copy(dAtA[i:], m.InstitutionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.InstitutionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesByInstitutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesByInstitutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesByInstitutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckEquivalenceStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckEquivalenceStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckEquivalenceStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetSubjectId) > 0 {
		i -= len(m.TargetSubjectId)
		copy(dAtA[i:], m.TargetSubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TargetSubjectId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceSubjectId) > 0 {
		i -= len(m.SourceSubjectId)
		copy(dAtA[i:], m.SourceSubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SourceSubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckEquivalenceStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckEquivalenceStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckEquivalenceStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AnalysisTimestamp) > 0 {
		i -= len(m.AnalysisTimestamp)
		copy(dAtA[i:], m.AnalysisTimestamp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AnalysisTimestamp)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Equivalence != nil {
		{
			size, err := m.Equivalence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.EquivalencePercent) > 0 {
		i -= len(m.EquivalencePercent)
		copy(dAtA[i:], m.EquivalencePercent)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EquivalencePercent)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.HasEquivalence {
		i--
		if m.HasEquivalence {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingAnalysisRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingAnalysisRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingAnalysisRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingAnalysisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingAnalysisResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingAnalysisResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedEquivalencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedEquivalencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedEquivalencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinEquivalencePercent) > 0 {
		i -= len(m.MinEquivalencePercent)
		copy(dAtA[i:], m.MinEquivalencePercent)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MinEquivalencePercent)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovedEquivalencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovedEquivalencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovedEquivalencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRejectedEquivalencesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRejectedEquivalencesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRejectedEquivalencesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRejectedEquivalencesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRejectedEquivalencesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRejectedEquivalencesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesByContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesByContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesByContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesByContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesByContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesByContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesByContractVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesByContractVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesByContractVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalencesByContractVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalencesByContractVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalencesByContractVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalenceHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalenceHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalenceHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubjectId) > 0 {
		i -= len(m.SubjectId)
		copy(dAtA[i:], m.SubjectId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubjectId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalenceHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalenceHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalenceHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Equivalences) > 0 {
		for iNdEx := len(m.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Equivalences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalenceStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalenceStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalenceStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEquivalenceStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEquivalenceStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEquivalenceStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActiveContractVersions) > 0 {
		for iNdEx := len(m.ActiveContractVersions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ActiveContractVersions[iNdEx])
			copy(dAtA[i:], m.ActiveContractVersions[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ActiveContractVersions[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.TotalContractAnalyses != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalContractAnalyses))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalSubjectsWithEquivalences != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalSubjectsWithEquivalences))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalInstitutionsInvolved != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalInstitutionsInvolved))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AverageEquivalencePercent) > 0 {
		i -= len(m.AverageEquivalencePercent)
		copy(dAtA[i:], m.AverageEquivalencePercent)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AverageEquivalencePercent)))
		i--
		dAtA[i] = 0x32
	}
	if m.ErrorEquivalences != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ErrorEquivalences))
		i--
		dAtA[i] = 0x28
	}
	if m.RejectedEquivalences != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RejectedEquivalences))
		i--
		dAtA[i] = 0x20
	}
	if m.ApprovedEquivalences != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ApprovedEquivalences))
		i--
		dAtA[i] = 0x18
	}
	if m.PendingAnalysis != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PendingAnalysis))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalEquivalences != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalEquivalences))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAnalysisMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAnalysisMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAnalysisMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EquivalenceId) > 0 {
		i -= len(m.EquivalenceId)
		copy(dAtA[i:], m.EquivalenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EquivalenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAnalysisMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAnalysisMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAnalysisMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnalysisCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AnalysisCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AnalysisTimestamp) > 0 {
		i -= len(m.AnalysisTimestamp)
		copy(dAtA[i:], m.AnalysisTimestamp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AnalysisTimestamp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AnalysisHash) > 0 {
		i -= len(m.AnalysisHash)
		copy(dAtA[i:], m.AnalysisHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AnalysisHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AnalysisMetadata) > 0 {
		i -= len(m.AnalysisMetadata)
		copy(dAtA[i:], m.AnalysisMetadata)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AnalysisMetadata)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyAnalysisIntegrityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyAnalysisIntegrityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyAnalysisIntegrityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EquivalenceId) > 0 {
		i -= len(m.EquivalenceId)
		copy(dAtA[i:], m.EquivalenceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EquivalenceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyAnalysisIntegrityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyAnalysisIntegrityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyAnalysisIntegrityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationTimestamp) > 0 {
		i -= len(m.VerificationTimestamp)
		copy(dAtA[i:], m.VerificationTimestamp)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationTimestamp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CalculatedHash) > 0 {
		i -= len(m.CalculatedHash)
		copy(dAtA[i:], m.CalculatedHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CalculatedHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StoredHash) > 0 {
		i -= len(m.StoredHash)
		copy(dAtA[i:], m.StoredHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StoredHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.IntegrityValid {
		i--
		if m.IntegrityValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListEquivalencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StatusFilter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListEquivalencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Equivalence.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEquivalencesBySourceSubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StatusFilter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesBySourceSubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesByTargetSubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StatusFilter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesByTargetSubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesByInstitutionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InstitutionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StatusFilter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesByInstitutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckEquivalenceStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceSubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TargetSubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckEquivalenceStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasEquivalence {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EquivalencePercent)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Equivalence != nil {
		l = m.Equivalence.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AnalysisTimestamp)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingAnalysisRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingAnalysisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedEquivalencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MinEquivalencePercent)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovedEquivalencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRejectedEquivalencesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRejectedEquivalencesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesByContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesByContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesByContractVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalencesByContractVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalenceHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubjectId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalenceHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Equivalences) > 0 {
		for _, e := range m.Equivalences {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEquivalenceStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEquivalenceStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalEquivalences != 0 {
		n += 1 + sovQuery(uint64(m.TotalEquivalences))
	}
	if m.PendingAnalysis != 0 {
		n += 1 + sovQuery(uint64(m.PendingAnalysis))
	}
	if m.ApprovedEquivalences != 0 {
		n += 1 + sovQuery(uint64(m.ApprovedEquivalences))
	}
	if m.RejectedEquivalences != 0 {
		n += 1 + sovQuery(uint64(m.RejectedEquivalences))
	}
	if m.ErrorEquivalences != 0 {
		n += 1 + sovQuery(uint64(m.ErrorEquivalences))
	}
	l = len(m.AverageEquivalencePercent)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalInstitutionsInvolved != 0 {
		n += 1 + sovQuery(uint64(m.TotalInstitutionsInvolved))
	}
	if m.TotalSubjectsWithEquivalences != 0 {
		n += 1 + sovQuery(uint64(m.TotalSubjectsWithEquivalences))
	}
	if m.TotalContractAnalyses != 0 {
		n += 1 + sovQuery(uint64(m.TotalContractAnalyses))
	}
	if len(m.ActiveContractVersions) > 0 {
		for _, s := range m.ActiveContractVersions {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetAnalysisMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EquivalenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAnalysisMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AnalysisMetadata)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AnalysisHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AnalysisTimestamp)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AnalysisCount != 0 {
		n += 1 + sovQuery(uint64(m.AnalysisCount))
	}
	return n
}

func (m *QueryVerifyAnalysisIntegrityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EquivalenceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyAnalysisIntegrityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IntegrityValid {
		n += 2
	}
	l = len(m.StoredHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CalculatedHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VerificationTimestamp)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListEquivalencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListEquivalencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListEquivalencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListEquivalencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListEquivalencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListEquivalencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Equivalence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesBySourceSubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesBySourceSubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesBySourceSubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesBySourceSubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesBySourceSubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesBySourceSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesByTargetSubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesByTargetSubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesByTargetSubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesByTargetSubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesByTargetSubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesByTargetSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesByInstitutionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesByInstitutionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesByInstitutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstitutionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstitutionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusFilter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesByInstitutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesByInstitutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesByInstitutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckEquivalenceStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckEquivalenceStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckEquivalenceStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckEquivalenceStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckEquivalenceStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckEquivalenceStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEquivalence", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasEquivalence = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalencePercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equivalence == nil {
				m.Equivalence = &SubjectEquivalence{}
			}
			if err := m.Equivalence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingAnalysisRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingAnalysisRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingAnalysisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingAnalysisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingAnalysisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingAnalysisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedEquivalencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedEquivalencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedEquivalencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEquivalencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinEquivalencePercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovedEquivalencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovedEquivalencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovedEquivalencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRejectedEquivalencesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRejectedEquivalencesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRejectedEquivalencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRejectedEquivalencesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRejectedEquivalencesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRejectedEquivalencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesByContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesByContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesByContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesByContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesByContractVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesByContractVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesByContractVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalencesByContractVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalencesByContractVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalencesByContractVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalenceHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalenceHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalenceHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalenceHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalenceHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalenceHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Equivalences = append(m.Equivalences, SubjectEquivalence{})
			if err := m.Equivalences[len(m.Equivalences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalenceStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalenceStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalenceStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEquivalenceStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEquivalenceStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEquivalenceStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEquivalences", wireType)
			}
			m.TotalEquivalences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalEquivalences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingAnalysis", wireType)
			}
			m.PendingAnalysis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingAnalysis |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovedEquivalences", wireType)
			}
			m.ApprovedEquivalences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApprovedEquivalences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedEquivalences", wireType)
			}
			m.RejectedEquivalences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejectedEquivalences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorEquivalences", wireType)
			}
			m.ErrorEquivalences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorEquivalences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageEquivalencePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AverageEquivalencePercent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInstitutionsInvolved", wireType)
			}
			m.TotalInstitutionsInvolved = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalInstitutionsInvolved |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSubjectsWithEquivalences", wireType)
			}
			m.TotalSubjectsWithEquivalences = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSubjectsWithEquivalences |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalContractAnalyses", wireType)
			}
			m.TotalContractAnalyses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalContractAnalyses |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveContractVersions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActiveContractVersions = append(m.ActiveContractVersions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAnalysisMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAnalysisMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAnalysisMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAnalysisMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAnalysisMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAnalysisMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnalysisTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnalysisCount", wireType)
			}
			m.AnalysisCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnalysisCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyAnalysisIntegrityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyAnalysisIntegrityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyAnalysisIntegrityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquivalenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyAnalysisIntegrityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyAnalysisIntegrityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyAnalysisIntegrityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrityValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IntegrityValid = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoredHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculatedHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CalculatedHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
