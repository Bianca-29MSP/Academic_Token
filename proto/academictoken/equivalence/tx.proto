syntax = "proto3";

package academictoken.equivalence;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "academictoken/equivalence/params.proto";

option go_package = "academictoken/x/equivalence/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // RequestEquivalence requests automated equivalence analysis between two subjects
  rpc RequestEquivalence(MsgRequestEquivalence) returns (MsgRequestEquivalenceResponse);

  // ExecuteEquivalenceAnalysis triggers the CosmWasm contract analysis
  rpc ExecuteEquivalenceAnalysis(MsgExecuteEquivalenceAnalysis) returns (MsgExecuteEquivalenceAnalysisResponse);

  // BatchRequestEquivalence allows requesting multiple equivalences at once
  rpc BatchRequestEquivalence(MsgBatchRequestEquivalence) returns (MsgBatchRequestEquivalenceResponse);

  // UpdateContractAddress updates the CosmWasm contract address for equivalence analysis
  rpc UpdateContractAddress(MsgUpdateContractAddress) returns (MsgUpdateContractAddressResponse);

  // ReanalyzeEquivalence forces re-analysis of an existing equivalence
  rpc ReanalyzeEquivalence(MsgReanalyzeEquivalence) returns (MsgReanalyzeEquivalenceResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "academictoken/x/equivalence/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgRequestEquivalence requests automated equivalence analysis between two subjects
message MsgRequestEquivalence {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string source_subject_id = 2;
  string target_institution = 3;
  string target_subject_id = 4;
  bool force_recalculation = 5; // Force recalculation even if already exists
  string contract_address = 6; // Optional: specific contract to use for analysis
}

// MsgRequestEquivalenceResponse defines the response for MsgRequestEquivalence
message MsgRequestEquivalenceResponse {
  string equivalence_id = 1;
  string status = 2;
  bool analysis_triggered = 3; // Whether contract analysis was immediately triggered
}

// MsgExecuteEquivalenceAnalysis triggers the CosmWasm contract analysis
message MsgExecuteEquivalenceAnalysis {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string equivalence_id = 2;
  string contract_address = 3; // CosmWasm contract to execute
  string analysis_parameters = 4; // JSON parameters for the contract
}

// MsgExecuteEquivalenceAnalysisResponse defines the response for MsgExecuteEquivalenceAnalysis
message MsgExecuteEquivalenceAnalysisResponse {
  bool success = 1;
  string equivalence_percent = 2; // Result from contract
  string analysis_metadata = 3; // Complete analysis data from contract
  string analysis_hash = 4; // Hash for integrity verification
  string updated_status = 5; // New status after analysis
}

// EquivalenceRequest defines a single equivalence request for batch operations
message EquivalenceRequest {
  string source_subject_id = 1;
  string target_institution = 2;
  string target_subject_id = 3;
}

// MsgBatchRequestEquivalence allows requesting multiple equivalences at once
message MsgBatchRequestEquivalence {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  repeated EquivalenceRequest requests = 2;
  bool force_recalculation = 3;
  string contract_address = 4; // Contract to use for all analyses
}

// BatchEquivalenceResult defines the result of a single equivalence request in a batch
message BatchEquivalenceResult {
  string equivalence_id = 1;
  string source_subject_id = 2;
  string target_subject_id = 3;
  string status = 4;
  string equivalence_percent = 5; // If analysis completed immediately
  string error = 6; // Empty if successful
}

// MsgBatchRequestEquivalenceResponse defines the response for MsgBatchRequestEquivalence
message MsgBatchRequestEquivalenceResponse {
  repeated BatchEquivalenceResult results = 1;
  uint64 successful_requests = 2;
  uint64 failed_requests = 3;
  uint64 pending_analysis = 4; // Number of requests awaiting contract analysis
}

// MsgUpdateContractAddress updates the CosmWasm contract address for equivalence analysis
message MsgUpdateContractAddress {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string new_contract_address = 2;
  string contract_version = 3; // Version identifier for the new contract
}

// MsgUpdateContractAddressResponse defines the response for MsgUpdateContractAddress
message MsgUpdateContractAddressResponse {
  bool success = 1;
  string previous_contract_address = 2;
  string new_contract_address = 3;
}

// MsgReanalyzeEquivalence forces re-analysis of an existing equivalence
message MsgReanalyzeEquivalence {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string equivalence_id = 2;
  string contract_address = 3; // Optional: use specific contract version
  string reanalysis_reason = 4; // Why re-analysis is needed
}

// MsgReanalyzeEquivalenceResponse defines the response for MsgReanalyzeEquivalence
message MsgReanalyzeEquivalenceResponse {
  bool success = 1;
  string previous_status = 2;
  string new_status = 3;
  string equivalence_percent = 4; // New percentage from re-analysis
  string analysis_metadata = 5; // Updated analysis data
}