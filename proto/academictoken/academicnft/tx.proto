syntax = "proto3";
package academictoken.academicnft;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "academictoken/academicnft/params.proto";

option go_package = "academictoken/x/academicnft/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
   
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams        (MsgUpdateParams       ) returns (MsgUpdateParamsResponse       );
  rpc MintSubjectToken    (MsgMintSubjectToken   ) returns (MsgMintSubjectTokenResponse   );
  rpc VerifyTokenInstance (MsgVerifyTokenInstance) returns (MsgVerifyTokenInstanceResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "academictoken/x/academicnft/MsgUpdateParams";
   
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgMintSubjectToken {
  option (cosmos.msg.v1.signer) = "creator";
  string creator            = 1;
  string tokenDefId         = 2;  // MUDANÇA: era tokenId
  string student            = 3;
  string completionDate     = 4;  // ADIÇÃO: estava faltando
  string grade              = 5;
  string issuerInstitution  = 6;  // ADIÇÃO: estava faltando  
  string semester           = 7;
  string professorSignature = 8;
}

message MsgMintSubjectTokenResponse {
  string tokenInstanceId = 1;  // ADIÇÃO: retorna o ID do token criado
}

message MsgVerifyTokenInstance {
  option (cosmos.msg.v1.signer) = "creator";
  string creator         = 1;
  string tokenInstanceId = 2;
}

message MsgVerifyTokenInstanceResponse {
  bool isValid = 1;  // ADIÇÃO: retorna se é válido
}