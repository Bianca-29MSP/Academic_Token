// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package curriculum

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_CurriculumTree_5_list)(nil)

type _CurriculumTree_5_list struct {
	list *[]string
}

func (x *_CurriculumTree_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CurriculumTree_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_CurriculumTree_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_CurriculumTree_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_CurriculumTree_5_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message CurriculumTree at list field RequiredSubjects as it is not of Message kind"))
}

func (x *_CurriculumTree_5_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_CurriculumTree_5_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_CurriculumTree_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CurriculumTree_7_list)(nil)

type _CurriculumTree_7_list struct {
	list *[]string
}

func (x *_CurriculumTree_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CurriculumTree_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_CurriculumTree_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_CurriculumTree_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_CurriculumTree_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message CurriculumTree at list field ElectiveSubjects as it is not of Message kind"))
}

func (x *_CurriculumTree_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_CurriculumTree_7_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_CurriculumTree_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CurriculumTree_8_list)(nil)

type _CurriculumTree_8_list struct {
	list *[]*CurriculumSemester
}

func (x *_CurriculumTree_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CurriculumTree_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CurriculumTree_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CurriculumSemester)
	(*x.list)[i] = concreteValue
}

func (x *_CurriculumTree_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CurriculumSemester)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CurriculumTree_8_list) AppendMutable() protoreflect.Value {
	v := new(CurriculumSemester)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CurriculumTree_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CurriculumTree_8_list) NewElement() protoreflect.Value {
	v := new(CurriculumSemester)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CurriculumTree_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_CurriculumTree_10_list)(nil)

type _CurriculumTree_10_list struct {
	list *[]*ElectiveGroup
}

func (x *_CurriculumTree_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CurriculumTree_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CurriculumTree_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ElectiveGroup)
	(*x.list)[i] = concreteValue
}

func (x *_CurriculumTree_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ElectiveGroup)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CurriculumTree_10_list) AppendMutable() protoreflect.Value {
	v := new(ElectiveGroup)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CurriculumTree_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CurriculumTree_10_list) NewElement() protoreflect.Value {
	v := new(ElectiveGroup)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CurriculumTree_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_CurriculumTree                        protoreflect.MessageDescriptor
	fd_CurriculumTree_index                  protoreflect.FieldDescriptor
	fd_CurriculumTree_courseId               protoreflect.FieldDescriptor
	fd_CurriculumTree_version                protoreflect.FieldDescriptor
	fd_CurriculumTree_totalWorkloadHours     protoreflect.FieldDescriptor
	fd_CurriculumTree_requiredSubjects       protoreflect.FieldDescriptor
	fd_CurriculumTree_electiveMin            protoreflect.FieldDescriptor
	fd_CurriculumTree_electiveSubjects       protoreflect.FieldDescriptor
	fd_CurriculumTree_semesterStructure      protoreflect.FieldDescriptor
	fd_CurriculumTree_graduationRequirements protoreflect.FieldDescriptor
	fd_CurriculumTree_electiveGroups         protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_curriculum_curriculum_tree_proto_init()
	md_CurriculumTree = File_academictoken_curriculum_curriculum_tree_proto.Messages().ByName("CurriculumTree")
	fd_CurriculumTree_index = md_CurriculumTree.Fields().ByName("index")
	fd_CurriculumTree_courseId = md_CurriculumTree.Fields().ByName("courseId")
	fd_CurriculumTree_version = md_CurriculumTree.Fields().ByName("version")
	fd_CurriculumTree_totalWorkloadHours = md_CurriculumTree.Fields().ByName("totalWorkloadHours")
	fd_CurriculumTree_requiredSubjects = md_CurriculumTree.Fields().ByName("requiredSubjects")
	fd_CurriculumTree_electiveMin = md_CurriculumTree.Fields().ByName("electiveMin")
	fd_CurriculumTree_electiveSubjects = md_CurriculumTree.Fields().ByName("electiveSubjects")
	fd_CurriculumTree_semesterStructure = md_CurriculumTree.Fields().ByName("semesterStructure")
	fd_CurriculumTree_graduationRequirements = md_CurriculumTree.Fields().ByName("graduationRequirements")
	fd_CurriculumTree_electiveGroups = md_CurriculumTree.Fields().ByName("electiveGroups")
}

var _ protoreflect.Message = (*fastReflection_CurriculumTree)(nil)

type fastReflection_CurriculumTree CurriculumTree

func (x *CurriculumTree) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CurriculumTree)(x)
}

func (x *CurriculumTree) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_curriculum_curriculum_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CurriculumTree_messageType fastReflection_CurriculumTree_messageType
var _ protoreflect.MessageType = fastReflection_CurriculumTree_messageType{}

type fastReflection_CurriculumTree_messageType struct{}

func (x fastReflection_CurriculumTree_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CurriculumTree)(nil)
}
func (x fastReflection_CurriculumTree_messageType) New() protoreflect.Message {
	return new(fastReflection_CurriculumTree)
}
func (x fastReflection_CurriculumTree_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CurriculumTree
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CurriculumTree) Descriptor() protoreflect.MessageDescriptor {
	return md_CurriculumTree
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CurriculumTree) Type() protoreflect.MessageType {
	return _fastReflection_CurriculumTree_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CurriculumTree) New() protoreflect.Message {
	return new(fastReflection_CurriculumTree)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CurriculumTree) Interface() protoreflect.ProtoMessage {
	return (*CurriculumTree)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CurriculumTree) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_CurriculumTree_index, value) {
			return
		}
	}
	if x.CourseId != "" {
		value := protoreflect.ValueOfString(x.CourseId)
		if !f(fd_CurriculumTree_courseId, value) {
			return
		}
	}
	if x.Version != "" {
		value := protoreflect.ValueOfString(x.Version)
		if !f(fd_CurriculumTree_version, value) {
			return
		}
	}
	if x.TotalWorkloadHours != "" {
		value := protoreflect.ValueOfString(x.TotalWorkloadHours)
		if !f(fd_CurriculumTree_totalWorkloadHours, value) {
			return
		}
	}
	if len(x.RequiredSubjects) != 0 {
		value := protoreflect.ValueOfList(&_CurriculumTree_5_list{list: &x.RequiredSubjects})
		if !f(fd_CurriculumTree_requiredSubjects, value) {
			return
		}
	}
	if x.ElectiveMin != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ElectiveMin)
		if !f(fd_CurriculumTree_electiveMin, value) {
			return
		}
	}
	if len(x.ElectiveSubjects) != 0 {
		value := protoreflect.ValueOfList(&_CurriculumTree_7_list{list: &x.ElectiveSubjects})
		if !f(fd_CurriculumTree_electiveSubjects, value) {
			return
		}
	}
	if len(x.SemesterStructure) != 0 {
		value := protoreflect.ValueOfList(&_CurriculumTree_8_list{list: &x.SemesterStructure})
		if !f(fd_CurriculumTree_semesterStructure, value) {
			return
		}
	}
	if x.GraduationRequirements != nil {
		value := protoreflect.ValueOfMessage(x.GraduationRequirements.ProtoReflect())
		if !f(fd_CurriculumTree_graduationRequirements, value) {
			return
		}
	}
	if len(x.ElectiveGroups) != 0 {
		value := protoreflect.ValueOfList(&_CurriculumTree_10_list{list: &x.ElectiveGroups})
		if !f(fd_CurriculumTree_electiveGroups, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CurriculumTree) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.curriculum.CurriculumTree.index":
		return x.Index != ""
	case "academictoken.curriculum.CurriculumTree.courseId":
		return x.CourseId != ""
	case "academictoken.curriculum.CurriculumTree.version":
		return x.Version != ""
	case "academictoken.curriculum.CurriculumTree.totalWorkloadHours":
		return x.TotalWorkloadHours != ""
	case "academictoken.curriculum.CurriculumTree.requiredSubjects":
		return len(x.RequiredSubjects) != 0
	case "academictoken.curriculum.CurriculumTree.electiveMin":
		return x.ElectiveMin != uint64(0)
	case "academictoken.curriculum.CurriculumTree.electiveSubjects":
		return len(x.ElectiveSubjects) != 0
	case "academictoken.curriculum.CurriculumTree.semesterStructure":
		return len(x.SemesterStructure) != 0
	case "academictoken.curriculum.CurriculumTree.graduationRequirements":
		return x.GraduationRequirements != nil
	case "academictoken.curriculum.CurriculumTree.electiveGroups":
		return len(x.ElectiveGroups) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.curriculum.CurriculumTree"))
		}
		panic(fmt.Errorf("message academictoken.curriculum.CurriculumTree does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurriculumTree) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.curriculum.CurriculumTree.index":
		x.Index = ""
	case "academictoken.curriculum.CurriculumTree.courseId":
		x.CourseId = ""
	case "academictoken.curriculum.CurriculumTree.version":
		x.Version = ""
	case "academictoken.curriculum.CurriculumTree.totalWorkloadHours":
		x.TotalWorkloadHours = ""
	case "academictoken.curriculum.CurriculumTree.requiredSubjects":
		x.RequiredSubjects = nil
	case "academictoken.curriculum.CurriculumTree.electiveMin":
		x.ElectiveMin = uint64(0)
	case "academictoken.curriculum.CurriculumTree.electiveSubjects":
		x.ElectiveSubjects = nil
	case "academictoken.curriculum.CurriculumTree.semesterStructure":
		x.SemesterStructure = nil
	case "academictoken.curriculum.CurriculumTree.graduationRequirements":
		x.GraduationRequirements = nil
	case "academictoken.curriculum.CurriculumTree.electiveGroups":
		x.ElectiveGroups = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.curriculum.CurriculumTree"))
		}
		panic(fmt.Errorf("message academictoken.curriculum.CurriculumTree does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CurriculumTree) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.curriculum.CurriculumTree.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "academictoken.curriculum.CurriculumTree.courseId":
		value := x.CourseId
		return protoreflect.ValueOfString(value)
	case "academictoken.curriculum.CurriculumTree.version":
		value := x.Version
		return protoreflect.ValueOfString(value)
	case "academictoken.curriculum.CurriculumTree.totalWorkloadHours":
		value := x.TotalWorkloadHours
		return protoreflect.ValueOfString(value)
	case "academictoken.curriculum.CurriculumTree.requiredSubjects":
		if len(x.RequiredSubjects) == 0 {
			return protoreflect.ValueOfList(&_CurriculumTree_5_list{})
		}
		listValue := &_CurriculumTree_5_list{list: &x.RequiredSubjects}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.curriculum.CurriculumTree.electiveMin":
		value := x.ElectiveMin
		return protoreflect.ValueOfUint64(value)
	case "academictoken.curriculum.CurriculumTree.electiveSubjects":
		if len(x.ElectiveSubjects) == 0 {
			return protoreflect.ValueOfList(&_CurriculumTree_7_list{})
		}
		listValue := &_CurriculumTree_7_list{list: &x.ElectiveSubjects}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.curriculum.CurriculumTree.semesterStructure":
		if len(x.SemesterStructure) == 0 {
			return protoreflect.ValueOfList(&_CurriculumTree_8_list{})
		}
		listValue := &_CurriculumTree_8_list{list: &x.SemesterStructure}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.curriculum.CurriculumTree.graduationRequirements":
		value := x.GraduationRequirements
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.curriculum.CurriculumTree.electiveGroups":
		if len(x.ElectiveGroups) == 0 {
			return protoreflect.ValueOfList(&_CurriculumTree_10_list{})
		}
		listValue := &_CurriculumTree_10_list{list: &x.ElectiveGroups}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.curriculum.CurriculumTree"))
		}
		panic(fmt.Errorf("message academictoken.curriculum.CurriculumTree does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurriculumTree) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.curriculum.CurriculumTree.index":
		x.Index = value.Interface().(string)
	case "academictoken.curriculum.CurriculumTree.courseId":
		x.CourseId = value.Interface().(string)
	case "academictoken.curriculum.CurriculumTree.version":
		x.Version = value.Interface().(string)
	case "academictoken.curriculum.CurriculumTree.totalWorkloadHours":
		x.TotalWorkloadHours = value.Interface().(string)
	case "academictoken.curriculum.CurriculumTree.requiredSubjects":
		lv := value.List()
		clv := lv.(*_CurriculumTree_5_list)
		x.RequiredSubjects = *clv.list
	case "academictoken.curriculum.CurriculumTree.electiveMin":
		x.ElectiveMin = value.Uint()
	case "academictoken.curriculum.CurriculumTree.electiveSubjects":
		lv := value.List()
		clv := lv.(*_CurriculumTree_7_list)
		x.ElectiveSubjects = *clv.list
	case "academictoken.curriculum.CurriculumTree.semesterStructure":
		lv := value.List()
		clv := lv.(*_CurriculumTree_8_list)
		x.SemesterStructure = *clv.list
	case "academictoken.curriculum.CurriculumTree.graduationRequirements":
		x.GraduationRequirements = value.Message().Interface().(*GraduationRequirements)
	case "academictoken.curriculum.CurriculumTree.electiveGroups":
		lv := value.List()
		clv := lv.(*_CurriculumTree_10_list)
		x.ElectiveGroups = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.curriculum.CurriculumTree"))
		}
		panic(fmt.Errorf("message academictoken.curriculum.CurriculumTree does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurriculumTree) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.curriculum.CurriculumTree.requiredSubjects":
		if x.RequiredSubjects == nil {
			x.RequiredSubjects = []string{}
		}
		value := &_CurriculumTree_5_list{list: &x.RequiredSubjects}
		return protoreflect.ValueOfList(value)
	case "academictoken.curriculum.CurriculumTree.electiveSubjects":
		if x.ElectiveSubjects == nil {
			x.ElectiveSubjects = []string{}
		}
		value := &_CurriculumTree_7_list{list: &x.ElectiveSubjects}
		return protoreflect.ValueOfList(value)
	case "academictoken.curriculum.CurriculumTree.semesterStructure":
		if x.SemesterStructure == nil {
			x.SemesterStructure = []*CurriculumSemester{}
		}
		value := &_CurriculumTree_8_list{list: &x.SemesterStructure}
		return protoreflect.ValueOfList(value)
	case "academictoken.curriculum.CurriculumTree.graduationRequirements":
		if x.GraduationRequirements == nil {
			x.GraduationRequirements = new(GraduationRequirements)
		}
		return protoreflect.ValueOfMessage(x.GraduationRequirements.ProtoReflect())
	case "academictoken.curriculum.CurriculumTree.electiveGroups":
		if x.ElectiveGroups == nil {
			x.ElectiveGroups = []*ElectiveGroup{}
		}
		value := &_CurriculumTree_10_list{list: &x.ElectiveGroups}
		return protoreflect.ValueOfList(value)
	case "academictoken.curriculum.CurriculumTree.index":
		panic(fmt.Errorf("field index of message academictoken.curriculum.CurriculumTree is not mutable"))
	case "academictoken.curriculum.CurriculumTree.courseId":
		panic(fmt.Errorf("field courseId of message academictoken.curriculum.CurriculumTree is not mutable"))
	case "academictoken.curriculum.CurriculumTree.version":
		panic(fmt.Errorf("field version of message academictoken.curriculum.CurriculumTree is not mutable"))
	case "academictoken.curriculum.CurriculumTree.totalWorkloadHours":
		panic(fmt.Errorf("field totalWorkloadHours of message academictoken.curriculum.CurriculumTree is not mutable"))
	case "academictoken.curriculum.CurriculumTree.electiveMin":
		panic(fmt.Errorf("field electiveMin of message academictoken.curriculum.CurriculumTree is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.curriculum.CurriculumTree"))
		}
		panic(fmt.Errorf("message academictoken.curriculum.CurriculumTree does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CurriculumTree) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.curriculum.CurriculumTree.index":
		return protoreflect.ValueOfString("")
	case "academictoken.curriculum.CurriculumTree.courseId":
		return protoreflect.ValueOfString("")
	case "academictoken.curriculum.CurriculumTree.version":
		return protoreflect.ValueOfString("")
	case "academictoken.curriculum.CurriculumTree.totalWorkloadHours":
		return protoreflect.ValueOfString("")
	case "academictoken.curriculum.CurriculumTree.requiredSubjects":
		list := []string{}
		return protoreflect.ValueOfList(&_CurriculumTree_5_list{list: &list})
	case "academictoken.curriculum.CurriculumTree.electiveMin":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.curriculum.CurriculumTree.electiveSubjects":
		list := []string{}
		return protoreflect.ValueOfList(&_CurriculumTree_7_list{list: &list})
	case "academictoken.curriculum.CurriculumTree.semesterStructure":
		list := []*CurriculumSemester{}
		return protoreflect.ValueOfList(&_CurriculumTree_8_list{list: &list})
	case "academictoken.curriculum.CurriculumTree.graduationRequirements":
		m := new(GraduationRequirements)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.curriculum.CurriculumTree.electiveGroups":
		list := []*ElectiveGroup{}
		return protoreflect.ValueOfList(&_CurriculumTree_10_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.curriculum.CurriculumTree"))
		}
		panic(fmt.Errorf("message academictoken.curriculum.CurriculumTree does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CurriculumTree) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.curriculum.CurriculumTree", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CurriculumTree) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurriculumTree) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CurriculumTree) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CurriculumTree) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CurriculumTree)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CourseId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Version)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalWorkloadHours)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RequiredSubjects) > 0 {
			for _, s := range x.RequiredSubjects {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ElectiveMin != 0 {
			n += 1 + runtime.Sov(uint64(x.ElectiveMin))
		}
		if len(x.ElectiveSubjects) > 0 {
			for _, s := range x.ElectiveSubjects {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.SemesterStructure) > 0 {
			for _, e := range x.SemesterStructure {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.GraduationRequirements != nil {
			l = options.Size(x.GraduationRequirements)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ElectiveGroups) > 0 {
			for _, e := range x.ElectiveGroups {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CurriculumTree)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ElectiveGroups) > 0 {
			for iNdEx := len(x.ElectiveGroups) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ElectiveGroups[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.GraduationRequirements != nil {
			encoded, err := options.Marshal(x.GraduationRequirements)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.SemesterStructure) > 0 {
			for iNdEx := len(x.SemesterStructure) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.SemesterStructure[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.ElectiveSubjects) > 0 {
			for iNdEx := len(x.ElectiveSubjects) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ElectiveSubjects[iNdEx])
				copy(dAtA[i:], x.ElectiveSubjects[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ElectiveSubjects[iNdEx])))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.ElectiveMin != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ElectiveMin))
			i--
			dAtA[i] = 0x30
		}
		if len(x.RequiredSubjects) > 0 {
			for iNdEx := len(x.RequiredSubjects) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.RequiredSubjects[iNdEx])
				copy(dAtA[i:], x.RequiredSubjects[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequiredSubjects[iNdEx])))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.TotalWorkloadHours) > 0 {
			i -= len(x.TotalWorkloadHours)
			copy(dAtA[i:], x.TotalWorkloadHours)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalWorkloadHours)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Version) > 0 {
			i -= len(x.Version)
			copy(dAtA[i:], x.Version)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Version)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.CourseId) > 0 {
			i -= len(x.CourseId)
			copy(dAtA[i:], x.CourseId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CourseId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CurriculumTree)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurriculumTree: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurriculumTree: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CourseId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Version = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalWorkloadHours", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalWorkloadHours = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequiredSubjects", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequiredSubjects = append(x.RequiredSubjects, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ElectiveMin", wireType)
				}
				x.ElectiveMin = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ElectiveMin |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ElectiveSubjects", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ElectiveSubjects = append(x.ElectiveSubjects, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SemesterStructure", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SemesterStructure = append(x.SemesterStructure, &CurriculumSemester{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SemesterStructure[len(x.SemesterStructure)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GraduationRequirements", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.GraduationRequirements == nil {
					x.GraduationRequirements = &GraduationRequirements{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.GraduationRequirements); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ElectiveGroups", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ElectiveGroups = append(x.ElectiveGroups, &ElectiveGroup{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ElectiveGroups[len(x.ElectiveGroups)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: academictoken/curriculum/curriculum_tree.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurriculumTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                  string                  `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	CourseId               string                  `protobuf:"bytes,2,opt,name=courseId,proto3" json:"courseId,omitempty"`
	Version                string                  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	TotalWorkloadHours     string                  `protobuf:"bytes,4,opt,name=totalWorkloadHours,proto3" json:"totalWorkloadHours,omitempty"`
	RequiredSubjects       []string                `protobuf:"bytes,5,rep,name=requiredSubjects,proto3" json:"requiredSubjects,omitempty"`
	ElectiveMin            uint64                  `protobuf:"varint,6,opt,name=electiveMin,proto3" json:"electiveMin,omitempty"`
	ElectiveSubjects       []string                `protobuf:"bytes,7,rep,name=electiveSubjects,proto3" json:"electiveSubjects,omitempty"`
	SemesterStructure      []*CurriculumSemester   `protobuf:"bytes,8,rep,name=semesterStructure,proto3" json:"semesterStructure,omitempty"`
	GraduationRequirements *GraduationRequirements `protobuf:"bytes,9,opt,name=graduationRequirements,proto3" json:"graduationRequirements,omitempty"`
	ElectiveGroups         []*ElectiveGroup        `protobuf:"bytes,10,rep,name=electiveGroups,proto3" json:"electiveGroups,omitempty"`
}

func (x *CurriculumTree) Reset() {
	*x = CurriculumTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_curriculum_curriculum_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurriculumTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurriculumTree) ProtoMessage() {}

// Deprecated: Use CurriculumTree.ProtoReflect.Descriptor instead.
func (*CurriculumTree) Descriptor() ([]byte, []int) {
	return file_academictoken_curriculum_curriculum_tree_proto_rawDescGZIP(), []int{0}
}

func (x *CurriculumTree) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *CurriculumTree) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *CurriculumTree) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CurriculumTree) GetTotalWorkloadHours() string {
	if x != nil {
		return x.TotalWorkloadHours
	}
	return ""
}

func (x *CurriculumTree) GetRequiredSubjects() []string {
	if x != nil {
		return x.RequiredSubjects
	}
	return nil
}

func (x *CurriculumTree) GetElectiveMin() uint64 {
	if x != nil {
		return x.ElectiveMin
	}
	return 0
}

func (x *CurriculumTree) GetElectiveSubjects() []string {
	if x != nil {
		return x.ElectiveSubjects
	}
	return nil
}

func (x *CurriculumTree) GetSemesterStructure() []*CurriculumSemester {
	if x != nil {
		return x.SemesterStructure
	}
	return nil
}

func (x *CurriculumTree) GetGraduationRequirements() *GraduationRequirements {
	if x != nil {
		return x.GraduationRequirements
	}
	return nil
}

func (x *CurriculumTree) GetElectiveGroups() []*ElectiveGroup {
	if x != nil {
		return x.ElectiveGroups
	}
	return nil
}

var File_academictoken_curriculum_curriculum_tree_proto protoreflect.FileDescriptor

var file_academictoken_curriculum_curriculum_tree_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x1a, 0x32, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63,
	0x75, 0x6c, 0x75, 0x6d, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x5f,
	0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d,
	0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x04, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x69, 0x63,
	0x75, 0x6c, 0x75, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x5a,
	0x0a, 0x11, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63,
	0x75, 0x6c, 0x75, 0x6d, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x53,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x11, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x16, 0x67, 0x72,
	0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x63, 0x75, 0x6c, 0x75, 0x6d, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x16, 0x67, 0x72,
	0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0xe0, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x42, 0x13, 0x43, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c,
	0x75, 0x6d, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58, 0xaa,
	0x02, 0x18, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0xca, 0x02, 0x18, 0x41, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x43, 0x75, 0x72, 0x72, 0x69,
	0x63, 0x75, 0x6c, 0x75, 0x6d, 0xe2, 0x02, 0x24, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x43, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x41,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3a, 0x43, 0x75,
	0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_academictoken_curriculum_curriculum_tree_proto_rawDescOnce sync.Once
	file_academictoken_curriculum_curriculum_tree_proto_rawDescData = file_academictoken_curriculum_curriculum_tree_proto_rawDesc
)

func file_academictoken_curriculum_curriculum_tree_proto_rawDescGZIP() []byte {
	file_academictoken_curriculum_curriculum_tree_proto_rawDescOnce.Do(func() {
		file_academictoken_curriculum_curriculum_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_academictoken_curriculum_curriculum_tree_proto_rawDescData)
	})
	return file_academictoken_curriculum_curriculum_tree_proto_rawDescData
}

var file_academictoken_curriculum_curriculum_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_academictoken_curriculum_curriculum_tree_proto_goTypes = []interface{}{
	(*CurriculumTree)(nil),         // 0: academictoken.curriculum.CurriculumTree
	(*CurriculumSemester)(nil),     // 1: academictoken.curriculum.CurriculumSemester
	(*GraduationRequirements)(nil), // 2: academictoken.curriculum.GraduationRequirements
	(*ElectiveGroup)(nil),          // 3: academictoken.curriculum.ElectiveGroup
}
var file_academictoken_curriculum_curriculum_tree_proto_depIdxs = []int32{
	1, // 0: academictoken.curriculum.CurriculumTree.semesterStructure:type_name -> academictoken.curriculum.CurriculumSemester
	2, // 1: academictoken.curriculum.CurriculumTree.graduationRequirements:type_name -> academictoken.curriculum.GraduationRequirements
	3, // 2: academictoken.curriculum.CurriculumTree.electiveGroups:type_name -> academictoken.curriculum.ElectiveGroup
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_academictoken_curriculum_curriculum_tree_proto_init() }
func file_academictoken_curriculum_curriculum_tree_proto_init() {
	if File_academictoken_curriculum_curriculum_tree_proto != nil {
		return
	}
	file_academictoken_curriculum_curriculum_semester_proto_init()
	file_academictoken_curriculum_graduation_requirements_proto_init()
	file_academictoken_curriculum_elective_group_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_academictoken_curriculum_curriculum_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurriculumTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_academictoken_curriculum_curriculum_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_academictoken_curriculum_curriculum_tree_proto_goTypes,
		DependencyIndexes: file_academictoken_curriculum_curriculum_tree_proto_depIdxs,
		MessageInfos:      file_academictoken_curriculum_curriculum_tree_proto_msgTypes,
	}.Build()
	File_academictoken_curriculum_curriculum_tree_proto = out.File
	file_academictoken_curriculum_curriculum_tree_proto_rawDesc = nil
	file_academictoken_curriculum_curriculum_tree_proto_goTypes = nil
	file_academictoken_curriculum_curriculum_tree_proto_depIdxs = nil
}
