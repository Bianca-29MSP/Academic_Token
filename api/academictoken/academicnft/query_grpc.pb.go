// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: academictoken/academicnft/query.proto

package academicnft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName               = "/academictoken.academicnft.Query/Params"
	Query_GetTokenInstance_FullMethodName     = "/academictoken.academicnft.Query/GetTokenInstance"
	Query_GetStudentTokens_FullMethodName     = "/academictoken.academicnft.Query/GetStudentTokens"
	Query_GetTokenDefInstances_FullMethodName = "/academictoken.academicnft.Query/GetTokenDefInstances"
	Query_VerifyTokenInstance_FullMethodName  = "/academictoken.academicnft.Query/VerifyTokenInstance"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Get a specific token instance by ID
	GetTokenInstance(ctx context.Context, in *QueryGetTokenInstanceRequest, opts ...grpc.CallOption) (*QueryGetTokenInstanceResponse, error)
	// Get all token instances for a student
	GetStudentTokens(ctx context.Context, in *QueryGetStudentTokensRequest, opts ...grpc.CallOption) (*QueryGetStudentTokensResponse, error)
	// Get all instances of a specific TokenDef
	GetTokenDefInstances(ctx context.Context, in *QueryGetTokenDefInstancesRequest, opts ...grpc.CallOption) (*QueryGetTokenDefInstancesResponse, error)
	// Verify if a token instance exists and is valid
	VerifyTokenInstance(ctx context.Context, in *QueryVerifyTokenInstanceRequest, opts ...grpc.CallOption) (*QueryVerifyTokenInstanceResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTokenInstance(ctx context.Context, in *QueryGetTokenInstanceRequest, opts ...grpc.CallOption) (*QueryGetTokenInstanceResponse, error) {
	out := new(QueryGetTokenInstanceResponse)
	err := c.cc.Invoke(ctx, Query_GetTokenInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStudentTokens(ctx context.Context, in *QueryGetStudentTokensRequest, opts ...grpc.CallOption) (*QueryGetStudentTokensResponse, error) {
	out := new(QueryGetStudentTokensResponse)
	err := c.cc.Invoke(ctx, Query_GetStudentTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTokenDefInstances(ctx context.Context, in *QueryGetTokenDefInstancesRequest, opts ...grpc.CallOption) (*QueryGetTokenDefInstancesResponse, error) {
	out := new(QueryGetTokenDefInstancesResponse)
	err := c.cc.Invoke(ctx, Query_GetTokenDefInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyTokenInstance(ctx context.Context, in *QueryVerifyTokenInstanceRequest, opts ...grpc.CallOption) (*QueryVerifyTokenInstanceResponse, error) {
	out := new(QueryVerifyTokenInstanceResponse)
	err := c.cc.Invoke(ctx, Query_VerifyTokenInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Get a specific token instance by ID
	GetTokenInstance(context.Context, *QueryGetTokenInstanceRequest) (*QueryGetTokenInstanceResponse, error)
	// Get all token instances for a student
	GetStudentTokens(context.Context, *QueryGetStudentTokensRequest) (*QueryGetStudentTokensResponse, error)
	// Get all instances of a specific TokenDef
	GetTokenDefInstances(context.Context, *QueryGetTokenDefInstancesRequest) (*QueryGetTokenDefInstancesResponse, error)
	// Verify if a token instance exists and is valid
	VerifyTokenInstance(context.Context, *QueryVerifyTokenInstanceRequest) (*QueryVerifyTokenInstanceResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetTokenInstance(context.Context, *QueryGetTokenInstanceRequest) (*QueryGetTokenInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInstance not implemented")
}
func (UnimplementedQueryServer) GetStudentTokens(context.Context, *QueryGetStudentTokensRequest) (*QueryGetStudentTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentTokens not implemented")
}
func (UnimplementedQueryServer) GetTokenDefInstances(context.Context, *QueryGetTokenDefInstancesRequest) (*QueryGetTokenDefInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenDefInstances not implemented")
}
func (UnimplementedQueryServer) VerifyTokenInstance(context.Context, *QueryVerifyTokenInstanceRequest) (*QueryVerifyTokenInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTokenInstance not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTokenInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTokenInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTokenInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTokenInstance(ctx, req.(*QueryGetTokenInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStudentTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudentTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStudentTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetStudentTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStudentTokens(ctx, req.(*QueryGetStudentTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTokenDefInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenDefInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTokenDefInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTokenDefInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTokenDefInstances(ctx, req.(*QueryGetTokenDefInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyTokenInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyTokenInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyTokenInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VerifyTokenInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyTokenInstance(ctx, req.(*QueryVerifyTokenInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.academicnft.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetTokenInstance",
			Handler:    _Query_GetTokenInstance_Handler,
		},
		{
			MethodName: "GetStudentTokens",
			Handler:    _Query_GetStudentTokens_Handler,
		},
		{
			MethodName: "GetTokenDefInstances",
			Handler:    _Query_GetTokenDefInstances_Handler,
		},
		{
			MethodName: "VerifyTokenInstance",
			Handler:    _Query_VerifyTokenInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/academicnft/query.proto",
}
