// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: academictoken/student/tx.proto

package student

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName             = "/academictoken.student.Msg/UpdateParams"
	Msg_RegisterStudent_FullMethodName          = "/academictoken.student.Msg/RegisterStudent"
	Msg_CreateEnrollment_FullMethodName         = "/academictoken.student.Msg/CreateEnrollment"
	Msg_UpdateEnrollmentStatus_FullMethodName   = "/academictoken.student.Msg/UpdateEnrollmentStatus"
	Msg_RequestSubjectEnrollment_FullMethodName = "/academictoken.student.Msg/RequestSubjectEnrollment"
	Msg_UpdateAcademicTree_FullMethodName       = "/academictoken.student.Msg/UpdateAcademicTree"
	Msg_CompleteSubject_FullMethodName          = "/academictoken.student.Msg/CompleteSubject"
	Msg_RequestEquivalence_FullMethodName       = "/academictoken.student.Msg/RequestEquivalence"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	RegisterStudent(ctx context.Context, in *MsgRegisterStudent, opts ...grpc.CallOption) (*MsgRegisterStudentResponse, error)
	CreateEnrollment(ctx context.Context, in *MsgCreateEnrollment, opts ...grpc.CallOption) (*MsgCreateEnrollmentResponse, error)
	UpdateEnrollmentStatus(ctx context.Context, in *MsgUpdateEnrollmentStatus, opts ...grpc.CallOption) (*MsgUpdateEnrollmentStatusResponse, error)
	RequestSubjectEnrollment(ctx context.Context, in *MsgRequestSubjectEnrollment, opts ...grpc.CallOption) (*MsgRequestSubjectEnrollmentResponse, error)
	UpdateAcademicTree(ctx context.Context, in *MsgUpdateAcademicTree, opts ...grpc.CallOption) (*MsgUpdateAcademicTreeResponse, error)
	CompleteSubject(ctx context.Context, in *MsgCompleteSubject, opts ...grpc.CallOption) (*MsgCompleteSubjectResponse, error)
	RequestEquivalence(ctx context.Context, in *MsgRequestEquivalence, opts ...grpc.CallOption) (*MsgRequestEquivalenceResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterStudent(ctx context.Context, in *MsgRegisterStudent, opts ...grpc.CallOption) (*MsgRegisterStudentResponse, error) {
	out := new(MsgRegisterStudentResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateEnrollment(ctx context.Context, in *MsgCreateEnrollment, opts ...grpc.CallOption) (*MsgCreateEnrollmentResponse, error) {
	out := new(MsgCreateEnrollmentResponse)
	err := c.cc.Invoke(ctx, Msg_CreateEnrollment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEnrollmentStatus(ctx context.Context, in *MsgUpdateEnrollmentStatus, opts ...grpc.CallOption) (*MsgUpdateEnrollmentStatusResponse, error) {
	out := new(MsgUpdateEnrollmentStatusResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateEnrollmentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestSubjectEnrollment(ctx context.Context, in *MsgRequestSubjectEnrollment, opts ...grpc.CallOption) (*MsgRequestSubjectEnrollmentResponse, error) {
	out := new(MsgRequestSubjectEnrollmentResponse)
	err := c.cc.Invoke(ctx, Msg_RequestSubjectEnrollment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAcademicTree(ctx context.Context, in *MsgUpdateAcademicTree, opts ...grpc.CallOption) (*MsgUpdateAcademicTreeResponse, error) {
	out := new(MsgUpdateAcademicTreeResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAcademicTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CompleteSubject(ctx context.Context, in *MsgCompleteSubject, opts ...grpc.CallOption) (*MsgCompleteSubjectResponse, error) {
	out := new(MsgCompleteSubjectResponse)
	err := c.cc.Invoke(ctx, Msg_CompleteSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestEquivalence(ctx context.Context, in *MsgRequestEquivalence, opts ...grpc.CallOption) (*MsgRequestEquivalenceResponse, error) {
	out := new(MsgRequestEquivalenceResponse)
	err := c.cc.Invoke(ctx, Msg_RequestEquivalence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	RegisterStudent(context.Context, *MsgRegisterStudent) (*MsgRegisterStudentResponse, error)
	CreateEnrollment(context.Context, *MsgCreateEnrollment) (*MsgCreateEnrollmentResponse, error)
	UpdateEnrollmentStatus(context.Context, *MsgUpdateEnrollmentStatus) (*MsgUpdateEnrollmentStatusResponse, error)
	RequestSubjectEnrollment(context.Context, *MsgRequestSubjectEnrollment) (*MsgRequestSubjectEnrollmentResponse, error)
	UpdateAcademicTree(context.Context, *MsgUpdateAcademicTree) (*MsgUpdateAcademicTreeResponse, error)
	CompleteSubject(context.Context, *MsgCompleteSubject) (*MsgCompleteSubjectResponse, error)
	RequestEquivalence(context.Context, *MsgRequestEquivalence) (*MsgRequestEquivalenceResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) RegisterStudent(context.Context, *MsgRegisterStudent) (*MsgRegisterStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStudent not implemented")
}
func (UnimplementedMsgServer) CreateEnrollment(context.Context, *MsgCreateEnrollment) (*MsgCreateEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollment not implemented")
}
func (UnimplementedMsgServer) UpdateEnrollmentStatus(context.Context, *MsgUpdateEnrollmentStatus) (*MsgUpdateEnrollmentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrollmentStatus not implemented")
}
func (UnimplementedMsgServer) RequestSubjectEnrollment(context.Context, *MsgRequestSubjectEnrollment) (*MsgRequestSubjectEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSubjectEnrollment not implemented")
}
func (UnimplementedMsgServer) UpdateAcademicTree(context.Context, *MsgUpdateAcademicTree) (*MsgUpdateAcademicTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcademicTree not implemented")
}
func (UnimplementedMsgServer) CompleteSubject(context.Context, *MsgCompleteSubject) (*MsgCompleteSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteSubject not implemented")
}
func (UnimplementedMsgServer) RequestEquivalence(context.Context, *MsgRequestEquivalence) (*MsgRequestEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEquivalence not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterStudent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterStudent(ctx, req.(*MsgRegisterStudent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEnrollment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEnrollment(ctx, req.(*MsgCreateEnrollment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEnrollmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEnrollmentStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEnrollmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateEnrollmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEnrollmentStatus(ctx, req.(*MsgUpdateEnrollmentStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestSubjectEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestSubjectEnrollment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestSubjectEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestSubjectEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestSubjectEnrollment(ctx, req.(*MsgRequestSubjectEnrollment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAcademicTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAcademicTree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAcademicTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAcademicTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAcademicTree(ctx, req.(*MsgUpdateAcademicTree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CompleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCompleteSubject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CompleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CompleteSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CompleteSubject(ctx, req.(*MsgCompleteSubject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestEquivalence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestEquivalence(ctx, req.(*MsgRequestEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.student.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterStudent",
			Handler:    _Msg_RegisterStudent_Handler,
		},
		{
			MethodName: "CreateEnrollment",
			Handler:    _Msg_CreateEnrollment_Handler,
		},
		{
			MethodName: "UpdateEnrollmentStatus",
			Handler:    _Msg_UpdateEnrollmentStatus_Handler,
		},
		{
			MethodName: "RequestSubjectEnrollment",
			Handler:    _Msg_RequestSubjectEnrollment_Handler,
		},
		{
			MethodName: "UpdateAcademicTree",
			Handler:    _Msg_UpdateAcademicTree_Handler,
		},
		{
			MethodName: "CompleteSubject",
			Handler:    _Msg_CompleteSubject_Handler,
		},
		{
			MethodName: "RequestEquivalence",
			Handler:    _Msg_RequestEquivalence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/student/tx.proto",
}
