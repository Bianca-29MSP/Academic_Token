// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package student

import (
	binary "encoding/binary"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	math "math"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_ElectiveCompletionGroup_2_list)(nil)

type _ElectiveCompletionGroup_2_list struct {
	list *[]string
}

func (x *_ElectiveCompletionGroup_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ElectiveCompletionGroup_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ElectiveCompletionGroup_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ElectiveCompletionGroup_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ElectiveCompletionGroup_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ElectiveCompletionGroup at list field CompletedSubjects as it is not of Message kind"))
}

func (x *_ElectiveCompletionGroup_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ElectiveCompletionGroup_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ElectiveCompletionGroup_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ElectiveCompletionGroup                   protoreflect.MessageDescriptor
	fd_ElectiveCompletionGroup_groupId           protoreflect.FieldDescriptor
	fd_ElectiveCompletionGroup_completedSubjects protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_student_student_academic_tree_proto_init()
	md_ElectiveCompletionGroup = File_academictoken_student_student_academic_tree_proto.Messages().ByName("ElectiveCompletionGroup")
	fd_ElectiveCompletionGroup_groupId = md_ElectiveCompletionGroup.Fields().ByName("groupId")
	fd_ElectiveCompletionGroup_completedSubjects = md_ElectiveCompletionGroup.Fields().ByName("completedSubjects")
}

var _ protoreflect.Message = (*fastReflection_ElectiveCompletionGroup)(nil)

type fastReflection_ElectiveCompletionGroup ElectiveCompletionGroup

func (x *ElectiveCompletionGroup) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ElectiveCompletionGroup)(x)
}

func (x *ElectiveCompletionGroup) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_student_student_academic_tree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ElectiveCompletionGroup_messageType fastReflection_ElectiveCompletionGroup_messageType
var _ protoreflect.MessageType = fastReflection_ElectiveCompletionGroup_messageType{}

type fastReflection_ElectiveCompletionGroup_messageType struct{}

func (x fastReflection_ElectiveCompletionGroup_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ElectiveCompletionGroup)(nil)
}
func (x fastReflection_ElectiveCompletionGroup_messageType) New() protoreflect.Message {
	return new(fastReflection_ElectiveCompletionGroup)
}
func (x fastReflection_ElectiveCompletionGroup_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ElectiveCompletionGroup
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ElectiveCompletionGroup) Descriptor() protoreflect.MessageDescriptor {
	return md_ElectiveCompletionGroup
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ElectiveCompletionGroup) Type() protoreflect.MessageType {
	return _fastReflection_ElectiveCompletionGroup_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ElectiveCompletionGroup) New() protoreflect.Message {
	return new(fastReflection_ElectiveCompletionGroup)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ElectiveCompletionGroup) Interface() protoreflect.ProtoMessage {
	return (*ElectiveCompletionGroup)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ElectiveCompletionGroup) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.GroupId != "" {
		value := protoreflect.ValueOfString(x.GroupId)
		if !f(fd_ElectiveCompletionGroup_groupId, value) {
			return
		}
	}
	if len(x.CompletedSubjects) != 0 {
		value := protoreflect.ValueOfList(&_ElectiveCompletionGroup_2_list{list: &x.CompletedSubjects})
		if !f(fd_ElectiveCompletionGroup_completedSubjects, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ElectiveCompletionGroup) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.student.ElectiveCompletionGroup.groupId":
		return x.GroupId != ""
	case "academictoken.student.ElectiveCompletionGroup.completedSubjects":
		return len(x.CompletedSubjects) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.ElectiveCompletionGroup"))
		}
		panic(fmt.Errorf("message academictoken.student.ElectiveCompletionGroup does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ElectiveCompletionGroup) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.student.ElectiveCompletionGroup.groupId":
		x.GroupId = ""
	case "academictoken.student.ElectiveCompletionGroup.completedSubjects":
		x.CompletedSubjects = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.ElectiveCompletionGroup"))
		}
		panic(fmt.Errorf("message academictoken.student.ElectiveCompletionGroup does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ElectiveCompletionGroup) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.student.ElectiveCompletionGroup.groupId":
		value := x.GroupId
		return protoreflect.ValueOfString(value)
	case "academictoken.student.ElectiveCompletionGroup.completedSubjects":
		if len(x.CompletedSubjects) == 0 {
			return protoreflect.ValueOfList(&_ElectiveCompletionGroup_2_list{})
		}
		listValue := &_ElectiveCompletionGroup_2_list{list: &x.CompletedSubjects}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.ElectiveCompletionGroup"))
		}
		panic(fmt.Errorf("message academictoken.student.ElectiveCompletionGroup does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ElectiveCompletionGroup) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.student.ElectiveCompletionGroup.groupId":
		x.GroupId = value.Interface().(string)
	case "academictoken.student.ElectiveCompletionGroup.completedSubjects":
		lv := value.List()
		clv := lv.(*_ElectiveCompletionGroup_2_list)
		x.CompletedSubjects = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.ElectiveCompletionGroup"))
		}
		panic(fmt.Errorf("message academictoken.student.ElectiveCompletionGroup does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ElectiveCompletionGroup) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.student.ElectiveCompletionGroup.completedSubjects":
		if x.CompletedSubjects == nil {
			x.CompletedSubjects = []string{}
		}
		value := &_ElectiveCompletionGroup_2_list{list: &x.CompletedSubjects}
		return protoreflect.ValueOfList(value)
	case "academictoken.student.ElectiveCompletionGroup.groupId":
		panic(fmt.Errorf("field groupId of message academictoken.student.ElectiveCompletionGroup is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.ElectiveCompletionGroup"))
		}
		panic(fmt.Errorf("message academictoken.student.ElectiveCompletionGroup does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ElectiveCompletionGroup) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.student.ElectiveCompletionGroup.groupId":
		return protoreflect.ValueOfString("")
	case "academictoken.student.ElectiveCompletionGroup.completedSubjects":
		list := []string{}
		return protoreflect.ValueOfList(&_ElectiveCompletionGroup_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.ElectiveCompletionGroup"))
		}
		panic(fmt.Errorf("message academictoken.student.ElectiveCompletionGroup does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ElectiveCompletionGroup) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.student.ElectiveCompletionGroup", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ElectiveCompletionGroup) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ElectiveCompletionGroup) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ElectiveCompletionGroup) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ElectiveCompletionGroup) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ElectiveCompletionGroup)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.GroupId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.CompletedSubjects) > 0 {
			for _, s := range x.CompletedSubjects {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ElectiveCompletionGroup)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.CompletedSubjects) > 0 {
			for iNdEx := len(x.CompletedSubjects) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.CompletedSubjects[iNdEx])
				copy(dAtA[i:], x.CompletedSubjects[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CompletedSubjects[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.GroupId) > 0 {
			i -= len(x.GroupId)
			copy(dAtA[i:], x.GroupId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GroupId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ElectiveCompletionGroup)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ElectiveCompletionGroup: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ElectiveCompletionGroup: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GroupId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CompletedSubjects", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CompletedSubjects = append(x.CompletedSubjects, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_StudentAcademicTree_9_list)(nil)

type _StudentAcademicTree_9_list struct {
	list *[]string
}

func (x *_StudentAcademicTree_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StudentAcademicTree_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_StudentAcademicTree_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_StudentAcademicTree_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_StudentAcademicTree_9_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message StudentAcademicTree at list field CompletedTokens as it is not of Message kind"))
}

func (x *_StudentAcademicTree_9_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_StudentAcademicTree_9_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_StudentAcademicTree_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StudentAcademicTree_10_list)(nil)

type _StudentAcademicTree_10_list struct {
	list *[]string
}

func (x *_StudentAcademicTree_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StudentAcademicTree_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_StudentAcademicTree_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_StudentAcademicTree_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_StudentAcademicTree_10_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message StudentAcademicTree at list field InProgressTokens as it is not of Message kind"))
}

func (x *_StudentAcademicTree_10_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_StudentAcademicTree_10_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_StudentAcademicTree_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StudentAcademicTree_11_list)(nil)

type _StudentAcademicTree_11_list struct {
	list *[]string
}

func (x *_StudentAcademicTree_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StudentAcademicTree_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_StudentAcademicTree_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_StudentAcademicTree_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_StudentAcademicTree_11_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message StudentAcademicTree at list field AvailableTokens as it is not of Message kind"))
}

func (x *_StudentAcademicTree_11_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_StudentAcademicTree_11_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_StudentAcademicTree_11_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StudentAcademicTree_14_list)(nil)

type _StudentAcademicTree_14_list struct {
	list *[]string
}

func (x *_StudentAcademicTree_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StudentAcademicTree_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_StudentAcademicTree_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_StudentAcademicTree_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_StudentAcademicTree_14_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message StudentAcademicTree at list field TransferredSubjects as it is not of Message kind"))
}

func (x *_StudentAcademicTree_14_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_StudentAcademicTree_14_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_StudentAcademicTree_14_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StudentAcademicTree_15_list)(nil)

type _StudentAcademicTree_15_list struct {
	list *[]*ElectiveCompletionGroup
}

func (x *_StudentAcademicTree_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StudentAcademicTree_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_StudentAcademicTree_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ElectiveCompletionGroup)
	(*x.list)[i] = concreteValue
}

func (x *_StudentAcademicTree_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ElectiveCompletionGroup)
	*x.list = append(*x.list, concreteValue)
}

func (x *_StudentAcademicTree_15_list) AppendMutable() protoreflect.Value {
	v := new(ElectiveCompletionGroup)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StudentAcademicTree_15_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_StudentAcademicTree_15_list) NewElement() protoreflect.Value {
	v := new(ElectiveCompletionGroup)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StudentAcademicTree_15_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_StudentAcademicTree_16_list)(nil)

type _StudentAcademicTree_16_list struct {
	list *[]*EquivalenceRequest
}

func (x *_StudentAcademicTree_16_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_StudentAcademicTree_16_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_StudentAcademicTree_16_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EquivalenceRequest)
	(*x.list)[i] = concreteValue
}

func (x *_StudentAcademicTree_16_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EquivalenceRequest)
	*x.list = append(*x.list, concreteValue)
}

func (x *_StudentAcademicTree_16_list) AppendMutable() protoreflect.Value {
	v := new(EquivalenceRequest)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StudentAcademicTree_16_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_StudentAcademicTree_16_list) NewElement() protoreflect.Value {
	v := new(EquivalenceRequest)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_StudentAcademicTree_16_list) IsValid() bool {
	return x.list != nil
}

var (
	md_StudentAcademicTree                     protoreflect.MessageDescriptor
	fd_StudentAcademicTree_index               protoreflect.FieldDescriptor
	fd_StudentAcademicTree_student             protoreflect.FieldDescriptor
	fd_StudentAcademicTree_institution         protoreflect.FieldDescriptor
	fd_StudentAcademicTree_courseId            protoreflect.FieldDescriptor
	fd_StudentAcademicTree_curriculumVersion   protoreflect.FieldDescriptor
	fd_StudentAcademicTree_totalCredits        protoreflect.FieldDescriptor
	fd_StudentAcademicTree_totalCompletedHours protoreflect.FieldDescriptor
	fd_StudentAcademicTree_coefficientGpa      protoreflect.FieldDescriptor
	fd_StudentAcademicTree_completedTokens     protoreflect.FieldDescriptor
	fd_StudentAcademicTree_inProgressTokens    protoreflect.FieldDescriptor
	fd_StudentAcademicTree_availableTokens     protoreflect.FieldDescriptor
	fd_StudentAcademicTree_academicProgress    protoreflect.FieldDescriptor
	fd_StudentAcademicTree_graduationStatus    protoreflect.FieldDescriptor
	fd_StudentAcademicTree_transferredSubjects protoreflect.FieldDescriptor
	fd_StudentAcademicTree_completedElectives  protoreflect.FieldDescriptor
	fd_StudentAcademicTree_equivalenceRequests protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_student_student_academic_tree_proto_init()
	md_StudentAcademicTree = File_academictoken_student_student_academic_tree_proto.Messages().ByName("StudentAcademicTree")
	fd_StudentAcademicTree_index = md_StudentAcademicTree.Fields().ByName("index")
	fd_StudentAcademicTree_student = md_StudentAcademicTree.Fields().ByName("student")
	fd_StudentAcademicTree_institution = md_StudentAcademicTree.Fields().ByName("institution")
	fd_StudentAcademicTree_courseId = md_StudentAcademicTree.Fields().ByName("courseId")
	fd_StudentAcademicTree_curriculumVersion = md_StudentAcademicTree.Fields().ByName("curriculumVersion")
	fd_StudentAcademicTree_totalCredits = md_StudentAcademicTree.Fields().ByName("totalCredits")
	fd_StudentAcademicTree_totalCompletedHours = md_StudentAcademicTree.Fields().ByName("totalCompletedHours")
	fd_StudentAcademicTree_coefficientGpa = md_StudentAcademicTree.Fields().ByName("coefficientGpa")
	fd_StudentAcademicTree_completedTokens = md_StudentAcademicTree.Fields().ByName("completedTokens")
	fd_StudentAcademicTree_inProgressTokens = md_StudentAcademicTree.Fields().ByName("inProgressTokens")
	fd_StudentAcademicTree_availableTokens = md_StudentAcademicTree.Fields().ByName("availableTokens")
	fd_StudentAcademicTree_academicProgress = md_StudentAcademicTree.Fields().ByName("academicProgress")
	fd_StudentAcademicTree_graduationStatus = md_StudentAcademicTree.Fields().ByName("graduationStatus")
	fd_StudentAcademicTree_transferredSubjects = md_StudentAcademicTree.Fields().ByName("transferredSubjects")
	fd_StudentAcademicTree_completedElectives = md_StudentAcademicTree.Fields().ByName("completedElectives")
	fd_StudentAcademicTree_equivalenceRequests = md_StudentAcademicTree.Fields().ByName("equivalenceRequests")
}

var _ protoreflect.Message = (*fastReflection_StudentAcademicTree)(nil)

type fastReflection_StudentAcademicTree StudentAcademicTree

func (x *StudentAcademicTree) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StudentAcademicTree)(x)
}

func (x *StudentAcademicTree) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_student_student_academic_tree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StudentAcademicTree_messageType fastReflection_StudentAcademicTree_messageType
var _ protoreflect.MessageType = fastReflection_StudentAcademicTree_messageType{}

type fastReflection_StudentAcademicTree_messageType struct{}

func (x fastReflection_StudentAcademicTree_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StudentAcademicTree)(nil)
}
func (x fastReflection_StudentAcademicTree_messageType) New() protoreflect.Message {
	return new(fastReflection_StudentAcademicTree)
}
func (x fastReflection_StudentAcademicTree_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StudentAcademicTree
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StudentAcademicTree) Descriptor() protoreflect.MessageDescriptor {
	return md_StudentAcademicTree
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StudentAcademicTree) Type() protoreflect.MessageType {
	return _fastReflection_StudentAcademicTree_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StudentAcademicTree) New() protoreflect.Message {
	return new(fastReflection_StudentAcademicTree)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StudentAcademicTree) Interface() protoreflect.ProtoMessage {
	return (*StudentAcademicTree)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StudentAcademicTree) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_StudentAcademicTree_index, value) {
			return
		}
	}
	if x.Student != "" {
		value := protoreflect.ValueOfString(x.Student)
		if !f(fd_StudentAcademicTree_student, value) {
			return
		}
	}
	if x.Institution != "" {
		value := protoreflect.ValueOfString(x.Institution)
		if !f(fd_StudentAcademicTree_institution, value) {
			return
		}
	}
	if x.CourseId != "" {
		value := protoreflect.ValueOfString(x.CourseId)
		if !f(fd_StudentAcademicTree_courseId, value) {
			return
		}
	}
	if x.CurriculumVersion != "" {
		value := protoreflect.ValueOfString(x.CurriculumVersion)
		if !f(fd_StudentAcademicTree_curriculumVersion, value) {
			return
		}
	}
	if x.TotalCredits != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalCredits)
		if !f(fd_StudentAcademicTree_totalCredits, value) {
			return
		}
	}
	if x.TotalCompletedHours != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalCompletedHours)
		if !f(fd_StudentAcademicTree_totalCompletedHours, value) {
			return
		}
	}
	if x.CoefficientGpa != float32(0) || math.Signbit(float64(x.CoefficientGpa)) {
		value := protoreflect.ValueOfFloat32(x.CoefficientGpa)
		if !f(fd_StudentAcademicTree_coefficientGpa, value) {
			return
		}
	}
	if len(x.CompletedTokens) != 0 {
		value := protoreflect.ValueOfList(&_StudentAcademicTree_9_list{list: &x.CompletedTokens})
		if !f(fd_StudentAcademicTree_completedTokens, value) {
			return
		}
	}
	if len(x.InProgressTokens) != 0 {
		value := protoreflect.ValueOfList(&_StudentAcademicTree_10_list{list: &x.InProgressTokens})
		if !f(fd_StudentAcademicTree_inProgressTokens, value) {
			return
		}
	}
	if len(x.AvailableTokens) != 0 {
		value := protoreflect.ValueOfList(&_StudentAcademicTree_11_list{list: &x.AvailableTokens})
		if !f(fd_StudentAcademicTree_availableTokens, value) {
			return
		}
	}
	if x.AcademicProgress != nil {
		value := protoreflect.ValueOfMessage(x.AcademicProgress.ProtoReflect())
		if !f(fd_StudentAcademicTree_academicProgress, value) {
			return
		}
	}
	if x.GraduationStatus != nil {
		value := protoreflect.ValueOfMessage(x.GraduationStatus.ProtoReflect())
		if !f(fd_StudentAcademicTree_graduationStatus, value) {
			return
		}
	}
	if len(x.TransferredSubjects) != 0 {
		value := protoreflect.ValueOfList(&_StudentAcademicTree_14_list{list: &x.TransferredSubjects})
		if !f(fd_StudentAcademicTree_transferredSubjects, value) {
			return
		}
	}
	if len(x.CompletedElectives) != 0 {
		value := protoreflect.ValueOfList(&_StudentAcademicTree_15_list{list: &x.CompletedElectives})
		if !f(fd_StudentAcademicTree_completedElectives, value) {
			return
		}
	}
	if len(x.EquivalenceRequests) != 0 {
		value := protoreflect.ValueOfList(&_StudentAcademicTree_16_list{list: &x.EquivalenceRequests})
		if !f(fd_StudentAcademicTree_equivalenceRequests, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StudentAcademicTree) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.student.StudentAcademicTree.index":
		return x.Index != ""
	case "academictoken.student.StudentAcademicTree.student":
		return x.Student != ""
	case "academictoken.student.StudentAcademicTree.institution":
		return x.Institution != ""
	case "academictoken.student.StudentAcademicTree.courseId":
		return x.CourseId != ""
	case "academictoken.student.StudentAcademicTree.curriculumVersion":
		return x.CurriculumVersion != ""
	case "academictoken.student.StudentAcademicTree.totalCredits":
		return x.TotalCredits != uint64(0)
	case "academictoken.student.StudentAcademicTree.totalCompletedHours":
		return x.TotalCompletedHours != uint64(0)
	case "academictoken.student.StudentAcademicTree.coefficientGpa":
		return x.CoefficientGpa != float32(0) || math.Signbit(float64(x.CoefficientGpa))
	case "academictoken.student.StudentAcademicTree.completedTokens":
		return len(x.CompletedTokens) != 0
	case "academictoken.student.StudentAcademicTree.inProgressTokens":
		return len(x.InProgressTokens) != 0
	case "academictoken.student.StudentAcademicTree.availableTokens":
		return len(x.AvailableTokens) != 0
	case "academictoken.student.StudentAcademicTree.academicProgress":
		return x.AcademicProgress != nil
	case "academictoken.student.StudentAcademicTree.graduationStatus":
		return x.GraduationStatus != nil
	case "academictoken.student.StudentAcademicTree.transferredSubjects":
		return len(x.TransferredSubjects) != 0
	case "academictoken.student.StudentAcademicTree.completedElectives":
		return len(x.CompletedElectives) != 0
	case "academictoken.student.StudentAcademicTree.equivalenceRequests":
		return len(x.EquivalenceRequests) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.StudentAcademicTree"))
		}
		panic(fmt.Errorf("message academictoken.student.StudentAcademicTree does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StudentAcademicTree) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.student.StudentAcademicTree.index":
		x.Index = ""
	case "academictoken.student.StudentAcademicTree.student":
		x.Student = ""
	case "academictoken.student.StudentAcademicTree.institution":
		x.Institution = ""
	case "academictoken.student.StudentAcademicTree.courseId":
		x.CourseId = ""
	case "academictoken.student.StudentAcademicTree.curriculumVersion":
		x.CurriculumVersion = ""
	case "academictoken.student.StudentAcademicTree.totalCredits":
		x.TotalCredits = uint64(0)
	case "academictoken.student.StudentAcademicTree.totalCompletedHours":
		x.TotalCompletedHours = uint64(0)
	case "academictoken.student.StudentAcademicTree.coefficientGpa":
		x.CoefficientGpa = float32(0)
	case "academictoken.student.StudentAcademicTree.completedTokens":
		x.CompletedTokens = nil
	case "academictoken.student.StudentAcademicTree.inProgressTokens":
		x.InProgressTokens = nil
	case "academictoken.student.StudentAcademicTree.availableTokens":
		x.AvailableTokens = nil
	case "academictoken.student.StudentAcademicTree.academicProgress":
		x.AcademicProgress = nil
	case "academictoken.student.StudentAcademicTree.graduationStatus":
		x.GraduationStatus = nil
	case "academictoken.student.StudentAcademicTree.transferredSubjects":
		x.TransferredSubjects = nil
	case "academictoken.student.StudentAcademicTree.completedElectives":
		x.CompletedElectives = nil
	case "academictoken.student.StudentAcademicTree.equivalenceRequests":
		x.EquivalenceRequests = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.StudentAcademicTree"))
		}
		panic(fmt.Errorf("message academictoken.student.StudentAcademicTree does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StudentAcademicTree) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.student.StudentAcademicTree.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "academictoken.student.StudentAcademicTree.student":
		value := x.Student
		return protoreflect.ValueOfString(value)
	case "academictoken.student.StudentAcademicTree.institution":
		value := x.Institution
		return protoreflect.ValueOfString(value)
	case "academictoken.student.StudentAcademicTree.courseId":
		value := x.CourseId
		return protoreflect.ValueOfString(value)
	case "academictoken.student.StudentAcademicTree.curriculumVersion":
		value := x.CurriculumVersion
		return protoreflect.ValueOfString(value)
	case "academictoken.student.StudentAcademicTree.totalCredits":
		value := x.TotalCredits
		return protoreflect.ValueOfUint64(value)
	case "academictoken.student.StudentAcademicTree.totalCompletedHours":
		value := x.TotalCompletedHours
		return protoreflect.ValueOfUint64(value)
	case "academictoken.student.StudentAcademicTree.coefficientGpa":
		value := x.CoefficientGpa
		return protoreflect.ValueOfFloat32(value)
	case "academictoken.student.StudentAcademicTree.completedTokens":
		if len(x.CompletedTokens) == 0 {
			return protoreflect.ValueOfList(&_StudentAcademicTree_9_list{})
		}
		listValue := &_StudentAcademicTree_9_list{list: &x.CompletedTokens}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.student.StudentAcademicTree.inProgressTokens":
		if len(x.InProgressTokens) == 0 {
			return protoreflect.ValueOfList(&_StudentAcademicTree_10_list{})
		}
		listValue := &_StudentAcademicTree_10_list{list: &x.InProgressTokens}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.student.StudentAcademicTree.availableTokens":
		if len(x.AvailableTokens) == 0 {
			return protoreflect.ValueOfList(&_StudentAcademicTree_11_list{})
		}
		listValue := &_StudentAcademicTree_11_list{list: &x.AvailableTokens}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.student.StudentAcademicTree.academicProgress":
		value := x.AcademicProgress
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.student.StudentAcademicTree.graduationStatus":
		value := x.GraduationStatus
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.student.StudentAcademicTree.transferredSubjects":
		if len(x.TransferredSubjects) == 0 {
			return protoreflect.ValueOfList(&_StudentAcademicTree_14_list{})
		}
		listValue := &_StudentAcademicTree_14_list{list: &x.TransferredSubjects}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.student.StudentAcademicTree.completedElectives":
		if len(x.CompletedElectives) == 0 {
			return protoreflect.ValueOfList(&_StudentAcademicTree_15_list{})
		}
		listValue := &_StudentAcademicTree_15_list{list: &x.CompletedElectives}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.student.StudentAcademicTree.equivalenceRequests":
		if len(x.EquivalenceRequests) == 0 {
			return protoreflect.ValueOfList(&_StudentAcademicTree_16_list{})
		}
		listValue := &_StudentAcademicTree_16_list{list: &x.EquivalenceRequests}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.StudentAcademicTree"))
		}
		panic(fmt.Errorf("message academictoken.student.StudentAcademicTree does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StudentAcademicTree) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.student.StudentAcademicTree.index":
		x.Index = value.Interface().(string)
	case "academictoken.student.StudentAcademicTree.student":
		x.Student = value.Interface().(string)
	case "academictoken.student.StudentAcademicTree.institution":
		x.Institution = value.Interface().(string)
	case "academictoken.student.StudentAcademicTree.courseId":
		x.CourseId = value.Interface().(string)
	case "academictoken.student.StudentAcademicTree.curriculumVersion":
		x.CurriculumVersion = value.Interface().(string)
	case "academictoken.student.StudentAcademicTree.totalCredits":
		x.TotalCredits = value.Uint()
	case "academictoken.student.StudentAcademicTree.totalCompletedHours":
		x.TotalCompletedHours = value.Uint()
	case "academictoken.student.StudentAcademicTree.coefficientGpa":
		x.CoefficientGpa = float32(value.Float())
	case "academictoken.student.StudentAcademicTree.completedTokens":
		lv := value.List()
		clv := lv.(*_StudentAcademicTree_9_list)
		x.CompletedTokens = *clv.list
	case "academictoken.student.StudentAcademicTree.inProgressTokens":
		lv := value.List()
		clv := lv.(*_StudentAcademicTree_10_list)
		x.InProgressTokens = *clv.list
	case "academictoken.student.StudentAcademicTree.availableTokens":
		lv := value.List()
		clv := lv.(*_StudentAcademicTree_11_list)
		x.AvailableTokens = *clv.list
	case "academictoken.student.StudentAcademicTree.academicProgress":
		x.AcademicProgress = value.Message().Interface().(*AcademicProgress)
	case "academictoken.student.StudentAcademicTree.graduationStatus":
		x.GraduationStatus = value.Message().Interface().(*GraduationStatus)
	case "academictoken.student.StudentAcademicTree.transferredSubjects":
		lv := value.List()
		clv := lv.(*_StudentAcademicTree_14_list)
		x.TransferredSubjects = *clv.list
	case "academictoken.student.StudentAcademicTree.completedElectives":
		lv := value.List()
		clv := lv.(*_StudentAcademicTree_15_list)
		x.CompletedElectives = *clv.list
	case "academictoken.student.StudentAcademicTree.equivalenceRequests":
		lv := value.List()
		clv := lv.(*_StudentAcademicTree_16_list)
		x.EquivalenceRequests = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.StudentAcademicTree"))
		}
		panic(fmt.Errorf("message academictoken.student.StudentAcademicTree does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StudentAcademicTree) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.student.StudentAcademicTree.completedTokens":
		if x.CompletedTokens == nil {
			x.CompletedTokens = []string{}
		}
		value := &_StudentAcademicTree_9_list{list: &x.CompletedTokens}
		return protoreflect.ValueOfList(value)
	case "academictoken.student.StudentAcademicTree.inProgressTokens":
		if x.InProgressTokens == nil {
			x.InProgressTokens = []string{}
		}
		value := &_StudentAcademicTree_10_list{list: &x.InProgressTokens}
		return protoreflect.ValueOfList(value)
	case "academictoken.student.StudentAcademicTree.availableTokens":
		if x.AvailableTokens == nil {
			x.AvailableTokens = []string{}
		}
		value := &_StudentAcademicTree_11_list{list: &x.AvailableTokens}
		return protoreflect.ValueOfList(value)
	case "academictoken.student.StudentAcademicTree.academicProgress":
		if x.AcademicProgress == nil {
			x.AcademicProgress = new(AcademicProgress)
		}
		return protoreflect.ValueOfMessage(x.AcademicProgress.ProtoReflect())
	case "academictoken.student.StudentAcademicTree.graduationStatus":
		if x.GraduationStatus == nil {
			x.GraduationStatus = new(GraduationStatus)
		}
		return protoreflect.ValueOfMessage(x.GraduationStatus.ProtoReflect())
	case "academictoken.student.StudentAcademicTree.transferredSubjects":
		if x.TransferredSubjects == nil {
			x.TransferredSubjects = []string{}
		}
		value := &_StudentAcademicTree_14_list{list: &x.TransferredSubjects}
		return protoreflect.ValueOfList(value)
	case "academictoken.student.StudentAcademicTree.completedElectives":
		if x.CompletedElectives == nil {
			x.CompletedElectives = []*ElectiveCompletionGroup{}
		}
		value := &_StudentAcademicTree_15_list{list: &x.CompletedElectives}
		return protoreflect.ValueOfList(value)
	case "academictoken.student.StudentAcademicTree.equivalenceRequests":
		if x.EquivalenceRequests == nil {
			x.EquivalenceRequests = []*EquivalenceRequest{}
		}
		value := &_StudentAcademicTree_16_list{list: &x.EquivalenceRequests}
		return protoreflect.ValueOfList(value)
	case "academictoken.student.StudentAcademicTree.index":
		panic(fmt.Errorf("field index of message academictoken.student.StudentAcademicTree is not mutable"))
	case "academictoken.student.StudentAcademicTree.student":
		panic(fmt.Errorf("field student of message academictoken.student.StudentAcademicTree is not mutable"))
	case "academictoken.student.StudentAcademicTree.institution":
		panic(fmt.Errorf("field institution of message academictoken.student.StudentAcademicTree is not mutable"))
	case "academictoken.student.StudentAcademicTree.courseId":
		panic(fmt.Errorf("field courseId of message academictoken.student.StudentAcademicTree is not mutable"))
	case "academictoken.student.StudentAcademicTree.curriculumVersion":
		panic(fmt.Errorf("field curriculumVersion of message academictoken.student.StudentAcademicTree is not mutable"))
	case "academictoken.student.StudentAcademicTree.totalCredits":
		panic(fmt.Errorf("field totalCredits of message academictoken.student.StudentAcademicTree is not mutable"))
	case "academictoken.student.StudentAcademicTree.totalCompletedHours":
		panic(fmt.Errorf("field totalCompletedHours of message academictoken.student.StudentAcademicTree is not mutable"))
	case "academictoken.student.StudentAcademicTree.coefficientGpa":
		panic(fmt.Errorf("field coefficientGpa of message academictoken.student.StudentAcademicTree is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.StudentAcademicTree"))
		}
		panic(fmt.Errorf("message academictoken.student.StudentAcademicTree does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StudentAcademicTree) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.student.StudentAcademicTree.index":
		return protoreflect.ValueOfString("")
	case "academictoken.student.StudentAcademicTree.student":
		return protoreflect.ValueOfString("")
	case "academictoken.student.StudentAcademicTree.institution":
		return protoreflect.ValueOfString("")
	case "academictoken.student.StudentAcademicTree.courseId":
		return protoreflect.ValueOfString("")
	case "academictoken.student.StudentAcademicTree.curriculumVersion":
		return protoreflect.ValueOfString("")
	case "academictoken.student.StudentAcademicTree.totalCredits":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.student.StudentAcademicTree.totalCompletedHours":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.student.StudentAcademicTree.coefficientGpa":
		return protoreflect.ValueOfFloat32(float32(0))
	case "academictoken.student.StudentAcademicTree.completedTokens":
		list := []string{}
		return protoreflect.ValueOfList(&_StudentAcademicTree_9_list{list: &list})
	case "academictoken.student.StudentAcademicTree.inProgressTokens":
		list := []string{}
		return protoreflect.ValueOfList(&_StudentAcademicTree_10_list{list: &list})
	case "academictoken.student.StudentAcademicTree.availableTokens":
		list := []string{}
		return protoreflect.ValueOfList(&_StudentAcademicTree_11_list{list: &list})
	case "academictoken.student.StudentAcademicTree.academicProgress":
		m := new(AcademicProgress)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.student.StudentAcademicTree.graduationStatus":
		m := new(GraduationStatus)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.student.StudentAcademicTree.transferredSubjects":
		list := []string{}
		return protoreflect.ValueOfList(&_StudentAcademicTree_14_list{list: &list})
	case "academictoken.student.StudentAcademicTree.completedElectives":
		list := []*ElectiveCompletionGroup{}
		return protoreflect.ValueOfList(&_StudentAcademicTree_15_list{list: &list})
	case "academictoken.student.StudentAcademicTree.equivalenceRequests":
		list := []*EquivalenceRequest{}
		return protoreflect.ValueOfList(&_StudentAcademicTree_16_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.student.StudentAcademicTree"))
		}
		panic(fmt.Errorf("message academictoken.student.StudentAcademicTree does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StudentAcademicTree) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.student.StudentAcademicTree", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StudentAcademicTree) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StudentAcademicTree) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StudentAcademicTree) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StudentAcademicTree) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StudentAcademicTree)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Student)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Institution)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CourseId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CurriculumVersion)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TotalCredits != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalCredits))
		}
		if x.TotalCompletedHours != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalCompletedHours))
		}
		if x.CoefficientGpa != 0 || math.Signbit(float64(x.CoefficientGpa)) {
			n += 5
		}
		if len(x.CompletedTokens) > 0 {
			for _, s := range x.CompletedTokens {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.InProgressTokens) > 0 {
			for _, s := range x.InProgressTokens {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AvailableTokens) > 0 {
			for _, s := range x.AvailableTokens {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.AcademicProgress != nil {
			l = options.Size(x.AcademicProgress)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GraduationStatus != nil {
			l = options.Size(x.GraduationStatus)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.TransferredSubjects) > 0 {
			for _, s := range x.TransferredSubjects {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CompletedElectives) > 0 {
			for _, e := range x.CompletedElectives {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.EquivalenceRequests) > 0 {
			for _, e := range x.EquivalenceRequests {
				l = options.Size(e)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StudentAcademicTree)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EquivalenceRequests) > 0 {
			for iNdEx := len(x.EquivalenceRequests) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.EquivalenceRequests[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x82
			}
		}
		if len(x.CompletedElectives) > 0 {
			for iNdEx := len(x.CompletedElectives) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CompletedElectives[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x7a
			}
		}
		if len(x.TransferredSubjects) > 0 {
			for iNdEx := len(x.TransferredSubjects) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.TransferredSubjects[iNdEx])
				copy(dAtA[i:], x.TransferredSubjects[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TransferredSubjects[iNdEx])))
				i--
				dAtA[i] = 0x72
			}
		}
		if x.GraduationStatus != nil {
			encoded, err := options.Marshal(x.GraduationStatus)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x6a
		}
		if x.AcademicProgress != nil {
			encoded, err := options.Marshal(x.AcademicProgress)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.AvailableTokens) > 0 {
			for iNdEx := len(x.AvailableTokens) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.AvailableTokens[iNdEx])
				copy(dAtA[i:], x.AvailableTokens[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AvailableTokens[iNdEx])))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.InProgressTokens) > 0 {
			for iNdEx := len(x.InProgressTokens) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.InProgressTokens[iNdEx])
				copy(dAtA[i:], x.InProgressTokens[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InProgressTokens[iNdEx])))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.CompletedTokens) > 0 {
			for iNdEx := len(x.CompletedTokens) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.CompletedTokens[iNdEx])
				copy(dAtA[i:], x.CompletedTokens[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CompletedTokens[iNdEx])))
				i--
				dAtA[i] = 0x4a
			}
		}
		if x.CoefficientGpa != 0 || math.Signbit(float64(x.CoefficientGpa)) {
			i -= 4
			binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(x.CoefficientGpa))))
			i--
			dAtA[i] = 0x45
		}
		if x.TotalCompletedHours != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalCompletedHours))
			i--
			dAtA[i] = 0x38
		}
		if x.TotalCredits != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalCredits))
			i--
			dAtA[i] = 0x30
		}
		if len(x.CurriculumVersion) > 0 {
			i -= len(x.CurriculumVersion)
			copy(dAtA[i:], x.CurriculumVersion)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CurriculumVersion)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.CourseId) > 0 {
			i -= len(x.CourseId)
			copy(dAtA[i:], x.CourseId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CourseId)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Institution) > 0 {
			i -= len(x.Institution)
			copy(dAtA[i:], x.Institution)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Institution)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Student) > 0 {
			i -= len(x.Student)
			copy(dAtA[i:], x.Student)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Student)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StudentAcademicTree)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StudentAcademicTree: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StudentAcademicTree: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Student", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Student = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Institution", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Institution = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CourseId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurriculumVersion", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurriculumVersion = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalCredits", wireType)
				}
				x.TotalCredits = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalCredits |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalCompletedHours", wireType)
				}
				x.TotalCompletedHours = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalCompletedHours |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 5 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CoefficientGpa", wireType)
				}
				var v uint32
				if (iNdEx + 4) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				x.CoefficientGpa = float32(math.Float32frombits(v))
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CompletedTokens", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CompletedTokens = append(x.CompletedTokens, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InProgressTokens", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InProgressTokens = append(x.InProgressTokens, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AvailableTokens", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AvailableTokens = append(x.AvailableTokens, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AcademicProgress", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AcademicProgress == nil {
					x.AcademicProgress = &AcademicProgress{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AcademicProgress); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GraduationStatus", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.GraduationStatus == nil {
					x.GraduationStatus = &GraduationStatus{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.GraduationStatus); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransferredSubjects", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TransferredSubjects = append(x.TransferredSubjects, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CompletedElectives", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CompletedElectives = append(x.CompletedElectives, &ElectiveCompletionGroup{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CompletedElectives[len(x.CompletedElectives)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalenceRequests", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalenceRequests = append(x.EquivalenceRequests, &EquivalenceRequest{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EquivalenceRequests[len(x.EquivalenceRequests)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: academictoken/student/student_academic_tree.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ElectiveCompletionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId           string   `protobuf:"bytes,1,opt,name=groupId,proto3" json:"groupId,omitempty"`
	CompletedSubjects []string `protobuf:"bytes,2,rep,name=completedSubjects,proto3" json:"completedSubjects,omitempty"`
}

func (x *ElectiveCompletionGroup) Reset() {
	*x = ElectiveCompletionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_student_student_academic_tree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectiveCompletionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectiveCompletionGroup) ProtoMessage() {}

// Deprecated: Use ElectiveCompletionGroup.ProtoReflect.Descriptor instead.
func (*ElectiveCompletionGroup) Descriptor() ([]byte, []int) {
	return file_academictoken_student_student_academic_tree_proto_rawDescGZIP(), []int{0}
}

func (x *ElectiveCompletionGroup) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *ElectiveCompletionGroup) GetCompletedSubjects() []string {
	if x != nil {
		return x.CompletedSubjects
	}
	return nil
}

type StudentAcademicTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index               string                     `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Student             string                     `protobuf:"bytes,2,opt,name=student,proto3" json:"student,omitempty"`
	Institution         string                     `protobuf:"bytes,3,opt,name=institution,proto3" json:"institution,omitempty"`
	CourseId            string                     `protobuf:"bytes,4,opt,name=courseId,proto3" json:"courseId,omitempty"`
	CurriculumVersion   string                     `protobuf:"bytes,5,opt,name=curriculumVersion,proto3" json:"curriculumVersion,omitempty"`
	TotalCredits        uint64                     `protobuf:"varint,6,opt,name=totalCredits,proto3" json:"totalCredits,omitempty"`
	TotalCompletedHours uint64                     `protobuf:"varint,7,opt,name=totalCompletedHours,proto3" json:"totalCompletedHours,omitempty"`
	CoefficientGpa      float32                    `protobuf:"fixed32,8,opt,name=coefficientGpa,proto3" json:"coefficientGpa,omitempty"`
	CompletedTokens     []string                   `protobuf:"bytes,9,rep,name=completedTokens,proto3" json:"completedTokens,omitempty"`
	InProgressTokens    []string                   `protobuf:"bytes,10,rep,name=inProgressTokens,proto3" json:"inProgressTokens,omitempty"`
	AvailableTokens     []string                   `protobuf:"bytes,11,rep,name=availableTokens,proto3" json:"availableTokens,omitempty"`
	AcademicProgress    *AcademicProgress          `protobuf:"bytes,12,opt,name=academicProgress,proto3" json:"academicProgress,omitempty"`
	GraduationStatus    *GraduationStatus          `protobuf:"bytes,13,opt,name=graduationStatus,proto3" json:"graduationStatus,omitempty"`
	TransferredSubjects []string                   `protobuf:"bytes,14,rep,name=transferredSubjects,proto3" json:"transferredSubjects,omitempty"`
	CompletedElectives  []*ElectiveCompletionGroup `protobuf:"bytes,15,rep,name=completedElectives,proto3" json:"completedElectives,omitempty"`
	EquivalenceRequests []*EquivalenceRequest      `protobuf:"bytes,16,rep,name=equivalenceRequests,proto3" json:"equivalenceRequests,omitempty"`
}

func (x *StudentAcademicTree) Reset() {
	*x = StudentAcademicTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_student_student_academic_tree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StudentAcademicTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentAcademicTree) ProtoMessage() {}

// Deprecated: Use StudentAcademicTree.ProtoReflect.Descriptor instead.
func (*StudentAcademicTree) Descriptor() ([]byte, []int) {
	return file_academictoken_student_student_academic_tree_proto_rawDescGZIP(), []int{1}
}

func (x *StudentAcademicTree) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *StudentAcademicTree) GetStudent() string {
	if x != nil {
		return x.Student
	}
	return ""
}

func (x *StudentAcademicTree) GetInstitution() string {
	if x != nil {
		return x.Institution
	}
	return ""
}

func (x *StudentAcademicTree) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *StudentAcademicTree) GetCurriculumVersion() string {
	if x != nil {
		return x.CurriculumVersion
	}
	return ""
}

func (x *StudentAcademicTree) GetTotalCredits() uint64 {
	if x != nil {
		return x.TotalCredits
	}
	return 0
}

func (x *StudentAcademicTree) GetTotalCompletedHours() uint64 {
	if x != nil {
		return x.TotalCompletedHours
	}
	return 0
}

func (x *StudentAcademicTree) GetCoefficientGpa() float32 {
	if x != nil {
		return x.CoefficientGpa
	}
	return 0
}

func (x *StudentAcademicTree) GetCompletedTokens() []string {
	if x != nil {
		return x.CompletedTokens
	}
	return nil
}

func (x *StudentAcademicTree) GetInProgressTokens() []string {
	if x != nil {
		return x.InProgressTokens
	}
	return nil
}

func (x *StudentAcademicTree) GetAvailableTokens() []string {
	if x != nil {
		return x.AvailableTokens
	}
	return nil
}

func (x *StudentAcademicTree) GetAcademicProgress() *AcademicProgress {
	if x != nil {
		return x.AcademicProgress
	}
	return nil
}

func (x *StudentAcademicTree) GetGraduationStatus() *GraduationStatus {
	if x != nil {
		return x.GraduationStatus
	}
	return nil
}

func (x *StudentAcademicTree) GetTransferredSubjects() []string {
	if x != nil {
		return x.TransferredSubjects
	}
	return nil
}

func (x *StudentAcademicTree) GetCompletedElectives() []*ElectiveCompletionGroup {
	if x != nil {
		return x.CompletedElectives
	}
	return nil
}

func (x *StudentAcademicTree) GetEquivalenceRequests() []*EquivalenceRequest {
	if x != nil {
		return x.EquivalenceRequests
	}
	return nil
}

var File_academictoken_student_student_academic_tree_proto protoreflect.FileDescriptor

var file_academictoken_student_student_academic_tree_proto_rawDesc = []byte{
	0x0a, 0x31, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x1a, 0x2d, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2f, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x17, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xc8, 0x06, 0x0a,
	0x13, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x63, 0x75, 0x6c, 0x75, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x70, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x70, 0x61, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x53,
	0x0a, 0x10, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x10, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x13, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x42, 0xd3, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x42, 0x18, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x27, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x58,
	0xaa, 0x02, 0x15, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0xca, 0x02, 0x15, 0x41, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0xe2, 0x02, 0x21, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3a, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_academictoken_student_student_academic_tree_proto_rawDescOnce sync.Once
	file_academictoken_student_student_academic_tree_proto_rawDescData = file_academictoken_student_student_academic_tree_proto_rawDesc
)

func file_academictoken_student_student_academic_tree_proto_rawDescGZIP() []byte {
	file_academictoken_student_student_academic_tree_proto_rawDescOnce.Do(func() {
		file_academictoken_student_student_academic_tree_proto_rawDescData = protoimpl.X.CompressGZIP(file_academictoken_student_student_academic_tree_proto_rawDescData)
	})
	return file_academictoken_student_student_academic_tree_proto_rawDescData
}

var file_academictoken_student_student_academic_tree_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_academictoken_student_student_academic_tree_proto_goTypes = []interface{}{
	(*ElectiveCompletionGroup)(nil), // 0: academictoken.student.ElectiveCompletionGroup
	(*StudentAcademicTree)(nil),     // 1: academictoken.student.StudentAcademicTree
	(*AcademicProgress)(nil),        // 2: academictoken.student.AcademicProgress
	(*GraduationStatus)(nil),        // 3: academictoken.student.GraduationStatus
	(*EquivalenceRequest)(nil),      // 4: academictoken.student.EquivalenceRequest
}
var file_academictoken_student_student_academic_tree_proto_depIdxs = []int32{
	2, // 0: academictoken.student.StudentAcademicTree.academicProgress:type_name -> academictoken.student.AcademicProgress
	3, // 1: academictoken.student.StudentAcademicTree.graduationStatus:type_name -> academictoken.student.GraduationStatus
	0, // 2: academictoken.student.StudentAcademicTree.completedElectives:type_name -> academictoken.student.ElectiveCompletionGroup
	4, // 3: academictoken.student.StudentAcademicTree.equivalenceRequests:type_name -> academictoken.student.EquivalenceRequest
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_academictoken_student_student_academic_tree_proto_init() }
func file_academictoken_student_student_academic_tree_proto_init() {
	if File_academictoken_student_student_academic_tree_proto != nil {
		return
	}
	file_academictoken_student_academic_progress_proto_init()
	file_academictoken_student_graduation_status_proto_init()
	file_academictoken_student_equivalence_request_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_academictoken_student_student_academic_tree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectiveCompletionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_student_student_academic_tree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StudentAcademicTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_academictoken_student_student_academic_tree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_academictoken_student_student_academic_tree_proto_goTypes,
		DependencyIndexes: file_academictoken_student_student_academic_tree_proto_depIdxs,
		MessageInfos:      file_academictoken_student_student_academic_tree_proto_msgTypes,
	}.Build()
	File_academictoken_student_student_academic_tree_proto = out.File
	file_academictoken_student_student_academic_tree_proto_rawDesc = nil
	file_academictoken_student_student_academic_tree_proto_goTypes = nil
	file_academictoken_student_student_academic_tree_proto_depIdxs = nil
}
