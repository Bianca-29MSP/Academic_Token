// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: academictoken/subject/query.proto

package subject

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                      = "/academictoken.subject.Query/Params"
	Query_GetSubject_FullMethodName                  = "/academictoken.subject.Query/GetSubject"
	Query_GetSubjectFull_FullMethodName              = "/academictoken.subject.Query/GetSubjectFull"
	Query_GetSubjectWithPrerequisites_FullMethodName = "/academictoken.subject.Query/GetSubjectWithPrerequisites"
	Query_ListSubjects_FullMethodName                = "/academictoken.subject.Query/ListSubjects"
	Query_SubjectsByCourse_FullMethodName            = "/academictoken.subject.Query/SubjectsByCourse"
	Query_SubjectsByInstitution_FullMethodName       = "/academictoken.subject.Query/SubjectsByInstitution"
	Query_CheckPrerequisites_FullMethodName          = "/academictoken.subject.Query/CheckPrerequisites"
	Query_CheckEquivalence_FullMethodName            = "/academictoken.subject.Query/CheckEquivalence"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetSubject queries a subject by its ID
	GetSubject(ctx context.Context, in *QueryGetSubjectRequest, opts ...grpc.CallOption) (*QueryGetSubjectResponse, error)
	// GetSubjectFull queries a subject with full content from IPFS
	GetSubjectFull(ctx context.Context, in *QueryGetSubjectFullRequest, opts ...grpc.CallOption) (*QueryGetSubjectFullResponse, error)
	// GetSubjectWithPrerequisites queries a subject with its prerequisite groups
	GetSubjectWithPrerequisites(ctx context.Context, in *QueryGetSubjectWithPrerequisitesRequest, opts ...grpc.CallOption) (*QueryGetSubjectWithPrerequisitesResponse, error)
	// ListSubjects lists all subjects with pagination
	ListSubjects(ctx context.Context, in *QueryListSubjectsRequest, opts ...grpc.CallOption) (*QueryListSubjectsResponse, error)
	// SubjectsByCourse lists all subjects for a specific course
	SubjectsByCourse(ctx context.Context, in *QuerySubjectsByCourseRequest, opts ...grpc.CallOption) (*QuerySubjectsByCourseResponse, error)
	// SubjectsByInstitution lists all subjects for a specific institution
	SubjectsByInstitution(ctx context.Context, in *QuerySubjectsByInstitutionRequest, opts ...grpc.CallOption) (*QuerySubjectsByInstitutionResponse, error)
	// CheckPrerequisites checks if a student meets the prerequisites for a subject via CosmWasm contract
	CheckPrerequisites(ctx context.Context, in *QueryCheckPrerequisitesRequest, opts ...grpc.CallOption) (*QueryCheckPrerequisitesResponse, error)
	// CheckEquivalence checks equivalence between two subjects via CosmWasm contract
	CheckEquivalence(ctx context.Context, in *QueryCheckEquivalenceRequest, opts ...grpc.CallOption) (*QueryCheckEquivalenceResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSubject(ctx context.Context, in *QueryGetSubjectRequest, opts ...grpc.CallOption) (*QueryGetSubjectResponse, error) {
	out := new(QueryGetSubjectResponse)
	err := c.cc.Invoke(ctx, Query_GetSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSubjectFull(ctx context.Context, in *QueryGetSubjectFullRequest, opts ...grpc.CallOption) (*QueryGetSubjectFullResponse, error) {
	out := new(QueryGetSubjectFullResponse)
	err := c.cc.Invoke(ctx, Query_GetSubjectFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSubjectWithPrerequisites(ctx context.Context, in *QueryGetSubjectWithPrerequisitesRequest, opts ...grpc.CallOption) (*QueryGetSubjectWithPrerequisitesResponse, error) {
	out := new(QueryGetSubjectWithPrerequisitesResponse)
	err := c.cc.Invoke(ctx, Query_GetSubjectWithPrerequisites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListSubjects(ctx context.Context, in *QueryListSubjectsRequest, opts ...grpc.CallOption) (*QueryListSubjectsResponse, error) {
	out := new(QueryListSubjectsResponse)
	err := c.cc.Invoke(ctx, Query_ListSubjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectsByCourse(ctx context.Context, in *QuerySubjectsByCourseRequest, opts ...grpc.CallOption) (*QuerySubjectsByCourseResponse, error) {
	out := new(QuerySubjectsByCourseResponse)
	err := c.cc.Invoke(ctx, Query_SubjectsByCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectsByInstitution(ctx context.Context, in *QuerySubjectsByInstitutionRequest, opts ...grpc.CallOption) (*QuerySubjectsByInstitutionResponse, error) {
	out := new(QuerySubjectsByInstitutionResponse)
	err := c.cc.Invoke(ctx, Query_SubjectsByInstitution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckPrerequisites(ctx context.Context, in *QueryCheckPrerequisitesRequest, opts ...grpc.CallOption) (*QueryCheckPrerequisitesResponse, error) {
	out := new(QueryCheckPrerequisitesResponse)
	err := c.cc.Invoke(ctx, Query_CheckPrerequisites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckEquivalence(ctx context.Context, in *QueryCheckEquivalenceRequest, opts ...grpc.CallOption) (*QueryCheckEquivalenceResponse, error) {
	out := new(QueryCheckEquivalenceResponse)
	err := c.cc.Invoke(ctx, Query_CheckEquivalence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetSubject queries a subject by its ID
	GetSubject(context.Context, *QueryGetSubjectRequest) (*QueryGetSubjectResponse, error)
	// GetSubjectFull queries a subject with full content from IPFS
	GetSubjectFull(context.Context, *QueryGetSubjectFullRequest) (*QueryGetSubjectFullResponse, error)
	// GetSubjectWithPrerequisites queries a subject with its prerequisite groups
	GetSubjectWithPrerequisites(context.Context, *QueryGetSubjectWithPrerequisitesRequest) (*QueryGetSubjectWithPrerequisitesResponse, error)
	// ListSubjects lists all subjects with pagination
	ListSubjects(context.Context, *QueryListSubjectsRequest) (*QueryListSubjectsResponse, error)
	// SubjectsByCourse lists all subjects for a specific course
	SubjectsByCourse(context.Context, *QuerySubjectsByCourseRequest) (*QuerySubjectsByCourseResponse, error)
	// SubjectsByInstitution lists all subjects for a specific institution
	SubjectsByInstitution(context.Context, *QuerySubjectsByInstitutionRequest) (*QuerySubjectsByInstitutionResponse, error)
	// CheckPrerequisites checks if a student meets the prerequisites for a subject via CosmWasm contract
	CheckPrerequisites(context.Context, *QueryCheckPrerequisitesRequest) (*QueryCheckPrerequisitesResponse, error)
	// CheckEquivalence checks equivalence between two subjects via CosmWasm contract
	CheckEquivalence(context.Context, *QueryCheckEquivalenceRequest) (*QueryCheckEquivalenceResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) GetSubject(context.Context, *QueryGetSubjectRequest) (*QueryGetSubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubject not implemented")
}
func (UnimplementedQueryServer) GetSubjectFull(context.Context, *QueryGetSubjectFullRequest) (*QueryGetSubjectFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectFull not implemented")
}
func (UnimplementedQueryServer) GetSubjectWithPrerequisites(context.Context, *QueryGetSubjectWithPrerequisitesRequest) (*QueryGetSubjectWithPrerequisitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjectWithPrerequisites not implemented")
}
func (UnimplementedQueryServer) ListSubjects(context.Context, *QueryListSubjectsRequest) (*QueryListSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubjects not implemented")
}
func (UnimplementedQueryServer) SubjectsByCourse(context.Context, *QuerySubjectsByCourseRequest) (*QuerySubjectsByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectsByCourse not implemented")
}
func (UnimplementedQueryServer) SubjectsByInstitution(context.Context, *QuerySubjectsByInstitutionRequest) (*QuerySubjectsByInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectsByInstitution not implemented")
}
func (UnimplementedQueryServer) CheckPrerequisites(context.Context, *QueryCheckPrerequisitesRequest) (*QueryCheckPrerequisitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPrerequisites not implemented")
}
func (UnimplementedQueryServer) CheckEquivalence(context.Context, *QueryCheckEquivalenceRequest) (*QueryCheckEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEquivalence not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSubject(ctx, req.(*QueryGetSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSubjectFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubjectFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSubjectFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetSubjectFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSubjectFull(ctx, req.(*QueryGetSubjectFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSubjectWithPrerequisites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubjectWithPrerequisitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSubjectWithPrerequisites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetSubjectWithPrerequisites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSubjectWithPrerequisites(ctx, req.(*QueryGetSubjectWithPrerequisitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListSubjects(ctx, req.(*QueryListSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectsByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubjectsByCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectsByCourse(ctx, req.(*QuerySubjectsByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectsByInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectsByInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectsByInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubjectsByInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectsByInstitution(ctx, req.(*QuerySubjectsByInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckPrerequisites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckPrerequisitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckPrerequisites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CheckPrerequisites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckPrerequisites(ctx, req.(*QueryCheckPrerequisitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckEquivalenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CheckEquivalence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckEquivalence(ctx, req.(*QueryCheckEquivalenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.subject.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetSubject",
			Handler:    _Query_GetSubject_Handler,
		},
		{
			MethodName: "GetSubjectFull",
			Handler:    _Query_GetSubjectFull_Handler,
		},
		{
			MethodName: "GetSubjectWithPrerequisites",
			Handler:    _Query_GetSubjectWithPrerequisites_Handler,
		},
		{
			MethodName: "ListSubjects",
			Handler:    _Query_ListSubjects_Handler,
		},
		{
			MethodName: "SubjectsByCourse",
			Handler:    _Query_SubjectsByCourse_Handler,
		},
		{
			MethodName: "SubjectsByInstitution",
			Handler:    _Query_SubjectsByInstitution_Handler,
		},
		{
			MethodName: "CheckPrerequisites",
			Handler:    _Query_CheckPrerequisites_Handler,
		},
		{
			MethodName: "CheckEquivalence",
			Handler:    _Query_CheckEquivalence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/subject/query.proto",
}
