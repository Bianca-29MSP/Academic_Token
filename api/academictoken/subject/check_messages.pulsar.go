// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package subject

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_SubjectWithPrerequisites_2_list)(nil)

type _SubjectWithPrerequisites_2_list struct {
	list *[]*PrerequisiteGroup
}

func (x *_SubjectWithPrerequisites_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SubjectWithPrerequisites_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SubjectWithPrerequisites_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PrerequisiteGroup)
	(*x.list)[i] = concreteValue
}

func (x *_SubjectWithPrerequisites_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PrerequisiteGroup)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SubjectWithPrerequisites_2_list) AppendMutable() protoreflect.Value {
	v := new(PrerequisiteGroup)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SubjectWithPrerequisites_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SubjectWithPrerequisites_2_list) NewElement() protoreflect.Value {
	v := new(PrerequisiteGroup)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SubjectWithPrerequisites_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SubjectWithPrerequisites                     protoreflect.MessageDescriptor
	fd_SubjectWithPrerequisites_subject             protoreflect.FieldDescriptor
	fd_SubjectWithPrerequisites_prerequisite_groups protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_subject_check_messages_proto_init()
	md_SubjectWithPrerequisites = File_academictoken_subject_check_messages_proto.Messages().ByName("SubjectWithPrerequisites")
	fd_SubjectWithPrerequisites_subject = md_SubjectWithPrerequisites.Fields().ByName("subject")
	fd_SubjectWithPrerequisites_prerequisite_groups = md_SubjectWithPrerequisites.Fields().ByName("prerequisite_groups")
}

var _ protoreflect.Message = (*fastReflection_SubjectWithPrerequisites)(nil)

type fastReflection_SubjectWithPrerequisites SubjectWithPrerequisites

func (x *SubjectWithPrerequisites) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SubjectWithPrerequisites)(x)
}

func (x *SubjectWithPrerequisites) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_subject_check_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SubjectWithPrerequisites_messageType fastReflection_SubjectWithPrerequisites_messageType
var _ protoreflect.MessageType = fastReflection_SubjectWithPrerequisites_messageType{}

type fastReflection_SubjectWithPrerequisites_messageType struct{}

func (x fastReflection_SubjectWithPrerequisites_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SubjectWithPrerequisites)(nil)
}
func (x fastReflection_SubjectWithPrerequisites_messageType) New() protoreflect.Message {
	return new(fastReflection_SubjectWithPrerequisites)
}
func (x fastReflection_SubjectWithPrerequisites_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SubjectWithPrerequisites
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SubjectWithPrerequisites) Descriptor() protoreflect.MessageDescriptor {
	return md_SubjectWithPrerequisites
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SubjectWithPrerequisites) Type() protoreflect.MessageType {
	return _fastReflection_SubjectWithPrerequisites_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SubjectWithPrerequisites) New() protoreflect.Message {
	return new(fastReflection_SubjectWithPrerequisites)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SubjectWithPrerequisites) Interface() protoreflect.ProtoMessage {
	return (*SubjectWithPrerequisites)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SubjectWithPrerequisites) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Subject != nil {
		value := protoreflect.ValueOfMessage(x.Subject.ProtoReflect())
		if !f(fd_SubjectWithPrerequisites_subject, value) {
			return
		}
	}
	if len(x.PrerequisiteGroups) != 0 {
		value := protoreflect.ValueOfList(&_SubjectWithPrerequisites_2_list{list: &x.PrerequisiteGroups})
		if !f(fd_SubjectWithPrerequisites_prerequisite_groups, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SubjectWithPrerequisites) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.subject.SubjectWithPrerequisites.subject":
		return x.Subject != nil
	case "academictoken.subject.SubjectWithPrerequisites.prerequisite_groups":
		return len(x.PrerequisiteGroups) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.SubjectWithPrerequisites"))
		}
		panic(fmt.Errorf("message academictoken.subject.SubjectWithPrerequisites does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubjectWithPrerequisites) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.subject.SubjectWithPrerequisites.subject":
		x.Subject = nil
	case "academictoken.subject.SubjectWithPrerequisites.prerequisite_groups":
		x.PrerequisiteGroups = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.SubjectWithPrerequisites"))
		}
		panic(fmt.Errorf("message academictoken.subject.SubjectWithPrerequisites does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SubjectWithPrerequisites) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.subject.SubjectWithPrerequisites.subject":
		value := x.Subject
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.subject.SubjectWithPrerequisites.prerequisite_groups":
		if len(x.PrerequisiteGroups) == 0 {
			return protoreflect.ValueOfList(&_SubjectWithPrerequisites_2_list{})
		}
		listValue := &_SubjectWithPrerequisites_2_list{list: &x.PrerequisiteGroups}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.SubjectWithPrerequisites"))
		}
		panic(fmt.Errorf("message academictoken.subject.SubjectWithPrerequisites does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubjectWithPrerequisites) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.subject.SubjectWithPrerequisites.subject":
		x.Subject = value.Message().Interface().(*SubjectContent)
	case "academictoken.subject.SubjectWithPrerequisites.prerequisite_groups":
		lv := value.List()
		clv := lv.(*_SubjectWithPrerequisites_2_list)
		x.PrerequisiteGroups = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.SubjectWithPrerequisites"))
		}
		panic(fmt.Errorf("message academictoken.subject.SubjectWithPrerequisites does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubjectWithPrerequisites) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.SubjectWithPrerequisites.subject":
		if x.Subject == nil {
			x.Subject = new(SubjectContent)
		}
		return protoreflect.ValueOfMessage(x.Subject.ProtoReflect())
	case "academictoken.subject.SubjectWithPrerequisites.prerequisite_groups":
		if x.PrerequisiteGroups == nil {
			x.PrerequisiteGroups = []*PrerequisiteGroup{}
		}
		value := &_SubjectWithPrerequisites_2_list{list: &x.PrerequisiteGroups}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.SubjectWithPrerequisites"))
		}
		panic(fmt.Errorf("message academictoken.subject.SubjectWithPrerequisites does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SubjectWithPrerequisites) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.SubjectWithPrerequisites.subject":
		m := new(SubjectContent)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.subject.SubjectWithPrerequisites.prerequisite_groups":
		list := []*PrerequisiteGroup{}
		return protoreflect.ValueOfList(&_SubjectWithPrerequisites_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.SubjectWithPrerequisites"))
		}
		panic(fmt.Errorf("message academictoken.subject.SubjectWithPrerequisites does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SubjectWithPrerequisites) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.subject.SubjectWithPrerequisites", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SubjectWithPrerequisites) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SubjectWithPrerequisites) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SubjectWithPrerequisites) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SubjectWithPrerequisites) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SubjectWithPrerequisites)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Subject != nil {
			l = options.Size(x.Subject)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PrerequisiteGroups) > 0 {
			for _, e := range x.PrerequisiteGroups {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SubjectWithPrerequisites)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PrerequisiteGroups) > 0 {
			for iNdEx := len(x.PrerequisiteGroups) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PrerequisiteGroups[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Subject != nil {
			encoded, err := options.Marshal(x.Subject)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SubjectWithPrerequisites)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubjectWithPrerequisites: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SubjectWithPrerequisites: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Subject == nil {
					x.Subject = &SubjectContent{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Subject); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrerequisiteGroups", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PrerequisiteGroups = append(x.PrerequisiteGroups, &PrerequisiteGroup{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PrerequisiteGroups[len(x.PrerequisiteGroups)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CheckPrerequisitesMsg            protoreflect.MessageDescriptor
	fd_CheckPrerequisitesMsg_student_id protoreflect.FieldDescriptor
	fd_CheckPrerequisitesMsg_subject_id protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_subject_check_messages_proto_init()
	md_CheckPrerequisitesMsg = File_academictoken_subject_check_messages_proto.Messages().ByName("CheckPrerequisitesMsg")
	fd_CheckPrerequisitesMsg_student_id = md_CheckPrerequisitesMsg.Fields().ByName("student_id")
	fd_CheckPrerequisitesMsg_subject_id = md_CheckPrerequisitesMsg.Fields().ByName("subject_id")
}

var _ protoreflect.Message = (*fastReflection_CheckPrerequisitesMsg)(nil)

type fastReflection_CheckPrerequisitesMsg CheckPrerequisitesMsg

func (x *CheckPrerequisitesMsg) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CheckPrerequisitesMsg)(x)
}

func (x *CheckPrerequisitesMsg) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_subject_check_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CheckPrerequisitesMsg_messageType fastReflection_CheckPrerequisitesMsg_messageType
var _ protoreflect.MessageType = fastReflection_CheckPrerequisitesMsg_messageType{}

type fastReflection_CheckPrerequisitesMsg_messageType struct{}

func (x fastReflection_CheckPrerequisitesMsg_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CheckPrerequisitesMsg)(nil)
}
func (x fastReflection_CheckPrerequisitesMsg_messageType) New() protoreflect.Message {
	return new(fastReflection_CheckPrerequisitesMsg)
}
func (x fastReflection_CheckPrerequisitesMsg_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CheckPrerequisitesMsg
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CheckPrerequisitesMsg) Descriptor() protoreflect.MessageDescriptor {
	return md_CheckPrerequisitesMsg
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CheckPrerequisitesMsg) Type() protoreflect.MessageType {
	return _fastReflection_CheckPrerequisitesMsg_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CheckPrerequisitesMsg) New() protoreflect.Message {
	return new(fastReflection_CheckPrerequisitesMsg)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CheckPrerequisitesMsg) Interface() protoreflect.ProtoMessage {
	return (*CheckPrerequisitesMsg)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CheckPrerequisitesMsg) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.StudentId != "" {
		value := protoreflect.ValueOfString(x.StudentId)
		if !f(fd_CheckPrerequisitesMsg_student_id, value) {
			return
		}
	}
	if x.SubjectId != "" {
		value := protoreflect.ValueOfString(x.SubjectId)
		if !f(fd_CheckPrerequisitesMsg_subject_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CheckPrerequisitesMsg) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.subject.CheckPrerequisitesMsg.student_id":
		return x.StudentId != ""
	case "academictoken.subject.CheckPrerequisitesMsg.subject_id":
		return x.SubjectId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.CheckPrerequisitesMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.CheckPrerequisitesMsg does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheckPrerequisitesMsg) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.subject.CheckPrerequisitesMsg.student_id":
		x.StudentId = ""
	case "academictoken.subject.CheckPrerequisitesMsg.subject_id":
		x.SubjectId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.CheckPrerequisitesMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.CheckPrerequisitesMsg does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CheckPrerequisitesMsg) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.subject.CheckPrerequisitesMsg.student_id":
		value := x.StudentId
		return protoreflect.ValueOfString(value)
	case "academictoken.subject.CheckPrerequisitesMsg.subject_id":
		value := x.SubjectId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.CheckPrerequisitesMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.CheckPrerequisitesMsg does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheckPrerequisitesMsg) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.subject.CheckPrerequisitesMsg.student_id":
		x.StudentId = value.Interface().(string)
	case "academictoken.subject.CheckPrerequisitesMsg.subject_id":
		x.SubjectId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.CheckPrerequisitesMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.CheckPrerequisitesMsg does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheckPrerequisitesMsg) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.CheckPrerequisitesMsg.student_id":
		panic(fmt.Errorf("field student_id of message academictoken.subject.CheckPrerequisitesMsg is not mutable"))
	case "academictoken.subject.CheckPrerequisitesMsg.subject_id":
		panic(fmt.Errorf("field subject_id of message academictoken.subject.CheckPrerequisitesMsg is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.CheckPrerequisitesMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.CheckPrerequisitesMsg does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CheckPrerequisitesMsg) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.CheckPrerequisitesMsg.student_id":
		return protoreflect.ValueOfString("")
	case "academictoken.subject.CheckPrerequisitesMsg.subject_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.CheckPrerequisitesMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.CheckPrerequisitesMsg does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CheckPrerequisitesMsg) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.subject.CheckPrerequisitesMsg", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CheckPrerequisitesMsg) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CheckPrerequisitesMsg) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CheckPrerequisitesMsg) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CheckPrerequisitesMsg) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CheckPrerequisitesMsg)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.StudentId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CheckPrerequisitesMsg)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SubjectId) > 0 {
			i -= len(x.SubjectId)
			copy(dAtA[i:], x.SubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SubjectId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.StudentId) > 0 {
			i -= len(x.StudentId)
			copy(dAtA[i:], x.StudentId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StudentId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CheckPrerequisitesMsg)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheckPrerequisitesMsg: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CheckPrerequisitesMsg: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StudentId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PrerequisiteCheckResponse_2_list)(nil)

type _PrerequisiteCheckResponse_2_list struct {
	list *[]string
}

func (x *_PrerequisiteCheckResponse_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PrerequisiteCheckResponse_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_PrerequisiteCheckResponse_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_PrerequisiteCheckResponse_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_PrerequisiteCheckResponse_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message PrerequisiteCheckResponse at list field MissingPrerequisites as it is not of Message kind"))
}

func (x *_PrerequisiteCheckResponse_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_PrerequisiteCheckResponse_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_PrerequisiteCheckResponse_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PrerequisiteCheckResponse                       protoreflect.MessageDescriptor
	fd_PrerequisiteCheckResponse_is_eligible           protoreflect.FieldDescriptor
	fd_PrerequisiteCheckResponse_missing_prerequisites protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_subject_check_messages_proto_init()
	md_PrerequisiteCheckResponse = File_academictoken_subject_check_messages_proto.Messages().ByName("PrerequisiteCheckResponse")
	fd_PrerequisiteCheckResponse_is_eligible = md_PrerequisiteCheckResponse.Fields().ByName("is_eligible")
	fd_PrerequisiteCheckResponse_missing_prerequisites = md_PrerequisiteCheckResponse.Fields().ByName("missing_prerequisites")
}

var _ protoreflect.Message = (*fastReflection_PrerequisiteCheckResponse)(nil)

type fastReflection_PrerequisiteCheckResponse PrerequisiteCheckResponse

func (x *PrerequisiteCheckResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PrerequisiteCheckResponse)(x)
}

func (x *PrerequisiteCheckResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_subject_check_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PrerequisiteCheckResponse_messageType fastReflection_PrerequisiteCheckResponse_messageType
var _ protoreflect.MessageType = fastReflection_PrerequisiteCheckResponse_messageType{}

type fastReflection_PrerequisiteCheckResponse_messageType struct{}

func (x fastReflection_PrerequisiteCheckResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PrerequisiteCheckResponse)(nil)
}
func (x fastReflection_PrerequisiteCheckResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_PrerequisiteCheckResponse)
}
func (x fastReflection_PrerequisiteCheckResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PrerequisiteCheckResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PrerequisiteCheckResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_PrerequisiteCheckResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PrerequisiteCheckResponse) Type() protoreflect.MessageType {
	return _fastReflection_PrerequisiteCheckResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PrerequisiteCheckResponse) New() protoreflect.Message {
	return new(fastReflection_PrerequisiteCheckResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PrerequisiteCheckResponse) Interface() protoreflect.ProtoMessage {
	return (*PrerequisiteCheckResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PrerequisiteCheckResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.IsEligible != false {
		value := protoreflect.ValueOfBool(x.IsEligible)
		if !f(fd_PrerequisiteCheckResponse_is_eligible, value) {
			return
		}
	}
	if len(x.MissingPrerequisites) != 0 {
		value := protoreflect.ValueOfList(&_PrerequisiteCheckResponse_2_list{list: &x.MissingPrerequisites})
		if !f(fd_PrerequisiteCheckResponse_missing_prerequisites, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PrerequisiteCheckResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.subject.PrerequisiteCheckResponse.is_eligible":
		return x.IsEligible != false
	case "academictoken.subject.PrerequisiteCheckResponse.missing_prerequisites":
		return len(x.MissingPrerequisites) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.PrerequisiteCheckResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.PrerequisiteCheckResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrerequisiteCheckResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.subject.PrerequisiteCheckResponse.is_eligible":
		x.IsEligible = false
	case "academictoken.subject.PrerequisiteCheckResponse.missing_prerequisites":
		x.MissingPrerequisites = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.PrerequisiteCheckResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.PrerequisiteCheckResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PrerequisiteCheckResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.subject.PrerequisiteCheckResponse.is_eligible":
		value := x.IsEligible
		return protoreflect.ValueOfBool(value)
	case "academictoken.subject.PrerequisiteCheckResponse.missing_prerequisites":
		if len(x.MissingPrerequisites) == 0 {
			return protoreflect.ValueOfList(&_PrerequisiteCheckResponse_2_list{})
		}
		listValue := &_PrerequisiteCheckResponse_2_list{list: &x.MissingPrerequisites}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.PrerequisiteCheckResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.PrerequisiteCheckResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrerequisiteCheckResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.subject.PrerequisiteCheckResponse.is_eligible":
		x.IsEligible = value.Bool()
	case "academictoken.subject.PrerequisiteCheckResponse.missing_prerequisites":
		lv := value.List()
		clv := lv.(*_PrerequisiteCheckResponse_2_list)
		x.MissingPrerequisites = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.PrerequisiteCheckResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.PrerequisiteCheckResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrerequisiteCheckResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.PrerequisiteCheckResponse.missing_prerequisites":
		if x.MissingPrerequisites == nil {
			x.MissingPrerequisites = []string{}
		}
		value := &_PrerequisiteCheckResponse_2_list{list: &x.MissingPrerequisites}
		return protoreflect.ValueOfList(value)
	case "academictoken.subject.PrerequisiteCheckResponse.is_eligible":
		panic(fmt.Errorf("field is_eligible of message academictoken.subject.PrerequisiteCheckResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.PrerequisiteCheckResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.PrerequisiteCheckResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PrerequisiteCheckResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.PrerequisiteCheckResponse.is_eligible":
		return protoreflect.ValueOfBool(false)
	case "academictoken.subject.PrerequisiteCheckResponse.missing_prerequisites":
		list := []string{}
		return protoreflect.ValueOfList(&_PrerequisiteCheckResponse_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.PrerequisiteCheckResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.PrerequisiteCheckResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PrerequisiteCheckResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.subject.PrerequisiteCheckResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PrerequisiteCheckResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrerequisiteCheckResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PrerequisiteCheckResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PrerequisiteCheckResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PrerequisiteCheckResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.IsEligible {
			n += 2
		}
		if len(x.MissingPrerequisites) > 0 {
			for _, s := range x.MissingPrerequisites {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PrerequisiteCheckResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MissingPrerequisites) > 0 {
			for iNdEx := len(x.MissingPrerequisites) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.MissingPrerequisites[iNdEx])
				copy(dAtA[i:], x.MissingPrerequisites[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MissingPrerequisites[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.IsEligible {
			i--
			if x.IsEligible {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PrerequisiteCheckResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrerequisiteCheckResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrerequisiteCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsEligible", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsEligible = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MissingPrerequisites", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MissingPrerequisites = append(x.MissingPrerequisites, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EquivalenceCheckMsg                   protoreflect.MessageDescriptor
	fd_EquivalenceCheckMsg_source_subject_id protoreflect.FieldDescriptor
	fd_EquivalenceCheckMsg_target_subject_id protoreflect.FieldDescriptor
	fd_EquivalenceCheckMsg_force_recalculate protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_subject_check_messages_proto_init()
	md_EquivalenceCheckMsg = File_academictoken_subject_check_messages_proto.Messages().ByName("EquivalenceCheckMsg")
	fd_EquivalenceCheckMsg_source_subject_id = md_EquivalenceCheckMsg.Fields().ByName("source_subject_id")
	fd_EquivalenceCheckMsg_target_subject_id = md_EquivalenceCheckMsg.Fields().ByName("target_subject_id")
	fd_EquivalenceCheckMsg_force_recalculate = md_EquivalenceCheckMsg.Fields().ByName("force_recalculate")
}

var _ protoreflect.Message = (*fastReflection_EquivalenceCheckMsg)(nil)

type fastReflection_EquivalenceCheckMsg EquivalenceCheckMsg

func (x *EquivalenceCheckMsg) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EquivalenceCheckMsg)(x)
}

func (x *EquivalenceCheckMsg) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_subject_check_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EquivalenceCheckMsg_messageType fastReflection_EquivalenceCheckMsg_messageType
var _ protoreflect.MessageType = fastReflection_EquivalenceCheckMsg_messageType{}

type fastReflection_EquivalenceCheckMsg_messageType struct{}

func (x fastReflection_EquivalenceCheckMsg_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EquivalenceCheckMsg)(nil)
}
func (x fastReflection_EquivalenceCheckMsg_messageType) New() protoreflect.Message {
	return new(fastReflection_EquivalenceCheckMsg)
}
func (x fastReflection_EquivalenceCheckMsg_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EquivalenceCheckMsg
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EquivalenceCheckMsg) Descriptor() protoreflect.MessageDescriptor {
	return md_EquivalenceCheckMsg
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EquivalenceCheckMsg) Type() protoreflect.MessageType {
	return _fastReflection_EquivalenceCheckMsg_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EquivalenceCheckMsg) New() protoreflect.Message {
	return new(fastReflection_EquivalenceCheckMsg)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EquivalenceCheckMsg) Interface() protoreflect.ProtoMessage {
	return (*EquivalenceCheckMsg)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EquivalenceCheckMsg) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SourceSubjectId != "" {
		value := protoreflect.ValueOfString(x.SourceSubjectId)
		if !f(fd_EquivalenceCheckMsg_source_subject_id, value) {
			return
		}
	}
	if x.TargetSubjectId != "" {
		value := protoreflect.ValueOfString(x.TargetSubjectId)
		if !f(fd_EquivalenceCheckMsg_target_subject_id, value) {
			return
		}
	}
	if x.ForceRecalculate != false {
		value := protoreflect.ValueOfBool(x.ForceRecalculate)
		if !f(fd_EquivalenceCheckMsg_force_recalculate, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EquivalenceCheckMsg) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceCheckMsg.source_subject_id":
		return x.SourceSubjectId != ""
	case "academictoken.subject.EquivalenceCheckMsg.target_subject_id":
		return x.TargetSubjectId != ""
	case "academictoken.subject.EquivalenceCheckMsg.force_recalculate":
		return x.ForceRecalculate != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceCheckMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceCheckMsg does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceCheckMsg) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceCheckMsg.source_subject_id":
		x.SourceSubjectId = ""
	case "academictoken.subject.EquivalenceCheckMsg.target_subject_id":
		x.TargetSubjectId = ""
	case "academictoken.subject.EquivalenceCheckMsg.force_recalculate":
		x.ForceRecalculate = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceCheckMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceCheckMsg does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EquivalenceCheckMsg) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.subject.EquivalenceCheckMsg.source_subject_id":
		value := x.SourceSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.subject.EquivalenceCheckMsg.target_subject_id":
		value := x.TargetSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.subject.EquivalenceCheckMsg.force_recalculate":
		value := x.ForceRecalculate
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceCheckMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceCheckMsg does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceCheckMsg) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceCheckMsg.source_subject_id":
		x.SourceSubjectId = value.Interface().(string)
	case "academictoken.subject.EquivalenceCheckMsg.target_subject_id":
		x.TargetSubjectId = value.Interface().(string)
	case "academictoken.subject.EquivalenceCheckMsg.force_recalculate":
		x.ForceRecalculate = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceCheckMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceCheckMsg does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceCheckMsg) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceCheckMsg.source_subject_id":
		panic(fmt.Errorf("field source_subject_id of message academictoken.subject.EquivalenceCheckMsg is not mutable"))
	case "academictoken.subject.EquivalenceCheckMsg.target_subject_id":
		panic(fmt.Errorf("field target_subject_id of message academictoken.subject.EquivalenceCheckMsg is not mutable"))
	case "academictoken.subject.EquivalenceCheckMsg.force_recalculate":
		panic(fmt.Errorf("field force_recalculate of message academictoken.subject.EquivalenceCheckMsg is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceCheckMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceCheckMsg does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EquivalenceCheckMsg) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceCheckMsg.source_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.subject.EquivalenceCheckMsg.target_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.subject.EquivalenceCheckMsg.force_recalculate":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceCheckMsg"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceCheckMsg does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EquivalenceCheckMsg) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.subject.EquivalenceCheckMsg", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EquivalenceCheckMsg) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceCheckMsg) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EquivalenceCheckMsg) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EquivalenceCheckMsg) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EquivalenceCheckMsg)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SourceSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ForceRecalculate {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EquivalenceCheckMsg)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ForceRecalculate {
			i--
			if x.ForceRecalculate {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if len(x.TargetSubjectId) > 0 {
			i -= len(x.TargetSubjectId)
			copy(dAtA[i:], x.TargetSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetSubjectId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SourceSubjectId) > 0 {
			i -= len(x.SourceSubjectId)
			copy(dAtA[i:], x.SourceSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceSubjectId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EquivalenceCheckMsg)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EquivalenceCheckMsg: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EquivalenceCheckMsg: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ForceRecalculate", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.ForceRecalculate = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EquivalenceResponse                     protoreflect.MessageDescriptor
	fd_EquivalenceResponse_source_subject_id   protoreflect.FieldDescriptor
	fd_EquivalenceResponse_target_subject_id   protoreflect.FieldDescriptor
	fd_EquivalenceResponse_equivalence_percent protoreflect.FieldDescriptor
	fd_EquivalenceResponse_status              protoreflect.FieldDescriptor
	fd_EquivalenceResponse_from_cache          protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_subject_check_messages_proto_init()
	md_EquivalenceResponse = File_academictoken_subject_check_messages_proto.Messages().ByName("EquivalenceResponse")
	fd_EquivalenceResponse_source_subject_id = md_EquivalenceResponse.Fields().ByName("source_subject_id")
	fd_EquivalenceResponse_target_subject_id = md_EquivalenceResponse.Fields().ByName("target_subject_id")
	fd_EquivalenceResponse_equivalence_percent = md_EquivalenceResponse.Fields().ByName("equivalence_percent")
	fd_EquivalenceResponse_status = md_EquivalenceResponse.Fields().ByName("status")
	fd_EquivalenceResponse_from_cache = md_EquivalenceResponse.Fields().ByName("from_cache")
}

var _ protoreflect.Message = (*fastReflection_EquivalenceResponse)(nil)

type fastReflection_EquivalenceResponse EquivalenceResponse

func (x *EquivalenceResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EquivalenceResponse)(x)
}

func (x *EquivalenceResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_subject_check_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EquivalenceResponse_messageType fastReflection_EquivalenceResponse_messageType
var _ protoreflect.MessageType = fastReflection_EquivalenceResponse_messageType{}

type fastReflection_EquivalenceResponse_messageType struct{}

func (x fastReflection_EquivalenceResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EquivalenceResponse)(nil)
}
func (x fastReflection_EquivalenceResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_EquivalenceResponse)
}
func (x fastReflection_EquivalenceResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EquivalenceResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EquivalenceResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_EquivalenceResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EquivalenceResponse) Type() protoreflect.MessageType {
	return _fastReflection_EquivalenceResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EquivalenceResponse) New() protoreflect.Message {
	return new(fastReflection_EquivalenceResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EquivalenceResponse) Interface() protoreflect.ProtoMessage {
	return (*EquivalenceResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EquivalenceResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SourceSubjectId != "" {
		value := protoreflect.ValueOfString(x.SourceSubjectId)
		if !f(fd_EquivalenceResponse_source_subject_id, value) {
			return
		}
	}
	if x.TargetSubjectId != "" {
		value := protoreflect.ValueOfString(x.TargetSubjectId)
		if !f(fd_EquivalenceResponse_target_subject_id, value) {
			return
		}
	}
	if x.EquivalencePercent != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EquivalencePercent)
		if !f(fd_EquivalenceResponse_equivalence_percent, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_EquivalenceResponse_status, value) {
			return
		}
	}
	if x.FromCache != false {
		value := protoreflect.ValueOfBool(x.FromCache)
		if !f(fd_EquivalenceResponse_from_cache, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EquivalenceResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceResponse.source_subject_id":
		return x.SourceSubjectId != ""
	case "academictoken.subject.EquivalenceResponse.target_subject_id":
		return x.TargetSubjectId != ""
	case "academictoken.subject.EquivalenceResponse.equivalence_percent":
		return x.EquivalencePercent != uint64(0)
	case "academictoken.subject.EquivalenceResponse.status":
		return x.Status != ""
	case "academictoken.subject.EquivalenceResponse.from_cache":
		return x.FromCache != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceResponse.source_subject_id":
		x.SourceSubjectId = ""
	case "academictoken.subject.EquivalenceResponse.target_subject_id":
		x.TargetSubjectId = ""
	case "academictoken.subject.EquivalenceResponse.equivalence_percent":
		x.EquivalencePercent = uint64(0)
	case "academictoken.subject.EquivalenceResponse.status":
		x.Status = ""
	case "academictoken.subject.EquivalenceResponse.from_cache":
		x.FromCache = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EquivalenceResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.subject.EquivalenceResponse.source_subject_id":
		value := x.SourceSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.subject.EquivalenceResponse.target_subject_id":
		value := x.TargetSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.subject.EquivalenceResponse.equivalence_percent":
		value := x.EquivalencePercent
		return protoreflect.ValueOfUint64(value)
	case "academictoken.subject.EquivalenceResponse.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "academictoken.subject.EquivalenceResponse.from_cache":
		value := x.FromCache
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceResponse.source_subject_id":
		x.SourceSubjectId = value.Interface().(string)
	case "academictoken.subject.EquivalenceResponse.target_subject_id":
		x.TargetSubjectId = value.Interface().(string)
	case "academictoken.subject.EquivalenceResponse.equivalence_percent":
		x.EquivalencePercent = value.Uint()
	case "academictoken.subject.EquivalenceResponse.status":
		x.Status = value.Interface().(string)
	case "academictoken.subject.EquivalenceResponse.from_cache":
		x.FromCache = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceResponse.source_subject_id":
		panic(fmt.Errorf("field source_subject_id of message academictoken.subject.EquivalenceResponse is not mutable"))
	case "academictoken.subject.EquivalenceResponse.target_subject_id":
		panic(fmt.Errorf("field target_subject_id of message academictoken.subject.EquivalenceResponse is not mutable"))
	case "academictoken.subject.EquivalenceResponse.equivalence_percent":
		panic(fmt.Errorf("field equivalence_percent of message academictoken.subject.EquivalenceResponse is not mutable"))
	case "academictoken.subject.EquivalenceResponse.status":
		panic(fmt.Errorf("field status of message academictoken.subject.EquivalenceResponse is not mutable"))
	case "academictoken.subject.EquivalenceResponse.from_cache":
		panic(fmt.Errorf("field from_cache of message academictoken.subject.EquivalenceResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EquivalenceResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.subject.EquivalenceResponse.source_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.subject.EquivalenceResponse.target_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.subject.EquivalenceResponse.equivalence_percent":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.subject.EquivalenceResponse.status":
		return protoreflect.ValueOfString("")
	case "academictoken.subject.EquivalenceResponse.from_cache":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.subject.EquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.subject.EquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EquivalenceResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.subject.EquivalenceResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EquivalenceResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EquivalenceResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EquivalenceResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EquivalenceResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SourceSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EquivalencePercent != 0 {
			n += 1 + runtime.Sov(uint64(x.EquivalencePercent))
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FromCache {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EquivalenceResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.FromCache {
			i--
			if x.FromCache {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x22
		}
		if x.EquivalencePercent != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EquivalencePercent))
			i--
			dAtA[i] = 0x18
		}
		if len(x.TargetSubjectId) > 0 {
			i -= len(x.TargetSubjectId)
			copy(dAtA[i:], x.TargetSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetSubjectId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SourceSubjectId) > 0 {
			i -= len(x.SourceSubjectId)
			copy(dAtA[i:], x.SourceSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceSubjectId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EquivalenceResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EquivalenceResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
				}
				x.EquivalencePercent = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EquivalencePercent |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FromCache", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.FromCache = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: academictoken/subject/check_messages.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SubjectWithPrerequisites combines subject content with its prerequisites
type SubjectWithPrerequisites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject            *SubjectContent      `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	PrerequisiteGroups []*PrerequisiteGroup `protobuf:"bytes,2,rep,name=prerequisite_groups,json=prerequisiteGroups,proto3" json:"prerequisite_groups,omitempty"`
}

func (x *SubjectWithPrerequisites) Reset() {
	*x = SubjectWithPrerequisites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_subject_check_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectWithPrerequisites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectWithPrerequisites) ProtoMessage() {}

// Deprecated: Use SubjectWithPrerequisites.ProtoReflect.Descriptor instead.
func (*SubjectWithPrerequisites) Descriptor() ([]byte, []int) {
	return file_academictoken_subject_check_messages_proto_rawDescGZIP(), []int{0}
}

func (x *SubjectWithPrerequisites) GetSubject() *SubjectContent {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *SubjectWithPrerequisites) GetPrerequisiteGroups() []*PrerequisiteGroup {
	if x != nil {
		return x.PrerequisiteGroups
	}
	return nil
}

// CheckPrerequisitesMsg is the message to check if a student meets prerequisites
type CheckPrerequisitesMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
}

func (x *CheckPrerequisitesMsg) Reset() {
	*x = CheckPrerequisitesMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_subject_check_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPrerequisitesMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPrerequisitesMsg) ProtoMessage() {}

// Deprecated: Use CheckPrerequisitesMsg.ProtoReflect.Descriptor instead.
func (*CheckPrerequisitesMsg) Descriptor() ([]byte, []int) {
	return file_academictoken_subject_check_messages_proto_rawDescGZIP(), []int{1}
}

func (x *CheckPrerequisitesMsg) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *CheckPrerequisitesMsg) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

// PrerequisiteCheckResponse is the response from checking prerequisites
type PrerequisiteCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEligible           bool     `protobuf:"varint,1,opt,name=is_eligible,json=isEligible,proto3" json:"is_eligible,omitempty"`
	MissingPrerequisites []string `protobuf:"bytes,2,rep,name=missing_prerequisites,json=missingPrerequisites,proto3" json:"missing_prerequisites,omitempty"`
}

func (x *PrerequisiteCheckResponse) Reset() {
	*x = PrerequisiteCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_subject_check_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrerequisiteCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrerequisiteCheckResponse) ProtoMessage() {}

// Deprecated: Use PrerequisiteCheckResponse.ProtoReflect.Descriptor instead.
func (*PrerequisiteCheckResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_subject_check_messages_proto_rawDescGZIP(), []int{2}
}

func (x *PrerequisiteCheckResponse) GetIsEligible() bool {
	if x != nil {
		return x.IsEligible
	}
	return false
}

func (x *PrerequisiteCheckResponse) GetMissingPrerequisites() []string {
	if x != nil {
		return x.MissingPrerequisites
	}
	return nil
}

// EquivalenceCheckMsg is the message to check equivalence between subjects
type EquivalenceCheckMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSubjectId  string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetSubjectId  string `protobuf:"bytes,2,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	ForceRecalculate bool   `protobuf:"varint,3,opt,name=force_recalculate,json=forceRecalculate,proto3" json:"force_recalculate,omitempty"`
}

func (x *EquivalenceCheckMsg) Reset() {
	*x = EquivalenceCheckMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_subject_check_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquivalenceCheckMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquivalenceCheckMsg) ProtoMessage() {}

// Deprecated: Use EquivalenceCheckMsg.ProtoReflect.Descriptor instead.
func (*EquivalenceCheckMsg) Descriptor() ([]byte, []int) {
	return file_academictoken_subject_check_messages_proto_rawDescGZIP(), []int{3}
}

func (x *EquivalenceCheckMsg) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *EquivalenceCheckMsg) GetTargetSubjectId() string {
	if x != nil {
		return x.TargetSubjectId
	}
	return ""
}

func (x *EquivalenceCheckMsg) GetForceRecalculate() bool {
	if x != nil {
		return x.ForceRecalculate
	}
	return false
}

// EquivalenceResponse is the response from checking equivalence
type EquivalenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSubjectId    string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetSubjectId    string `protobuf:"bytes,2,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	EquivalencePercent uint64 `protobuf:"varint,3,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"`
	Status             string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	FromCache          bool   `protobuf:"varint,5,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`
}

func (x *EquivalenceResponse) Reset() {
	*x = EquivalenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_subject_check_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquivalenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquivalenceResponse) ProtoMessage() {}

// Deprecated: Use EquivalenceResponse.ProtoReflect.Descriptor instead.
func (*EquivalenceResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_subject_check_messages_proto_rawDescGZIP(), []int{4}
}

func (x *EquivalenceResponse) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *EquivalenceResponse) GetTargetSubjectId() string {
	if x != nil {
		return x.TargetSubjectId
	}
	return ""
}

func (x *EquivalenceResponse) GetEquivalencePercent() uint64 {
	if x != nil {
		return x.EquivalencePercent
	}
	return 0
}

func (x *EquivalenceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EquivalenceResponse) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

var File_academictoken_subject_check_messages_proto protoreflect.FileDescriptor

var file_academictoken_subject_check_messages_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0x2b, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb6, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x59,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x55, 0x0a, 0x15, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x71, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x15, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0xd5, 0x01, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0xcd, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x58, 0xaa, 0x02, 0x15, 0x41, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0xca, 0x02, 0x15, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0xe2, 0x02, 0x21, 0x41, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x16, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a,
	0x3a, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_academictoken_subject_check_messages_proto_rawDescOnce sync.Once
	file_academictoken_subject_check_messages_proto_rawDescData = file_academictoken_subject_check_messages_proto_rawDesc
)

func file_academictoken_subject_check_messages_proto_rawDescGZIP() []byte {
	file_academictoken_subject_check_messages_proto_rawDescOnce.Do(func() {
		file_academictoken_subject_check_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_academictoken_subject_check_messages_proto_rawDescData)
	})
	return file_academictoken_subject_check_messages_proto_rawDescData
}

var file_academictoken_subject_check_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_academictoken_subject_check_messages_proto_goTypes = []interface{}{
	(*SubjectWithPrerequisites)(nil),  // 0: academictoken.subject.SubjectWithPrerequisites
	(*CheckPrerequisitesMsg)(nil),     // 1: academictoken.subject.CheckPrerequisitesMsg
	(*PrerequisiteCheckResponse)(nil), // 2: academictoken.subject.PrerequisiteCheckResponse
	(*EquivalenceCheckMsg)(nil),       // 3: academictoken.subject.EquivalenceCheckMsg
	(*EquivalenceResponse)(nil),       // 4: academictoken.subject.EquivalenceResponse
	(*SubjectContent)(nil),            // 5: academictoken.subject.SubjectContent
	(*PrerequisiteGroup)(nil),         // 6: academictoken.subject.PrerequisiteGroup
}
var file_academictoken_subject_check_messages_proto_depIdxs = []int32{
	5, // 0: academictoken.subject.SubjectWithPrerequisites.subject:type_name -> academictoken.subject.SubjectContent
	6, // 1: academictoken.subject.SubjectWithPrerequisites.prerequisite_groups:type_name -> academictoken.subject.PrerequisiteGroup
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_academictoken_subject_check_messages_proto_init() }
func file_academictoken_subject_check_messages_proto_init() {
	if File_academictoken_subject_check_messages_proto != nil {
		return
	}
	file_academictoken_subject_subject_content_proto_init()
	file_academictoken_subject_prerequisite_group_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_academictoken_subject_check_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectWithPrerequisites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_subject_check_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPrerequisitesMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_subject_check_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrerequisiteCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_subject_check_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquivalenceCheckMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_subject_check_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquivalenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_academictoken_subject_check_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_academictoken_subject_check_messages_proto_goTypes,
		DependencyIndexes: file_academictoken_subject_check_messages_proto_depIdxs,
		MessageInfos:      file_academictoken_subject_check_messages_proto_msgTypes,
	}.Build()
	File_academictoken_subject_check_messages_proto = out.File
	file_academictoken_subject_check_messages_proto_rawDesc = nil
	file_academictoken_subject_check_messages_proto_goTypes = nil
	file_academictoken_subject_check_messages_proto_depIdxs = nil
}
