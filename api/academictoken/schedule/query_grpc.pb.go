// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: academictoken/schedule/query.proto

package schedule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                          = "/academictoken.schedule.Query/Params"
	Query_StudyPlan_FullMethodName                       = "/academictoken.schedule.Query/StudyPlan"
	Query_StudyPlanAll_FullMethodName                    = "/academictoken.schedule.Query/StudyPlanAll"
	Query_StudyPlansByStudent_FullMethodName             = "/academictoken.schedule.Query/StudyPlansByStudent"
	Query_PlannedSemester_FullMethodName                 = "/academictoken.schedule.Query/PlannedSemester"
	Query_SubjectRecommendation_FullMethodName           = "/academictoken.schedule.Query/SubjectRecommendation"
	Query_SubjectRecommendationsByStudent_FullMethodName = "/academictoken.schedule.Query/SubjectRecommendationsByStudent"
	Query_GenerateRecommendations_FullMethodName         = "/academictoken.schedule.Query/GenerateRecommendations"
	Query_CheckStudentProgress_FullMethodName            = "/academictoken.schedule.Query/CheckStudentProgress"
	Query_OptimizeSchedule_FullMethodName                = "/academictoken.schedule.Query/OptimizeSchedule"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// StudyPlan queries a study plan by id
	StudyPlan(ctx context.Context, in *QueryGetStudyPlanRequest, opts ...grpc.CallOption) (*QueryGetStudyPlanResponse, error)
	// StudyPlanAll queries all study plans
	StudyPlanAll(ctx context.Context, in *QueryAllStudyPlanRequest, opts ...grpc.CallOption) (*QueryAllStudyPlanResponse, error)
	// StudyPlansByStudent queries study plans by student id
	StudyPlansByStudent(ctx context.Context, in *QueryStudyPlansByStudentRequest, opts ...grpc.CallOption) (*QueryStudyPlansByStudentResponse, error)
	// PlannedSemester queries a planned semester by id
	PlannedSemester(ctx context.Context, in *QueryGetPlannedSemesterRequest, opts ...grpc.CallOption) (*QueryGetPlannedSemesterResponse, error)
	// SubjectRecommendation queries a subject recommendation by id
	SubjectRecommendation(ctx context.Context, in *QueryGetSubjectRecommendationRequest, opts ...grpc.CallOption) (*QueryGetSubjectRecommendationResponse, error)
	// SubjectRecommendationsByStudent queries subject recommendations by student id
	SubjectRecommendationsByStudent(ctx context.Context, in *QuerySubjectRecommendationsByStudentRequest, opts ...grpc.CallOption) (*QuerySubjectRecommendationsByStudentResponse, error)
	// GenerateRecommendations generates automatic recommendations for a student
	GenerateRecommendations(ctx context.Context, in *QueryGenerateRecommendationsRequest, opts ...grpc.CallOption) (*QueryGenerateRecommendationsResponse, error)
	// CheckStudentProgress checks the academic progress of a student
	CheckStudentProgress(ctx context.Context, in *QueryCheckStudentProgressRequest, opts ...grpc.CallOption) (*QueryCheckStudentProgressResponse, error)
	// OptimizeSchedule optimizes a student's schedule for better graduation path
	OptimizeSchedule(ctx context.Context, in *QueryOptimizeScheduleRequest, opts ...grpc.CallOption) (*QueryOptimizeScheduleResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StudyPlan(ctx context.Context, in *QueryGetStudyPlanRequest, opts ...grpc.CallOption) (*QueryGetStudyPlanResponse, error) {
	out := new(QueryGetStudyPlanResponse)
	err := c.cc.Invoke(ctx, Query_StudyPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StudyPlanAll(ctx context.Context, in *QueryAllStudyPlanRequest, opts ...grpc.CallOption) (*QueryAllStudyPlanResponse, error) {
	out := new(QueryAllStudyPlanResponse)
	err := c.cc.Invoke(ctx, Query_StudyPlanAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StudyPlansByStudent(ctx context.Context, in *QueryStudyPlansByStudentRequest, opts ...grpc.CallOption) (*QueryStudyPlansByStudentResponse, error) {
	out := new(QueryStudyPlansByStudentResponse)
	err := c.cc.Invoke(ctx, Query_StudyPlansByStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlannedSemester(ctx context.Context, in *QueryGetPlannedSemesterRequest, opts ...grpc.CallOption) (*QueryGetPlannedSemesterResponse, error) {
	out := new(QueryGetPlannedSemesterResponse)
	err := c.cc.Invoke(ctx, Query_PlannedSemester_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectRecommendation(ctx context.Context, in *QueryGetSubjectRecommendationRequest, opts ...grpc.CallOption) (*QueryGetSubjectRecommendationResponse, error) {
	out := new(QueryGetSubjectRecommendationResponse)
	err := c.cc.Invoke(ctx, Query_SubjectRecommendation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectRecommendationsByStudent(ctx context.Context, in *QuerySubjectRecommendationsByStudentRequest, opts ...grpc.CallOption) (*QuerySubjectRecommendationsByStudentResponse, error) {
	out := new(QuerySubjectRecommendationsByStudentResponse)
	err := c.cc.Invoke(ctx, Query_SubjectRecommendationsByStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GenerateRecommendations(ctx context.Context, in *QueryGenerateRecommendationsRequest, opts ...grpc.CallOption) (*QueryGenerateRecommendationsResponse, error) {
	out := new(QueryGenerateRecommendationsResponse)
	err := c.cc.Invoke(ctx, Query_GenerateRecommendations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckStudentProgress(ctx context.Context, in *QueryCheckStudentProgressRequest, opts ...grpc.CallOption) (*QueryCheckStudentProgressResponse, error) {
	out := new(QueryCheckStudentProgressResponse)
	err := c.cc.Invoke(ctx, Query_CheckStudentProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptimizeSchedule(ctx context.Context, in *QueryOptimizeScheduleRequest, opts ...grpc.CallOption) (*QueryOptimizeScheduleResponse, error) {
	out := new(QueryOptimizeScheduleResponse)
	err := c.cc.Invoke(ctx, Query_OptimizeSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// StudyPlan queries a study plan by id
	StudyPlan(context.Context, *QueryGetStudyPlanRequest) (*QueryGetStudyPlanResponse, error)
	// StudyPlanAll queries all study plans
	StudyPlanAll(context.Context, *QueryAllStudyPlanRequest) (*QueryAllStudyPlanResponse, error)
	// StudyPlansByStudent queries study plans by student id
	StudyPlansByStudent(context.Context, *QueryStudyPlansByStudentRequest) (*QueryStudyPlansByStudentResponse, error)
	// PlannedSemester queries a planned semester by id
	PlannedSemester(context.Context, *QueryGetPlannedSemesterRequest) (*QueryGetPlannedSemesterResponse, error)
	// SubjectRecommendation queries a subject recommendation by id
	SubjectRecommendation(context.Context, *QueryGetSubjectRecommendationRequest) (*QueryGetSubjectRecommendationResponse, error)
	// SubjectRecommendationsByStudent queries subject recommendations by student id
	SubjectRecommendationsByStudent(context.Context, *QuerySubjectRecommendationsByStudentRequest) (*QuerySubjectRecommendationsByStudentResponse, error)
	// GenerateRecommendations generates automatic recommendations for a student
	GenerateRecommendations(context.Context, *QueryGenerateRecommendationsRequest) (*QueryGenerateRecommendationsResponse, error)
	// CheckStudentProgress checks the academic progress of a student
	CheckStudentProgress(context.Context, *QueryCheckStudentProgressRequest) (*QueryCheckStudentProgressResponse, error)
	// OptimizeSchedule optimizes a student's schedule for better graduation path
	OptimizeSchedule(context.Context, *QueryOptimizeScheduleRequest) (*QueryOptimizeScheduleResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) StudyPlan(context.Context, *QueryGetStudyPlanRequest) (*QueryGetStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyPlan not implemented")
}
func (UnimplementedQueryServer) StudyPlanAll(context.Context, *QueryAllStudyPlanRequest) (*QueryAllStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyPlanAll not implemented")
}
func (UnimplementedQueryServer) StudyPlansByStudent(context.Context, *QueryStudyPlansByStudentRequest) (*QueryStudyPlansByStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudyPlansByStudent not implemented")
}
func (UnimplementedQueryServer) PlannedSemester(context.Context, *QueryGetPlannedSemesterRequest) (*QueryGetPlannedSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlannedSemester not implemented")
}
func (UnimplementedQueryServer) SubjectRecommendation(context.Context, *QueryGetSubjectRecommendationRequest) (*QueryGetSubjectRecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectRecommendation not implemented")
}
func (UnimplementedQueryServer) SubjectRecommendationsByStudent(context.Context, *QuerySubjectRecommendationsByStudentRequest) (*QuerySubjectRecommendationsByStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectRecommendationsByStudent not implemented")
}
func (UnimplementedQueryServer) GenerateRecommendations(context.Context, *QueryGenerateRecommendationsRequest) (*QueryGenerateRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRecommendations not implemented")
}
func (UnimplementedQueryServer) CheckStudentProgress(context.Context, *QueryCheckStudentProgressRequest) (*QueryCheckStudentProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStudentProgress not implemented")
}
func (UnimplementedQueryServer) OptimizeSchedule(context.Context, *QueryOptimizeScheduleRequest) (*QueryOptimizeScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeSchedule not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StudyPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StudyPlan(ctx, req.(*QueryGetStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StudyPlanAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StudyPlanAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StudyPlanAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StudyPlanAll(ctx, req.(*QueryAllStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StudyPlansByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStudyPlansByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StudyPlansByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StudyPlansByStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StudyPlansByStudent(ctx, req.(*QueryStudyPlansByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlannedSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlannedSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlannedSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PlannedSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlannedSemester(ctx, req.(*QueryGetPlannedSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectRecommendation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSubjectRecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectRecommendation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubjectRecommendation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectRecommendation(ctx, req.(*QueryGetSubjectRecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectRecommendationsByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectRecommendationsByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectRecommendationsByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubjectRecommendationsByStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectRecommendationsByStudent(ctx, req.(*QuerySubjectRecommendationsByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GenerateRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGenerateRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GenerateRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GenerateRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GenerateRecommendations(ctx, req.(*QueryGenerateRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckStudentProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckStudentProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckStudentProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CheckStudentProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckStudentProgress(ctx, req.(*QueryCheckStudentProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptimizeSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOptimizeScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptimizeSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptimizeSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptimizeSchedule(ctx, req.(*QueryOptimizeScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.schedule.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "StudyPlan",
			Handler:    _Query_StudyPlan_Handler,
		},
		{
			MethodName: "StudyPlanAll",
			Handler:    _Query_StudyPlanAll_Handler,
		},
		{
			MethodName: "StudyPlansByStudent",
			Handler:    _Query_StudyPlansByStudent_Handler,
		},
		{
			MethodName: "PlannedSemester",
			Handler:    _Query_PlannedSemester_Handler,
		},
		{
			MethodName: "SubjectRecommendation",
			Handler:    _Query_SubjectRecommendation_Handler,
		},
		{
			MethodName: "SubjectRecommendationsByStudent",
			Handler:    _Query_SubjectRecommendationsByStudent_Handler,
		},
		{
			MethodName: "GenerateRecommendations",
			Handler:    _Query_GenerateRecommendations_Handler,
		},
		{
			MethodName: "CheckStudentProgress",
			Handler:    _Query_CheckStudentProgress_Handler,
		},
		{
			MethodName: "OptimizeSchedule",
			Handler:    _Query_OptimizeSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/schedule/query.proto",
}
