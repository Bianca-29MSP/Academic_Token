// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: academictoken/equivalence/tx.proto

package equivalence

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName               = "/academictoken.equivalence.Msg/UpdateParams"
	Msg_RequestEquivalence_FullMethodName         = "/academictoken.equivalence.Msg/RequestEquivalence"
	Msg_ExecuteEquivalenceAnalysis_FullMethodName = "/academictoken.equivalence.Msg/ExecuteEquivalenceAnalysis"
	Msg_BatchRequestEquivalence_FullMethodName    = "/academictoken.equivalence.Msg/BatchRequestEquivalence"
	Msg_UpdateContractAddress_FullMethodName      = "/academictoken.equivalence.Msg/UpdateContractAddress"
	Msg_ReanalyzeEquivalence_FullMethodName       = "/academictoken.equivalence.Msg/ReanalyzeEquivalence"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// RequestEquivalence requests automated equivalence analysis between two subjects
	RequestEquivalence(ctx context.Context, in *MsgRequestEquivalence, opts ...grpc.CallOption) (*MsgRequestEquivalenceResponse, error)
	// ExecuteEquivalenceAnalysis triggers the CosmWasm contract analysis
	ExecuteEquivalenceAnalysis(ctx context.Context, in *MsgExecuteEquivalenceAnalysis, opts ...grpc.CallOption) (*MsgExecuteEquivalenceAnalysisResponse, error)
	// BatchRequestEquivalence allows requesting multiple equivalences at once
	BatchRequestEquivalence(ctx context.Context, in *MsgBatchRequestEquivalence, opts ...grpc.CallOption) (*MsgBatchRequestEquivalenceResponse, error)
	// UpdateContractAddress updates the CosmWasm contract address for equivalence analysis
	UpdateContractAddress(ctx context.Context, in *MsgUpdateContractAddress, opts ...grpc.CallOption) (*MsgUpdateContractAddressResponse, error)
	// ReanalyzeEquivalence forces re-analysis of an existing equivalence
	ReanalyzeEquivalence(ctx context.Context, in *MsgReanalyzeEquivalence, opts ...grpc.CallOption) (*MsgReanalyzeEquivalenceResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestEquivalence(ctx context.Context, in *MsgRequestEquivalence, opts ...grpc.CallOption) (*MsgRequestEquivalenceResponse, error) {
	out := new(MsgRequestEquivalenceResponse)
	err := c.cc.Invoke(ctx, Msg_RequestEquivalence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteEquivalenceAnalysis(ctx context.Context, in *MsgExecuteEquivalenceAnalysis, opts ...grpc.CallOption) (*MsgExecuteEquivalenceAnalysisResponse, error) {
	out := new(MsgExecuteEquivalenceAnalysisResponse)
	err := c.cc.Invoke(ctx, Msg_ExecuteEquivalenceAnalysis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BatchRequestEquivalence(ctx context.Context, in *MsgBatchRequestEquivalence, opts ...grpc.CallOption) (*MsgBatchRequestEquivalenceResponse, error) {
	out := new(MsgBatchRequestEquivalenceResponse)
	err := c.cc.Invoke(ctx, Msg_BatchRequestEquivalence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateContractAddress(ctx context.Context, in *MsgUpdateContractAddress, opts ...grpc.CallOption) (*MsgUpdateContractAddressResponse, error) {
	out := new(MsgUpdateContractAddressResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateContractAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReanalyzeEquivalence(ctx context.Context, in *MsgReanalyzeEquivalence, opts ...grpc.CallOption) (*MsgReanalyzeEquivalenceResponse, error) {
	out := new(MsgReanalyzeEquivalenceResponse)
	err := c.cc.Invoke(ctx, Msg_ReanalyzeEquivalence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// RequestEquivalence requests automated equivalence analysis between two subjects
	RequestEquivalence(context.Context, *MsgRequestEquivalence) (*MsgRequestEquivalenceResponse, error)
	// ExecuteEquivalenceAnalysis triggers the CosmWasm contract analysis
	ExecuteEquivalenceAnalysis(context.Context, *MsgExecuteEquivalenceAnalysis) (*MsgExecuteEquivalenceAnalysisResponse, error)
	// BatchRequestEquivalence allows requesting multiple equivalences at once
	BatchRequestEquivalence(context.Context, *MsgBatchRequestEquivalence) (*MsgBatchRequestEquivalenceResponse, error)
	// UpdateContractAddress updates the CosmWasm contract address for equivalence analysis
	UpdateContractAddress(context.Context, *MsgUpdateContractAddress) (*MsgUpdateContractAddressResponse, error)
	// ReanalyzeEquivalence forces re-analysis of an existing equivalence
	ReanalyzeEquivalence(context.Context, *MsgReanalyzeEquivalence) (*MsgReanalyzeEquivalenceResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) RequestEquivalence(context.Context, *MsgRequestEquivalence) (*MsgRequestEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEquivalence not implemented")
}
func (UnimplementedMsgServer) ExecuteEquivalenceAnalysis(context.Context, *MsgExecuteEquivalenceAnalysis) (*MsgExecuteEquivalenceAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteEquivalenceAnalysis not implemented")
}
func (UnimplementedMsgServer) BatchRequestEquivalence(context.Context, *MsgBatchRequestEquivalence) (*MsgBatchRequestEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRequestEquivalence not implemented")
}
func (UnimplementedMsgServer) UpdateContractAddress(context.Context, *MsgUpdateContractAddress) (*MsgUpdateContractAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractAddress not implemented")
}
func (UnimplementedMsgServer) ReanalyzeEquivalence(context.Context, *MsgReanalyzeEquivalence) (*MsgReanalyzeEquivalenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReanalyzeEquivalence not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestEquivalence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestEquivalence(ctx, req.(*MsgRequestEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteEquivalenceAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteEquivalenceAnalysis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteEquivalenceAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ExecuteEquivalenceAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteEquivalenceAnalysis(ctx, req.(*MsgExecuteEquivalenceAnalysis))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BatchRequestEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBatchRequestEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BatchRequestEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BatchRequestEquivalence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BatchRequestEquivalence(ctx, req.(*MsgBatchRequestEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateContractAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateContractAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateContractAddress(ctx, req.(*MsgUpdateContractAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReanalyzeEquivalence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReanalyzeEquivalence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReanalyzeEquivalence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ReanalyzeEquivalence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReanalyzeEquivalence(ctx, req.(*MsgReanalyzeEquivalence))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.equivalence.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RequestEquivalence",
			Handler:    _Msg_RequestEquivalence_Handler,
		},
		{
			MethodName: "ExecuteEquivalenceAnalysis",
			Handler:    _Msg_ExecuteEquivalenceAnalysis_Handler,
		},
		{
			MethodName: "BatchRequestEquivalence",
			Handler:    _Msg_BatchRequestEquivalence_Handler,
		},
		{
			MethodName: "UpdateContractAddress",
			Handler:    _Msg_UpdateContractAddress_Handler,
		},
		{
			MethodName: "ReanalyzeEquivalence",
			Handler:    _Msg_ReanalyzeEquivalence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/equivalence/tx.proto",
}
