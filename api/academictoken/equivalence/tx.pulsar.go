// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package equivalence

import (
	_ "cosmossdk.io/api/amino"
	_ "cosmossdk.io/api/cosmos/msg/v1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_MsgUpdateParams           protoreflect.MessageDescriptor
	fd_MsgUpdateParams_authority protoreflect.FieldDescriptor
	fd_MsgUpdateParams_params    protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgUpdateParams = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgUpdateParams")
	fd_MsgUpdateParams_authority = md_MsgUpdateParams.Fields().ByName("authority")
	fd_MsgUpdateParams_params = md_MsgUpdateParams.Fields().ByName("params")
}

var _ protoreflect.Message = (*fastReflection_MsgUpdateParams)(nil)

type fastReflection_MsgUpdateParams MsgUpdateParams

func (x *MsgUpdateParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgUpdateParams)(x)
}

func (x *MsgUpdateParams) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgUpdateParams_messageType fastReflection_MsgUpdateParams_messageType
var _ protoreflect.MessageType = fastReflection_MsgUpdateParams_messageType{}

type fastReflection_MsgUpdateParams_messageType struct{}

func (x fastReflection_MsgUpdateParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgUpdateParams)(nil)
}
func (x fastReflection_MsgUpdateParams_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgUpdateParams)
}
func (x fastReflection_MsgUpdateParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdateParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgUpdateParams) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdateParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgUpdateParams) Type() protoreflect.MessageType {
	return _fastReflection_MsgUpdateParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgUpdateParams) New() protoreflect.Message {
	return new(fastReflection_MsgUpdateParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgUpdateParams) Interface() protoreflect.ProtoMessage {
	return (*MsgUpdateParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgUpdateParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Authority != "" {
		value := protoreflect.ValueOfString(x.Authority)
		if !f(fd_MsgUpdateParams_authority, value) {
			return
		}
	}
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_MsgUpdateParams_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgUpdateParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateParams.authority":
		return x.Authority != ""
	case "academictoken.equivalence.MsgUpdateParams.params":
		return x.Params != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParams"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateParams.authority":
		x.Authority = ""
	case "academictoken.equivalence.MsgUpdateParams.params":
		x.Params = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParams"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgUpdateParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgUpdateParams.authority":
		value := x.Authority
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgUpdateParams.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParams"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateParams.authority":
		x.Authority = value.Interface().(string)
	case "academictoken.equivalence.MsgUpdateParams.params":
		x.Params = value.Message().Interface().(*Params)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParams"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateParams.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "academictoken.equivalence.MsgUpdateParams.authority":
		panic(fmt.Errorf("field authority of message academictoken.equivalence.MsgUpdateParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParams"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgUpdateParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateParams.authority":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgUpdateParams.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParams"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgUpdateParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgUpdateParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgUpdateParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgUpdateParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgUpdateParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgUpdateParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Authority)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdateParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Authority) > 0 {
			i -= len(x.Authority)
			copy(dAtA[i:], x.Authority)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Authority)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdateParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Authority = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgUpdateParamsResponse protoreflect.MessageDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgUpdateParamsResponse = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgUpdateParamsResponse")
}

var _ protoreflect.Message = (*fastReflection_MsgUpdateParamsResponse)(nil)

type fastReflection_MsgUpdateParamsResponse MsgUpdateParamsResponse

func (x *MsgUpdateParamsResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgUpdateParamsResponse)(x)
}

func (x *MsgUpdateParamsResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgUpdateParamsResponse_messageType fastReflection_MsgUpdateParamsResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgUpdateParamsResponse_messageType{}

type fastReflection_MsgUpdateParamsResponse_messageType struct{}

func (x fastReflection_MsgUpdateParamsResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgUpdateParamsResponse)(nil)
}
func (x fastReflection_MsgUpdateParamsResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgUpdateParamsResponse)
}
func (x fastReflection_MsgUpdateParamsResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdateParamsResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgUpdateParamsResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdateParamsResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgUpdateParamsResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgUpdateParamsResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgUpdateParamsResponse) New() protoreflect.Message {
	return new(fastReflection_MsgUpdateParamsResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgUpdateParamsResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgUpdateParamsResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgUpdateParamsResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgUpdateParamsResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParamsResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateParamsResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParamsResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgUpdateParamsResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParamsResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateParamsResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParamsResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateParamsResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParamsResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgUpdateParamsResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateParamsResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgUpdateParamsResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgUpdateParamsResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgUpdateParamsResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateParamsResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgUpdateParamsResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgUpdateParamsResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgUpdateParamsResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdateParamsResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdateParamsResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgRequestEquivalence                     protoreflect.MessageDescriptor
	fd_MsgRequestEquivalence_creator             protoreflect.FieldDescriptor
	fd_MsgRequestEquivalence_source_subject_id   protoreflect.FieldDescriptor
	fd_MsgRequestEquivalence_target_institution  protoreflect.FieldDescriptor
	fd_MsgRequestEquivalence_target_subject_id   protoreflect.FieldDescriptor
	fd_MsgRequestEquivalence_force_recalculation protoreflect.FieldDescriptor
	fd_MsgRequestEquivalence_contract_address    protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgRequestEquivalence = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgRequestEquivalence")
	fd_MsgRequestEquivalence_creator = md_MsgRequestEquivalence.Fields().ByName("creator")
	fd_MsgRequestEquivalence_source_subject_id = md_MsgRequestEquivalence.Fields().ByName("source_subject_id")
	fd_MsgRequestEquivalence_target_institution = md_MsgRequestEquivalence.Fields().ByName("target_institution")
	fd_MsgRequestEquivalence_target_subject_id = md_MsgRequestEquivalence.Fields().ByName("target_subject_id")
	fd_MsgRequestEquivalence_force_recalculation = md_MsgRequestEquivalence.Fields().ByName("force_recalculation")
	fd_MsgRequestEquivalence_contract_address = md_MsgRequestEquivalence.Fields().ByName("contract_address")
}

var _ protoreflect.Message = (*fastReflection_MsgRequestEquivalence)(nil)

type fastReflection_MsgRequestEquivalence MsgRequestEquivalence

func (x *MsgRequestEquivalence) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgRequestEquivalence)(x)
}

func (x *MsgRequestEquivalence) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgRequestEquivalence_messageType fastReflection_MsgRequestEquivalence_messageType
var _ protoreflect.MessageType = fastReflection_MsgRequestEquivalence_messageType{}

type fastReflection_MsgRequestEquivalence_messageType struct{}

func (x fastReflection_MsgRequestEquivalence_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgRequestEquivalence)(nil)
}
func (x fastReflection_MsgRequestEquivalence_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgRequestEquivalence)
}
func (x fastReflection_MsgRequestEquivalence_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRequestEquivalence
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgRequestEquivalence) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRequestEquivalence
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgRequestEquivalence) Type() protoreflect.MessageType {
	return _fastReflection_MsgRequestEquivalence_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgRequestEquivalence) New() protoreflect.Message {
	return new(fastReflection_MsgRequestEquivalence)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgRequestEquivalence) Interface() protoreflect.ProtoMessage {
	return (*MsgRequestEquivalence)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgRequestEquivalence) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_MsgRequestEquivalence_creator, value) {
			return
		}
	}
	if x.SourceSubjectId != "" {
		value := protoreflect.ValueOfString(x.SourceSubjectId)
		if !f(fd_MsgRequestEquivalence_source_subject_id, value) {
			return
		}
	}
	if x.TargetInstitution != "" {
		value := protoreflect.ValueOfString(x.TargetInstitution)
		if !f(fd_MsgRequestEquivalence_target_institution, value) {
			return
		}
	}
	if x.TargetSubjectId != "" {
		value := protoreflect.ValueOfString(x.TargetSubjectId)
		if !f(fd_MsgRequestEquivalence_target_subject_id, value) {
			return
		}
	}
	if x.ForceRecalculation != false {
		value := protoreflect.ValueOfBool(x.ForceRecalculation)
		if !f(fd_MsgRequestEquivalence_force_recalculation, value) {
			return
		}
	}
	if x.ContractAddress != "" {
		value := protoreflect.ValueOfString(x.ContractAddress)
		if !f(fd_MsgRequestEquivalence_contract_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgRequestEquivalence) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalence.creator":
		return x.Creator != ""
	case "academictoken.equivalence.MsgRequestEquivalence.source_subject_id":
		return x.SourceSubjectId != ""
	case "academictoken.equivalence.MsgRequestEquivalence.target_institution":
		return x.TargetInstitution != ""
	case "academictoken.equivalence.MsgRequestEquivalence.target_subject_id":
		return x.TargetSubjectId != ""
	case "academictoken.equivalence.MsgRequestEquivalence.force_recalculation":
		return x.ForceRecalculation != false
	case "academictoken.equivalence.MsgRequestEquivalence.contract_address":
		return x.ContractAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRequestEquivalence) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalence.creator":
		x.Creator = ""
	case "academictoken.equivalence.MsgRequestEquivalence.source_subject_id":
		x.SourceSubjectId = ""
	case "academictoken.equivalence.MsgRequestEquivalence.target_institution":
		x.TargetInstitution = ""
	case "academictoken.equivalence.MsgRequestEquivalence.target_subject_id":
		x.TargetSubjectId = ""
	case "academictoken.equivalence.MsgRequestEquivalence.force_recalculation":
		x.ForceRecalculation = false
	case "academictoken.equivalence.MsgRequestEquivalence.contract_address":
		x.ContractAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgRequestEquivalence) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalence.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgRequestEquivalence.source_subject_id":
		value := x.SourceSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgRequestEquivalence.target_institution":
		value := x.TargetInstitution
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgRequestEquivalence.target_subject_id":
		value := x.TargetSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgRequestEquivalence.force_recalculation":
		value := x.ForceRecalculation
		return protoreflect.ValueOfBool(value)
	case "academictoken.equivalence.MsgRequestEquivalence.contract_address":
		value := x.ContractAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalence does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRequestEquivalence) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalence.creator":
		x.Creator = value.Interface().(string)
	case "academictoken.equivalence.MsgRequestEquivalence.source_subject_id":
		x.SourceSubjectId = value.Interface().(string)
	case "academictoken.equivalence.MsgRequestEquivalence.target_institution":
		x.TargetInstitution = value.Interface().(string)
	case "academictoken.equivalence.MsgRequestEquivalence.target_subject_id":
		x.TargetSubjectId = value.Interface().(string)
	case "academictoken.equivalence.MsgRequestEquivalence.force_recalculation":
		x.ForceRecalculation = value.Bool()
	case "academictoken.equivalence.MsgRequestEquivalence.contract_address":
		x.ContractAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRequestEquivalence) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalence.creator":
		panic(fmt.Errorf("field creator of message academictoken.equivalence.MsgRequestEquivalence is not mutable"))
	case "academictoken.equivalence.MsgRequestEquivalence.source_subject_id":
		panic(fmt.Errorf("field source_subject_id of message academictoken.equivalence.MsgRequestEquivalence is not mutable"))
	case "academictoken.equivalence.MsgRequestEquivalence.target_institution":
		panic(fmt.Errorf("field target_institution of message academictoken.equivalence.MsgRequestEquivalence is not mutable"))
	case "academictoken.equivalence.MsgRequestEquivalence.target_subject_id":
		panic(fmt.Errorf("field target_subject_id of message academictoken.equivalence.MsgRequestEquivalence is not mutable"))
	case "academictoken.equivalence.MsgRequestEquivalence.force_recalculation":
		panic(fmt.Errorf("field force_recalculation of message academictoken.equivalence.MsgRequestEquivalence is not mutable"))
	case "academictoken.equivalence.MsgRequestEquivalence.contract_address":
		panic(fmt.Errorf("field contract_address of message academictoken.equivalence.MsgRequestEquivalence is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgRequestEquivalence) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalence.creator":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgRequestEquivalence.source_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgRequestEquivalence.target_institution":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgRequestEquivalence.target_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgRequestEquivalence.force_recalculation":
		return protoreflect.ValueOfBool(false)
	case "academictoken.equivalence.MsgRequestEquivalence.contract_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgRequestEquivalence) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgRequestEquivalence", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgRequestEquivalence) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRequestEquivalence) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgRequestEquivalence) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgRequestEquivalence) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgRequestEquivalence)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SourceSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetInstitution)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ForceRecalculation {
			n += 2
		}
		l = len(x.ContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgRequestEquivalence)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ContractAddress) > 0 {
			i -= len(x.ContractAddress)
			copy(dAtA[i:], x.ContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractAddress)))
			i--
			dAtA[i] = 0x32
		}
		if x.ForceRecalculation {
			i--
			if x.ForceRecalculation {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if len(x.TargetSubjectId) > 0 {
			i -= len(x.TargetSubjectId)
			copy(dAtA[i:], x.TargetSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetSubjectId)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.TargetInstitution) > 0 {
			i -= len(x.TargetInstitution)
			copy(dAtA[i:], x.TargetInstitution)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetInstitution)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.SourceSubjectId) > 0 {
			i -= len(x.SourceSubjectId)
			copy(dAtA[i:], x.SourceSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceSubjectId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgRequestEquivalence)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRequestEquivalence: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRequestEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetInstitution", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetInstitution = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ForceRecalculation", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.ForceRecalculation = bool(v != 0)
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgRequestEquivalenceResponse                    protoreflect.MessageDescriptor
	fd_MsgRequestEquivalenceResponse_equivalence_id     protoreflect.FieldDescriptor
	fd_MsgRequestEquivalenceResponse_status             protoreflect.FieldDescriptor
	fd_MsgRequestEquivalenceResponse_analysis_triggered protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgRequestEquivalenceResponse = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgRequestEquivalenceResponse")
	fd_MsgRequestEquivalenceResponse_equivalence_id = md_MsgRequestEquivalenceResponse.Fields().ByName("equivalence_id")
	fd_MsgRequestEquivalenceResponse_status = md_MsgRequestEquivalenceResponse.Fields().ByName("status")
	fd_MsgRequestEquivalenceResponse_analysis_triggered = md_MsgRequestEquivalenceResponse.Fields().ByName("analysis_triggered")
}

var _ protoreflect.Message = (*fastReflection_MsgRequestEquivalenceResponse)(nil)

type fastReflection_MsgRequestEquivalenceResponse MsgRequestEquivalenceResponse

func (x *MsgRequestEquivalenceResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgRequestEquivalenceResponse)(x)
}

func (x *MsgRequestEquivalenceResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgRequestEquivalenceResponse_messageType fastReflection_MsgRequestEquivalenceResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgRequestEquivalenceResponse_messageType{}

type fastReflection_MsgRequestEquivalenceResponse_messageType struct{}

func (x fastReflection_MsgRequestEquivalenceResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgRequestEquivalenceResponse)(nil)
}
func (x fastReflection_MsgRequestEquivalenceResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgRequestEquivalenceResponse)
}
func (x fastReflection_MsgRequestEquivalenceResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRequestEquivalenceResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgRequestEquivalenceResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgRequestEquivalenceResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgRequestEquivalenceResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgRequestEquivalenceResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgRequestEquivalenceResponse) New() protoreflect.Message {
	return new(fastReflection_MsgRequestEquivalenceResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgRequestEquivalenceResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgRequestEquivalenceResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgRequestEquivalenceResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EquivalenceId != "" {
		value := protoreflect.ValueOfString(x.EquivalenceId)
		if !f(fd_MsgRequestEquivalenceResponse_equivalence_id, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_MsgRequestEquivalenceResponse_status, value) {
			return
		}
	}
	if x.AnalysisTriggered != false {
		value := protoreflect.ValueOfBool(x.AnalysisTriggered)
		if !f(fd_MsgRequestEquivalenceResponse_analysis_triggered, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgRequestEquivalenceResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.equivalence_id":
		return x.EquivalenceId != ""
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.status":
		return x.Status != ""
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.analysis_triggered":
		return x.AnalysisTriggered != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRequestEquivalenceResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.equivalence_id":
		x.EquivalenceId = ""
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.status":
		x.Status = ""
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.analysis_triggered":
		x.AnalysisTriggered = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgRequestEquivalenceResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.equivalence_id":
		value := x.EquivalenceId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.analysis_triggered":
		value := x.AnalysisTriggered
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalenceResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRequestEquivalenceResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.equivalence_id":
		x.EquivalenceId = value.Interface().(string)
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.status":
		x.Status = value.Interface().(string)
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.analysis_triggered":
		x.AnalysisTriggered = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRequestEquivalenceResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.equivalence_id":
		panic(fmt.Errorf("field equivalence_id of message academictoken.equivalence.MsgRequestEquivalenceResponse is not mutable"))
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.status":
		panic(fmt.Errorf("field status of message academictoken.equivalence.MsgRequestEquivalenceResponse is not mutable"))
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.analysis_triggered":
		panic(fmt.Errorf("field analysis_triggered of message academictoken.equivalence.MsgRequestEquivalenceResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgRequestEquivalenceResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.equivalence_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.status":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgRequestEquivalenceResponse.analysis_triggered":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgRequestEquivalenceResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgRequestEquivalenceResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgRequestEquivalenceResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgRequestEquivalenceResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgRequestEquivalenceResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgRequestEquivalenceResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgRequestEquivalenceResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.EquivalenceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AnalysisTriggered {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgRequestEquivalenceResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AnalysisTriggered {
			i--
			if x.AnalysisTriggered {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.EquivalenceId) > 0 {
			i -= len(x.EquivalenceId)
			copy(dAtA[i:], x.EquivalenceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalenceId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgRequestEquivalenceResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRequestEquivalenceResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgRequestEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalenceId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisTriggered", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.AnalysisTriggered = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgExecuteEquivalenceAnalysis                     protoreflect.MessageDescriptor
	fd_MsgExecuteEquivalenceAnalysis_creator             protoreflect.FieldDescriptor
	fd_MsgExecuteEquivalenceAnalysis_equivalence_id      protoreflect.FieldDescriptor
	fd_MsgExecuteEquivalenceAnalysis_contract_address    protoreflect.FieldDescriptor
	fd_MsgExecuteEquivalenceAnalysis_analysis_parameters protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgExecuteEquivalenceAnalysis = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgExecuteEquivalenceAnalysis")
	fd_MsgExecuteEquivalenceAnalysis_creator = md_MsgExecuteEquivalenceAnalysis.Fields().ByName("creator")
	fd_MsgExecuteEquivalenceAnalysis_equivalence_id = md_MsgExecuteEquivalenceAnalysis.Fields().ByName("equivalence_id")
	fd_MsgExecuteEquivalenceAnalysis_contract_address = md_MsgExecuteEquivalenceAnalysis.Fields().ByName("contract_address")
	fd_MsgExecuteEquivalenceAnalysis_analysis_parameters = md_MsgExecuteEquivalenceAnalysis.Fields().ByName("analysis_parameters")
}

var _ protoreflect.Message = (*fastReflection_MsgExecuteEquivalenceAnalysis)(nil)

type fastReflection_MsgExecuteEquivalenceAnalysis MsgExecuteEquivalenceAnalysis

func (x *MsgExecuteEquivalenceAnalysis) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgExecuteEquivalenceAnalysis)(x)
}

func (x *MsgExecuteEquivalenceAnalysis) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgExecuteEquivalenceAnalysis_messageType fastReflection_MsgExecuteEquivalenceAnalysis_messageType
var _ protoreflect.MessageType = fastReflection_MsgExecuteEquivalenceAnalysis_messageType{}

type fastReflection_MsgExecuteEquivalenceAnalysis_messageType struct{}

func (x fastReflection_MsgExecuteEquivalenceAnalysis_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgExecuteEquivalenceAnalysis)(nil)
}
func (x fastReflection_MsgExecuteEquivalenceAnalysis_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgExecuteEquivalenceAnalysis)
}
func (x fastReflection_MsgExecuteEquivalenceAnalysis_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgExecuteEquivalenceAnalysis
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgExecuteEquivalenceAnalysis
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Type() protoreflect.MessageType {
	return _fastReflection_MsgExecuteEquivalenceAnalysis_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) New() protoreflect.Message {
	return new(fastReflection_MsgExecuteEquivalenceAnalysis)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Interface() protoreflect.ProtoMessage {
	return (*MsgExecuteEquivalenceAnalysis)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_MsgExecuteEquivalenceAnalysis_creator, value) {
			return
		}
	}
	if x.EquivalenceId != "" {
		value := protoreflect.ValueOfString(x.EquivalenceId)
		if !f(fd_MsgExecuteEquivalenceAnalysis_equivalence_id, value) {
			return
		}
	}
	if x.ContractAddress != "" {
		value := protoreflect.ValueOfString(x.ContractAddress)
		if !f(fd_MsgExecuteEquivalenceAnalysis_contract_address, value) {
			return
		}
	}
	if x.AnalysisParameters != "" {
		value := protoreflect.ValueOfString(x.AnalysisParameters)
		if !f(fd_MsgExecuteEquivalenceAnalysis_analysis_parameters, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.creator":
		return x.Creator != ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.equivalence_id":
		return x.EquivalenceId != ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.contract_address":
		return x.ContractAddress != ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.analysis_parameters":
		return x.AnalysisParameters != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysis"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysis does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.creator":
		x.Creator = ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.equivalence_id":
		x.EquivalenceId = ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.contract_address":
		x.ContractAddress = ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.analysis_parameters":
		x.AnalysisParameters = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysis"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysis does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.equivalence_id":
		value := x.EquivalenceId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.contract_address":
		value := x.ContractAddress
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.analysis_parameters":
		value := x.AnalysisParameters
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysis"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysis does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.creator":
		x.Creator = value.Interface().(string)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.equivalence_id":
		x.EquivalenceId = value.Interface().(string)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.contract_address":
		x.ContractAddress = value.Interface().(string)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.analysis_parameters":
		x.AnalysisParameters = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysis"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysis does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.creator":
		panic(fmt.Errorf("field creator of message academictoken.equivalence.MsgExecuteEquivalenceAnalysis is not mutable"))
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.equivalence_id":
		panic(fmt.Errorf("field equivalence_id of message academictoken.equivalence.MsgExecuteEquivalenceAnalysis is not mutable"))
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.contract_address":
		panic(fmt.Errorf("field contract_address of message academictoken.equivalence.MsgExecuteEquivalenceAnalysis is not mutable"))
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.analysis_parameters":
		panic(fmt.Errorf("field analysis_parameters of message academictoken.equivalence.MsgExecuteEquivalenceAnalysis is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysis"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysis does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.creator":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.equivalence_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.contract_address":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysis.analysis_parameters":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysis"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysis does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgExecuteEquivalenceAnalysis", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgExecuteEquivalenceAnalysis) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgExecuteEquivalenceAnalysis)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EquivalenceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AnalysisParameters)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgExecuteEquivalenceAnalysis)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AnalysisParameters) > 0 {
			i -= len(x.AnalysisParameters)
			copy(dAtA[i:], x.AnalysisParameters)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnalysisParameters)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ContractAddress) > 0 {
			i -= len(x.ContractAddress)
			copy(dAtA[i:], x.ContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.EquivalenceId) > 0 {
			i -= len(x.EquivalenceId)
			copy(dAtA[i:], x.EquivalenceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalenceId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgExecuteEquivalenceAnalysis)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgExecuteEquivalenceAnalysis: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgExecuteEquivalenceAnalysis: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalenceId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisParameters", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnalysisParameters = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgExecuteEquivalenceAnalysisResponse                     protoreflect.MessageDescriptor
	fd_MsgExecuteEquivalenceAnalysisResponse_success             protoreflect.FieldDescriptor
	fd_MsgExecuteEquivalenceAnalysisResponse_equivalence_percent protoreflect.FieldDescriptor
	fd_MsgExecuteEquivalenceAnalysisResponse_analysis_metadata   protoreflect.FieldDescriptor
	fd_MsgExecuteEquivalenceAnalysisResponse_analysis_hash       protoreflect.FieldDescriptor
	fd_MsgExecuteEquivalenceAnalysisResponse_updated_status      protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgExecuteEquivalenceAnalysisResponse = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgExecuteEquivalenceAnalysisResponse")
	fd_MsgExecuteEquivalenceAnalysisResponse_success = md_MsgExecuteEquivalenceAnalysisResponse.Fields().ByName("success")
	fd_MsgExecuteEquivalenceAnalysisResponse_equivalence_percent = md_MsgExecuteEquivalenceAnalysisResponse.Fields().ByName("equivalence_percent")
	fd_MsgExecuteEquivalenceAnalysisResponse_analysis_metadata = md_MsgExecuteEquivalenceAnalysisResponse.Fields().ByName("analysis_metadata")
	fd_MsgExecuteEquivalenceAnalysisResponse_analysis_hash = md_MsgExecuteEquivalenceAnalysisResponse.Fields().ByName("analysis_hash")
	fd_MsgExecuteEquivalenceAnalysisResponse_updated_status = md_MsgExecuteEquivalenceAnalysisResponse.Fields().ByName("updated_status")
}

var _ protoreflect.Message = (*fastReflection_MsgExecuteEquivalenceAnalysisResponse)(nil)

type fastReflection_MsgExecuteEquivalenceAnalysisResponse MsgExecuteEquivalenceAnalysisResponse

func (x *MsgExecuteEquivalenceAnalysisResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgExecuteEquivalenceAnalysisResponse)(x)
}

func (x *MsgExecuteEquivalenceAnalysisResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgExecuteEquivalenceAnalysisResponse_messageType fastReflection_MsgExecuteEquivalenceAnalysisResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgExecuteEquivalenceAnalysisResponse_messageType{}

type fastReflection_MsgExecuteEquivalenceAnalysisResponse_messageType struct{}

func (x fastReflection_MsgExecuteEquivalenceAnalysisResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgExecuteEquivalenceAnalysisResponse)(nil)
}
func (x fastReflection_MsgExecuteEquivalenceAnalysisResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgExecuteEquivalenceAnalysisResponse)
}
func (x fastReflection_MsgExecuteEquivalenceAnalysisResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgExecuteEquivalenceAnalysisResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgExecuteEquivalenceAnalysisResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgExecuteEquivalenceAnalysisResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) New() protoreflect.Message {
	return new(fastReflection_MsgExecuteEquivalenceAnalysisResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgExecuteEquivalenceAnalysisResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Success != false {
		value := protoreflect.ValueOfBool(x.Success)
		if !f(fd_MsgExecuteEquivalenceAnalysisResponse_success, value) {
			return
		}
	}
	if x.EquivalencePercent != "" {
		value := protoreflect.ValueOfString(x.EquivalencePercent)
		if !f(fd_MsgExecuteEquivalenceAnalysisResponse_equivalence_percent, value) {
			return
		}
	}
	if x.AnalysisMetadata != "" {
		value := protoreflect.ValueOfString(x.AnalysisMetadata)
		if !f(fd_MsgExecuteEquivalenceAnalysisResponse_analysis_metadata, value) {
			return
		}
	}
	if x.AnalysisHash != "" {
		value := protoreflect.ValueOfString(x.AnalysisHash)
		if !f(fd_MsgExecuteEquivalenceAnalysisResponse_analysis_hash, value) {
			return
		}
	}
	if x.UpdatedStatus != "" {
		value := protoreflect.ValueOfString(x.UpdatedStatus)
		if !f(fd_MsgExecuteEquivalenceAnalysisResponse_updated_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.success":
		return x.Success != false
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.equivalence_percent":
		return x.EquivalencePercent != ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_metadata":
		return x.AnalysisMetadata != ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_hash":
		return x.AnalysisHash != ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.updated_status":
		return x.UpdatedStatus != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.success":
		x.Success = false
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.equivalence_percent":
		x.EquivalencePercent = ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_metadata":
		x.AnalysisMetadata = ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_hash":
		x.AnalysisHash = ""
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.updated_status":
		x.UpdatedStatus = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.success":
		value := x.Success
		return protoreflect.ValueOfBool(value)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.equivalence_percent":
		value := x.EquivalencePercent
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_metadata":
		value := x.AnalysisMetadata
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_hash":
		value := x.AnalysisHash
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.updated_status":
		value := x.UpdatedStatus
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.success":
		x.Success = value.Bool()
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.equivalence_percent":
		x.EquivalencePercent = value.Interface().(string)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_metadata":
		x.AnalysisMetadata = value.Interface().(string)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_hash":
		x.AnalysisHash = value.Interface().(string)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.updated_status":
		x.UpdatedStatus = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.success":
		panic(fmt.Errorf("field success of message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse is not mutable"))
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.equivalence_percent":
		panic(fmt.Errorf("field equivalence_percent of message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse is not mutable"))
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_metadata":
		panic(fmt.Errorf("field analysis_metadata of message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse is not mutable"))
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_hash":
		panic(fmt.Errorf("field analysis_hash of message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse is not mutable"))
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.updated_status":
		panic(fmt.Errorf("field updated_status of message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.success":
		return protoreflect.ValueOfBool(false)
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.equivalence_percent":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_metadata":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.analysis_hash":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse.updated_status":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgExecuteEquivalenceAnalysisResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgExecuteEquivalenceAnalysisResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Success {
			n += 2
		}
		l = len(x.EquivalencePercent)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AnalysisMetadata)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AnalysisHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UpdatedStatus)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgExecuteEquivalenceAnalysisResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.UpdatedStatus) > 0 {
			i -= len(x.UpdatedStatus)
			copy(dAtA[i:], x.UpdatedStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UpdatedStatus)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.AnalysisHash) > 0 {
			i -= len(x.AnalysisHash)
			copy(dAtA[i:], x.AnalysisHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnalysisHash)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.AnalysisMetadata) > 0 {
			i -= len(x.AnalysisMetadata)
			copy(dAtA[i:], x.AnalysisMetadata)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnalysisMetadata)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.EquivalencePercent) > 0 {
			i -= len(x.EquivalencePercent)
			copy(dAtA[i:], x.EquivalencePercent)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalencePercent)))
			i--
			dAtA[i] = 0x12
		}
		if x.Success {
			i--
			if x.Success {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgExecuteEquivalenceAnalysisResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgExecuteEquivalenceAnalysisResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgExecuteEquivalenceAnalysisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Success = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalencePercent = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisMetadata", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnalysisMetadata = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnalysisHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdatedStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UpdatedStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EquivalenceRequest                    protoreflect.MessageDescriptor
	fd_EquivalenceRequest_source_subject_id  protoreflect.FieldDescriptor
	fd_EquivalenceRequest_target_institution protoreflect.FieldDescriptor
	fd_EquivalenceRequest_target_subject_id  protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_EquivalenceRequest = File_academictoken_equivalence_tx_proto.Messages().ByName("EquivalenceRequest")
	fd_EquivalenceRequest_source_subject_id = md_EquivalenceRequest.Fields().ByName("source_subject_id")
	fd_EquivalenceRequest_target_institution = md_EquivalenceRequest.Fields().ByName("target_institution")
	fd_EquivalenceRequest_target_subject_id = md_EquivalenceRequest.Fields().ByName("target_subject_id")
}

var _ protoreflect.Message = (*fastReflection_EquivalenceRequest)(nil)

type fastReflection_EquivalenceRequest EquivalenceRequest

func (x *EquivalenceRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EquivalenceRequest)(x)
}

func (x *EquivalenceRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EquivalenceRequest_messageType fastReflection_EquivalenceRequest_messageType
var _ protoreflect.MessageType = fastReflection_EquivalenceRequest_messageType{}

type fastReflection_EquivalenceRequest_messageType struct{}

func (x fastReflection_EquivalenceRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EquivalenceRequest)(nil)
}
func (x fastReflection_EquivalenceRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_EquivalenceRequest)
}
func (x fastReflection_EquivalenceRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EquivalenceRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EquivalenceRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_EquivalenceRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EquivalenceRequest) Type() protoreflect.MessageType {
	return _fastReflection_EquivalenceRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EquivalenceRequest) New() protoreflect.Message {
	return new(fastReflection_EquivalenceRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EquivalenceRequest) Interface() protoreflect.ProtoMessage {
	return (*EquivalenceRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EquivalenceRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SourceSubjectId != "" {
		value := protoreflect.ValueOfString(x.SourceSubjectId)
		if !f(fd_EquivalenceRequest_source_subject_id, value) {
			return
		}
	}
	if x.TargetInstitution != "" {
		value := protoreflect.ValueOfString(x.TargetInstitution)
		if !f(fd_EquivalenceRequest_target_institution, value) {
			return
		}
	}
	if x.TargetSubjectId != "" {
		value := protoreflect.ValueOfString(x.TargetSubjectId)
		if !f(fd_EquivalenceRequest_target_subject_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EquivalenceRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.EquivalenceRequest.source_subject_id":
		return x.SourceSubjectId != ""
	case "academictoken.equivalence.EquivalenceRequest.target_institution":
		return x.TargetInstitution != ""
	case "academictoken.equivalence.EquivalenceRequest.target_subject_id":
		return x.TargetSubjectId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.EquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.EquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.EquivalenceRequest.source_subject_id":
		x.SourceSubjectId = ""
	case "academictoken.equivalence.EquivalenceRequest.target_institution":
		x.TargetInstitution = ""
	case "academictoken.equivalence.EquivalenceRequest.target_subject_id":
		x.TargetSubjectId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.EquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.EquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EquivalenceRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.EquivalenceRequest.source_subject_id":
		value := x.SourceSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.EquivalenceRequest.target_institution":
		value := x.TargetInstitution
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.EquivalenceRequest.target_subject_id":
		value := x.TargetSubjectId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.EquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.EquivalenceRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.EquivalenceRequest.source_subject_id":
		x.SourceSubjectId = value.Interface().(string)
	case "academictoken.equivalence.EquivalenceRequest.target_institution":
		x.TargetInstitution = value.Interface().(string)
	case "academictoken.equivalence.EquivalenceRequest.target_subject_id":
		x.TargetSubjectId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.EquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.EquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.EquivalenceRequest.source_subject_id":
		panic(fmt.Errorf("field source_subject_id of message academictoken.equivalence.EquivalenceRequest is not mutable"))
	case "academictoken.equivalence.EquivalenceRequest.target_institution":
		panic(fmt.Errorf("field target_institution of message academictoken.equivalence.EquivalenceRequest is not mutable"))
	case "academictoken.equivalence.EquivalenceRequest.target_subject_id":
		panic(fmt.Errorf("field target_subject_id of message academictoken.equivalence.EquivalenceRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.EquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.EquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EquivalenceRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.EquivalenceRequest.source_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.EquivalenceRequest.target_institution":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.EquivalenceRequest.target_subject_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.EquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.EquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EquivalenceRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.EquivalenceRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EquivalenceRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EquivalenceRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EquivalenceRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EquivalenceRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EquivalenceRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SourceSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetInstitution)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EquivalenceRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TargetSubjectId) > 0 {
			i -= len(x.TargetSubjectId)
			copy(dAtA[i:], x.TargetSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetSubjectId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TargetInstitution) > 0 {
			i -= len(x.TargetInstitution)
			copy(dAtA[i:], x.TargetInstitution)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetInstitution)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SourceSubjectId) > 0 {
			i -= len(x.SourceSubjectId)
			copy(dAtA[i:], x.SourceSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceSubjectId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EquivalenceRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EquivalenceRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EquivalenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetInstitution", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetInstitution = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgBatchRequestEquivalence_2_list)(nil)

type _MsgBatchRequestEquivalence_2_list struct {
	list *[]*EquivalenceRequest
}

func (x *_MsgBatchRequestEquivalence_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgBatchRequestEquivalence_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgBatchRequestEquivalence_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EquivalenceRequest)
	(*x.list)[i] = concreteValue
}

func (x *_MsgBatchRequestEquivalence_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EquivalenceRequest)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgBatchRequestEquivalence_2_list) AppendMutable() protoreflect.Value {
	v := new(EquivalenceRequest)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgBatchRequestEquivalence_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgBatchRequestEquivalence_2_list) NewElement() protoreflect.Value {
	v := new(EquivalenceRequest)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgBatchRequestEquivalence_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgBatchRequestEquivalence                     protoreflect.MessageDescriptor
	fd_MsgBatchRequestEquivalence_creator             protoreflect.FieldDescriptor
	fd_MsgBatchRequestEquivalence_requests            protoreflect.FieldDescriptor
	fd_MsgBatchRequestEquivalence_force_recalculation protoreflect.FieldDescriptor
	fd_MsgBatchRequestEquivalence_contract_address    protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgBatchRequestEquivalence = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgBatchRequestEquivalence")
	fd_MsgBatchRequestEquivalence_creator = md_MsgBatchRequestEquivalence.Fields().ByName("creator")
	fd_MsgBatchRequestEquivalence_requests = md_MsgBatchRequestEquivalence.Fields().ByName("requests")
	fd_MsgBatchRequestEquivalence_force_recalculation = md_MsgBatchRequestEquivalence.Fields().ByName("force_recalculation")
	fd_MsgBatchRequestEquivalence_contract_address = md_MsgBatchRequestEquivalence.Fields().ByName("contract_address")
}

var _ protoreflect.Message = (*fastReflection_MsgBatchRequestEquivalence)(nil)

type fastReflection_MsgBatchRequestEquivalence MsgBatchRequestEquivalence

func (x *MsgBatchRequestEquivalence) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgBatchRequestEquivalence)(x)
}

func (x *MsgBatchRequestEquivalence) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgBatchRequestEquivalence_messageType fastReflection_MsgBatchRequestEquivalence_messageType
var _ protoreflect.MessageType = fastReflection_MsgBatchRequestEquivalence_messageType{}

type fastReflection_MsgBatchRequestEquivalence_messageType struct{}

func (x fastReflection_MsgBatchRequestEquivalence_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgBatchRequestEquivalence)(nil)
}
func (x fastReflection_MsgBatchRequestEquivalence_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgBatchRequestEquivalence)
}
func (x fastReflection_MsgBatchRequestEquivalence_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgBatchRequestEquivalence
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgBatchRequestEquivalence) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgBatchRequestEquivalence
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgBatchRequestEquivalence) Type() protoreflect.MessageType {
	return _fastReflection_MsgBatchRequestEquivalence_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgBatchRequestEquivalence) New() protoreflect.Message {
	return new(fastReflection_MsgBatchRequestEquivalence)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgBatchRequestEquivalence) Interface() protoreflect.ProtoMessage {
	return (*MsgBatchRequestEquivalence)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgBatchRequestEquivalence) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_MsgBatchRequestEquivalence_creator, value) {
			return
		}
	}
	if len(x.Requests) != 0 {
		value := protoreflect.ValueOfList(&_MsgBatchRequestEquivalence_2_list{list: &x.Requests})
		if !f(fd_MsgBatchRequestEquivalence_requests, value) {
			return
		}
	}
	if x.ForceRecalculation != false {
		value := protoreflect.ValueOfBool(x.ForceRecalculation)
		if !f(fd_MsgBatchRequestEquivalence_force_recalculation, value) {
			return
		}
	}
	if x.ContractAddress != "" {
		value := protoreflect.ValueOfString(x.ContractAddress)
		if !f(fd_MsgBatchRequestEquivalence_contract_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgBatchRequestEquivalence) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalence.creator":
		return x.Creator != ""
	case "academictoken.equivalence.MsgBatchRequestEquivalence.requests":
		return len(x.Requests) != 0
	case "academictoken.equivalence.MsgBatchRequestEquivalence.force_recalculation":
		return x.ForceRecalculation != false
	case "academictoken.equivalence.MsgBatchRequestEquivalence.contract_address":
		return x.ContractAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgBatchRequestEquivalence) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalence.creator":
		x.Creator = ""
	case "academictoken.equivalence.MsgBatchRequestEquivalence.requests":
		x.Requests = nil
	case "academictoken.equivalence.MsgBatchRequestEquivalence.force_recalculation":
		x.ForceRecalculation = false
	case "academictoken.equivalence.MsgBatchRequestEquivalence.contract_address":
		x.ContractAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgBatchRequestEquivalence) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalence.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgBatchRequestEquivalence.requests":
		if len(x.Requests) == 0 {
			return protoreflect.ValueOfList(&_MsgBatchRequestEquivalence_2_list{})
		}
		listValue := &_MsgBatchRequestEquivalence_2_list{list: &x.Requests}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.MsgBatchRequestEquivalence.force_recalculation":
		value := x.ForceRecalculation
		return protoreflect.ValueOfBool(value)
	case "academictoken.equivalence.MsgBatchRequestEquivalence.contract_address":
		value := x.ContractAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalence does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgBatchRequestEquivalence) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalence.creator":
		x.Creator = value.Interface().(string)
	case "academictoken.equivalence.MsgBatchRequestEquivalence.requests":
		lv := value.List()
		clv := lv.(*_MsgBatchRequestEquivalence_2_list)
		x.Requests = *clv.list
	case "academictoken.equivalence.MsgBatchRequestEquivalence.force_recalculation":
		x.ForceRecalculation = value.Bool()
	case "academictoken.equivalence.MsgBatchRequestEquivalence.contract_address":
		x.ContractAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgBatchRequestEquivalence) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalence.requests":
		if x.Requests == nil {
			x.Requests = []*EquivalenceRequest{}
		}
		value := &_MsgBatchRequestEquivalence_2_list{list: &x.Requests}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.MsgBatchRequestEquivalence.creator":
		panic(fmt.Errorf("field creator of message academictoken.equivalence.MsgBatchRequestEquivalence is not mutable"))
	case "academictoken.equivalence.MsgBatchRequestEquivalence.force_recalculation":
		panic(fmt.Errorf("field force_recalculation of message academictoken.equivalence.MsgBatchRequestEquivalence is not mutable"))
	case "academictoken.equivalence.MsgBatchRequestEquivalence.contract_address":
		panic(fmt.Errorf("field contract_address of message academictoken.equivalence.MsgBatchRequestEquivalence is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgBatchRequestEquivalence) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalence.creator":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgBatchRequestEquivalence.requests":
		list := []*EquivalenceRequest{}
		return protoreflect.ValueOfList(&_MsgBatchRequestEquivalence_2_list{list: &list})
	case "academictoken.equivalence.MsgBatchRequestEquivalence.force_recalculation":
		return protoreflect.ValueOfBool(false)
	case "academictoken.equivalence.MsgBatchRequestEquivalence.contract_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalence does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgBatchRequestEquivalence) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgBatchRequestEquivalence", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgBatchRequestEquivalence) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgBatchRequestEquivalence) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgBatchRequestEquivalence) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgBatchRequestEquivalence) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgBatchRequestEquivalence)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Requests) > 0 {
			for _, e := range x.Requests {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ForceRecalculation {
			n += 2
		}
		l = len(x.ContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgBatchRequestEquivalence)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ContractAddress) > 0 {
			i -= len(x.ContractAddress)
			copy(dAtA[i:], x.ContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractAddress)))
			i--
			dAtA[i] = 0x22
		}
		if x.ForceRecalculation {
			i--
			if x.ForceRecalculation {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if len(x.Requests) > 0 {
			for iNdEx := len(x.Requests) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Requests[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgBatchRequestEquivalence)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgBatchRequestEquivalence: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgBatchRequestEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Requests = append(x.Requests, &EquivalenceRequest{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Requests[len(x.Requests)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ForceRecalculation", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.ForceRecalculation = bool(v != 0)
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BatchEquivalenceResult                     protoreflect.MessageDescriptor
	fd_BatchEquivalenceResult_equivalence_id      protoreflect.FieldDescriptor
	fd_BatchEquivalenceResult_source_subject_id   protoreflect.FieldDescriptor
	fd_BatchEquivalenceResult_target_subject_id   protoreflect.FieldDescriptor
	fd_BatchEquivalenceResult_status              protoreflect.FieldDescriptor
	fd_BatchEquivalenceResult_equivalence_percent protoreflect.FieldDescriptor
	fd_BatchEquivalenceResult_error               protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_BatchEquivalenceResult = File_academictoken_equivalence_tx_proto.Messages().ByName("BatchEquivalenceResult")
	fd_BatchEquivalenceResult_equivalence_id = md_BatchEquivalenceResult.Fields().ByName("equivalence_id")
	fd_BatchEquivalenceResult_source_subject_id = md_BatchEquivalenceResult.Fields().ByName("source_subject_id")
	fd_BatchEquivalenceResult_target_subject_id = md_BatchEquivalenceResult.Fields().ByName("target_subject_id")
	fd_BatchEquivalenceResult_status = md_BatchEquivalenceResult.Fields().ByName("status")
	fd_BatchEquivalenceResult_equivalence_percent = md_BatchEquivalenceResult.Fields().ByName("equivalence_percent")
	fd_BatchEquivalenceResult_error = md_BatchEquivalenceResult.Fields().ByName("error")
}

var _ protoreflect.Message = (*fastReflection_BatchEquivalenceResult)(nil)

type fastReflection_BatchEquivalenceResult BatchEquivalenceResult

func (x *BatchEquivalenceResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BatchEquivalenceResult)(x)
}

func (x *BatchEquivalenceResult) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BatchEquivalenceResult_messageType fastReflection_BatchEquivalenceResult_messageType
var _ protoreflect.MessageType = fastReflection_BatchEquivalenceResult_messageType{}

type fastReflection_BatchEquivalenceResult_messageType struct{}

func (x fastReflection_BatchEquivalenceResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BatchEquivalenceResult)(nil)
}
func (x fastReflection_BatchEquivalenceResult_messageType) New() protoreflect.Message {
	return new(fastReflection_BatchEquivalenceResult)
}
func (x fastReflection_BatchEquivalenceResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BatchEquivalenceResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BatchEquivalenceResult) Descriptor() protoreflect.MessageDescriptor {
	return md_BatchEquivalenceResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BatchEquivalenceResult) Type() protoreflect.MessageType {
	return _fastReflection_BatchEquivalenceResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BatchEquivalenceResult) New() protoreflect.Message {
	return new(fastReflection_BatchEquivalenceResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BatchEquivalenceResult) Interface() protoreflect.ProtoMessage {
	return (*BatchEquivalenceResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BatchEquivalenceResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EquivalenceId != "" {
		value := protoreflect.ValueOfString(x.EquivalenceId)
		if !f(fd_BatchEquivalenceResult_equivalence_id, value) {
			return
		}
	}
	if x.SourceSubjectId != "" {
		value := protoreflect.ValueOfString(x.SourceSubjectId)
		if !f(fd_BatchEquivalenceResult_source_subject_id, value) {
			return
		}
	}
	if x.TargetSubjectId != "" {
		value := protoreflect.ValueOfString(x.TargetSubjectId)
		if !f(fd_BatchEquivalenceResult_target_subject_id, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_BatchEquivalenceResult_status, value) {
			return
		}
	}
	if x.EquivalencePercent != "" {
		value := protoreflect.ValueOfString(x.EquivalencePercent)
		if !f(fd_BatchEquivalenceResult_equivalence_percent, value) {
			return
		}
	}
	if x.Error != "" {
		value := protoreflect.ValueOfString(x.Error)
		if !f(fd_BatchEquivalenceResult_error, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BatchEquivalenceResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_id":
		return x.EquivalenceId != ""
	case "academictoken.equivalence.BatchEquivalenceResult.source_subject_id":
		return x.SourceSubjectId != ""
	case "academictoken.equivalence.BatchEquivalenceResult.target_subject_id":
		return x.TargetSubjectId != ""
	case "academictoken.equivalence.BatchEquivalenceResult.status":
		return x.Status != ""
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_percent":
		return x.EquivalencePercent != ""
	case "academictoken.equivalence.BatchEquivalenceResult.error":
		return x.Error != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.BatchEquivalenceResult"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.BatchEquivalenceResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BatchEquivalenceResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_id":
		x.EquivalenceId = ""
	case "academictoken.equivalence.BatchEquivalenceResult.source_subject_id":
		x.SourceSubjectId = ""
	case "academictoken.equivalence.BatchEquivalenceResult.target_subject_id":
		x.TargetSubjectId = ""
	case "academictoken.equivalence.BatchEquivalenceResult.status":
		x.Status = ""
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_percent":
		x.EquivalencePercent = ""
	case "academictoken.equivalence.BatchEquivalenceResult.error":
		x.Error = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.BatchEquivalenceResult"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.BatchEquivalenceResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BatchEquivalenceResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_id":
		value := x.EquivalenceId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.BatchEquivalenceResult.source_subject_id":
		value := x.SourceSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.BatchEquivalenceResult.target_subject_id":
		value := x.TargetSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.BatchEquivalenceResult.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_percent":
		value := x.EquivalencePercent
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.BatchEquivalenceResult.error":
		value := x.Error
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.BatchEquivalenceResult"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.BatchEquivalenceResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BatchEquivalenceResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_id":
		x.EquivalenceId = value.Interface().(string)
	case "academictoken.equivalence.BatchEquivalenceResult.source_subject_id":
		x.SourceSubjectId = value.Interface().(string)
	case "academictoken.equivalence.BatchEquivalenceResult.target_subject_id":
		x.TargetSubjectId = value.Interface().(string)
	case "academictoken.equivalence.BatchEquivalenceResult.status":
		x.Status = value.Interface().(string)
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_percent":
		x.EquivalencePercent = value.Interface().(string)
	case "academictoken.equivalence.BatchEquivalenceResult.error":
		x.Error = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.BatchEquivalenceResult"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.BatchEquivalenceResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BatchEquivalenceResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_id":
		panic(fmt.Errorf("field equivalence_id of message academictoken.equivalence.BatchEquivalenceResult is not mutable"))
	case "academictoken.equivalence.BatchEquivalenceResult.source_subject_id":
		panic(fmt.Errorf("field source_subject_id of message academictoken.equivalence.BatchEquivalenceResult is not mutable"))
	case "academictoken.equivalence.BatchEquivalenceResult.target_subject_id":
		panic(fmt.Errorf("field target_subject_id of message academictoken.equivalence.BatchEquivalenceResult is not mutable"))
	case "academictoken.equivalence.BatchEquivalenceResult.status":
		panic(fmt.Errorf("field status of message academictoken.equivalence.BatchEquivalenceResult is not mutable"))
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_percent":
		panic(fmt.Errorf("field equivalence_percent of message academictoken.equivalence.BatchEquivalenceResult is not mutable"))
	case "academictoken.equivalence.BatchEquivalenceResult.error":
		panic(fmt.Errorf("field error of message academictoken.equivalence.BatchEquivalenceResult is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.BatchEquivalenceResult"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.BatchEquivalenceResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BatchEquivalenceResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.BatchEquivalenceResult.source_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.BatchEquivalenceResult.target_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.BatchEquivalenceResult.status":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.BatchEquivalenceResult.equivalence_percent":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.BatchEquivalenceResult.error":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.BatchEquivalenceResult"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.BatchEquivalenceResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BatchEquivalenceResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.BatchEquivalenceResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BatchEquivalenceResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BatchEquivalenceResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BatchEquivalenceResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BatchEquivalenceResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BatchEquivalenceResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.EquivalenceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SourceSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EquivalencePercent)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Error)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BatchEquivalenceResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Error) > 0 {
			i -= len(x.Error)
			copy(dAtA[i:], x.Error)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Error)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.EquivalencePercent) > 0 {
			i -= len(x.EquivalencePercent)
			copy(dAtA[i:], x.EquivalencePercent)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalencePercent)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.TargetSubjectId) > 0 {
			i -= len(x.TargetSubjectId)
			copy(dAtA[i:], x.TargetSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetSubjectId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.SourceSubjectId) > 0 {
			i -= len(x.SourceSubjectId)
			copy(dAtA[i:], x.SourceSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceSubjectId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.EquivalenceId) > 0 {
			i -= len(x.EquivalenceId)
			copy(dAtA[i:], x.EquivalenceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalenceId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BatchEquivalenceResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BatchEquivalenceResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BatchEquivalenceResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalenceId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalencePercent = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Error = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgBatchRequestEquivalenceResponse_1_list)(nil)

type _MsgBatchRequestEquivalenceResponse_1_list struct {
	list *[]*BatchEquivalenceResult
}

func (x *_MsgBatchRequestEquivalenceResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgBatchRequestEquivalenceResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgBatchRequestEquivalenceResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BatchEquivalenceResult)
	(*x.list)[i] = concreteValue
}

func (x *_MsgBatchRequestEquivalenceResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BatchEquivalenceResult)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgBatchRequestEquivalenceResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(BatchEquivalenceResult)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgBatchRequestEquivalenceResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgBatchRequestEquivalenceResponse_1_list) NewElement() protoreflect.Value {
	v := new(BatchEquivalenceResult)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgBatchRequestEquivalenceResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgBatchRequestEquivalenceResponse                     protoreflect.MessageDescriptor
	fd_MsgBatchRequestEquivalenceResponse_results             protoreflect.FieldDescriptor
	fd_MsgBatchRequestEquivalenceResponse_successful_requests protoreflect.FieldDescriptor
	fd_MsgBatchRequestEquivalenceResponse_failed_requests     protoreflect.FieldDescriptor
	fd_MsgBatchRequestEquivalenceResponse_pending_analysis    protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgBatchRequestEquivalenceResponse = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgBatchRequestEquivalenceResponse")
	fd_MsgBatchRequestEquivalenceResponse_results = md_MsgBatchRequestEquivalenceResponse.Fields().ByName("results")
	fd_MsgBatchRequestEquivalenceResponse_successful_requests = md_MsgBatchRequestEquivalenceResponse.Fields().ByName("successful_requests")
	fd_MsgBatchRequestEquivalenceResponse_failed_requests = md_MsgBatchRequestEquivalenceResponse.Fields().ByName("failed_requests")
	fd_MsgBatchRequestEquivalenceResponse_pending_analysis = md_MsgBatchRequestEquivalenceResponse.Fields().ByName("pending_analysis")
}

var _ protoreflect.Message = (*fastReflection_MsgBatchRequestEquivalenceResponse)(nil)

type fastReflection_MsgBatchRequestEquivalenceResponse MsgBatchRequestEquivalenceResponse

func (x *MsgBatchRequestEquivalenceResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgBatchRequestEquivalenceResponse)(x)
}

func (x *MsgBatchRequestEquivalenceResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgBatchRequestEquivalenceResponse_messageType fastReflection_MsgBatchRequestEquivalenceResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgBatchRequestEquivalenceResponse_messageType{}

type fastReflection_MsgBatchRequestEquivalenceResponse_messageType struct{}

func (x fastReflection_MsgBatchRequestEquivalenceResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgBatchRequestEquivalenceResponse)(nil)
}
func (x fastReflection_MsgBatchRequestEquivalenceResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgBatchRequestEquivalenceResponse)
}
func (x fastReflection_MsgBatchRequestEquivalenceResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgBatchRequestEquivalenceResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgBatchRequestEquivalenceResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgBatchRequestEquivalenceResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) New() protoreflect.Message {
	return new(fastReflection_MsgBatchRequestEquivalenceResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgBatchRequestEquivalenceResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Results) != 0 {
		value := protoreflect.ValueOfList(&_MsgBatchRequestEquivalenceResponse_1_list{list: &x.Results})
		if !f(fd_MsgBatchRequestEquivalenceResponse_results, value) {
			return
		}
	}
	if x.SuccessfulRequests != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SuccessfulRequests)
		if !f(fd_MsgBatchRequestEquivalenceResponse_successful_requests, value) {
			return
		}
	}
	if x.FailedRequests != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FailedRequests)
		if !f(fd_MsgBatchRequestEquivalenceResponse_failed_requests, value) {
			return
		}
	}
	if x.PendingAnalysis != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PendingAnalysis)
		if !f(fd_MsgBatchRequestEquivalenceResponse_pending_analysis, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.results":
		return len(x.Results) != 0
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.successful_requests":
		return x.SuccessfulRequests != uint64(0)
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.failed_requests":
		return x.FailedRequests != uint64(0)
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.pending_analysis":
		return x.PendingAnalysis != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.results":
		x.Results = nil
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.successful_requests":
		x.SuccessfulRequests = uint64(0)
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.failed_requests":
		x.FailedRequests = uint64(0)
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.pending_analysis":
		x.PendingAnalysis = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.results":
		if len(x.Results) == 0 {
			return protoreflect.ValueOfList(&_MsgBatchRequestEquivalenceResponse_1_list{})
		}
		listValue := &_MsgBatchRequestEquivalenceResponse_1_list{list: &x.Results}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.successful_requests":
		value := x.SuccessfulRequests
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.failed_requests":
		value := x.FailedRequests
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.pending_analysis":
		value := x.PendingAnalysis
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalenceResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.results":
		lv := value.List()
		clv := lv.(*_MsgBatchRequestEquivalenceResponse_1_list)
		x.Results = *clv.list
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.successful_requests":
		x.SuccessfulRequests = value.Uint()
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.failed_requests":
		x.FailedRequests = value.Uint()
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.pending_analysis":
		x.PendingAnalysis = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.results":
		if x.Results == nil {
			x.Results = []*BatchEquivalenceResult{}
		}
		value := &_MsgBatchRequestEquivalenceResponse_1_list{list: &x.Results}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.successful_requests":
		panic(fmt.Errorf("field successful_requests of message academictoken.equivalence.MsgBatchRequestEquivalenceResponse is not mutable"))
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.failed_requests":
		panic(fmt.Errorf("field failed_requests of message academictoken.equivalence.MsgBatchRequestEquivalenceResponse is not mutable"))
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.pending_analysis":
		panic(fmt.Errorf("field pending_analysis of message academictoken.equivalence.MsgBatchRequestEquivalenceResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.results":
		list := []*BatchEquivalenceResult{}
		return protoreflect.ValueOfList(&_MsgBatchRequestEquivalenceResponse_1_list{list: &list})
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.successful_requests":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.failed_requests":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.MsgBatchRequestEquivalenceResponse.pending_analysis":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgBatchRequestEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgBatchRequestEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgBatchRequestEquivalenceResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgBatchRequestEquivalenceResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgBatchRequestEquivalenceResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Results) > 0 {
			for _, e := range x.Results {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.SuccessfulRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.SuccessfulRequests))
		}
		if x.FailedRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.FailedRequests))
		}
		if x.PendingAnalysis != 0 {
			n += 1 + runtime.Sov(uint64(x.PendingAnalysis))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgBatchRequestEquivalenceResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PendingAnalysis != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PendingAnalysis))
			i--
			dAtA[i] = 0x20
		}
		if x.FailedRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FailedRequests))
			i--
			dAtA[i] = 0x18
		}
		if x.SuccessfulRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SuccessfulRequests))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Results) > 0 {
			for iNdEx := len(x.Results) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Results[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgBatchRequestEquivalenceResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgBatchRequestEquivalenceResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgBatchRequestEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Results = append(x.Results, &BatchEquivalenceResult{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Results[len(x.Results)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SuccessfulRequests", wireType)
				}
				x.SuccessfulRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SuccessfulRequests |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FailedRequests", wireType)
				}
				x.FailedRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FailedRequests |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingAnalysis", wireType)
				}
				x.PendingAnalysis = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PendingAnalysis |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgUpdateContractAddress                      protoreflect.MessageDescriptor
	fd_MsgUpdateContractAddress_authority            protoreflect.FieldDescriptor
	fd_MsgUpdateContractAddress_new_contract_address protoreflect.FieldDescriptor
	fd_MsgUpdateContractAddress_contract_version     protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgUpdateContractAddress = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgUpdateContractAddress")
	fd_MsgUpdateContractAddress_authority = md_MsgUpdateContractAddress.Fields().ByName("authority")
	fd_MsgUpdateContractAddress_new_contract_address = md_MsgUpdateContractAddress.Fields().ByName("new_contract_address")
	fd_MsgUpdateContractAddress_contract_version = md_MsgUpdateContractAddress.Fields().ByName("contract_version")
}

var _ protoreflect.Message = (*fastReflection_MsgUpdateContractAddress)(nil)

type fastReflection_MsgUpdateContractAddress MsgUpdateContractAddress

func (x *MsgUpdateContractAddress) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgUpdateContractAddress)(x)
}

func (x *MsgUpdateContractAddress) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgUpdateContractAddress_messageType fastReflection_MsgUpdateContractAddress_messageType
var _ protoreflect.MessageType = fastReflection_MsgUpdateContractAddress_messageType{}

type fastReflection_MsgUpdateContractAddress_messageType struct{}

func (x fastReflection_MsgUpdateContractAddress_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgUpdateContractAddress)(nil)
}
func (x fastReflection_MsgUpdateContractAddress_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgUpdateContractAddress)
}
func (x fastReflection_MsgUpdateContractAddress_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdateContractAddress
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgUpdateContractAddress) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdateContractAddress
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgUpdateContractAddress) Type() protoreflect.MessageType {
	return _fastReflection_MsgUpdateContractAddress_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgUpdateContractAddress) New() protoreflect.Message {
	return new(fastReflection_MsgUpdateContractAddress)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgUpdateContractAddress) Interface() protoreflect.ProtoMessage {
	return (*MsgUpdateContractAddress)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgUpdateContractAddress) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Authority != "" {
		value := protoreflect.ValueOfString(x.Authority)
		if !f(fd_MsgUpdateContractAddress_authority, value) {
			return
		}
	}
	if x.NewContractAddress != "" {
		value := protoreflect.ValueOfString(x.NewContractAddress)
		if !f(fd_MsgUpdateContractAddress_new_contract_address, value) {
			return
		}
	}
	if x.ContractVersion != "" {
		value := protoreflect.ValueOfString(x.ContractVersion)
		if !f(fd_MsgUpdateContractAddress_contract_version, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgUpdateContractAddress) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddress.authority":
		return x.Authority != ""
	case "academictoken.equivalence.MsgUpdateContractAddress.new_contract_address":
		return x.NewContractAddress != ""
	case "academictoken.equivalence.MsgUpdateContractAddress.contract_version":
		return x.ContractVersion != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddress"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddress does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateContractAddress) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddress.authority":
		x.Authority = ""
	case "academictoken.equivalence.MsgUpdateContractAddress.new_contract_address":
		x.NewContractAddress = ""
	case "academictoken.equivalence.MsgUpdateContractAddress.contract_version":
		x.ContractVersion = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddress"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddress does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgUpdateContractAddress) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddress.authority":
		value := x.Authority
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgUpdateContractAddress.new_contract_address":
		value := x.NewContractAddress
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgUpdateContractAddress.contract_version":
		value := x.ContractVersion
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddress"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddress does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateContractAddress) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddress.authority":
		x.Authority = value.Interface().(string)
	case "academictoken.equivalence.MsgUpdateContractAddress.new_contract_address":
		x.NewContractAddress = value.Interface().(string)
	case "academictoken.equivalence.MsgUpdateContractAddress.contract_version":
		x.ContractVersion = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddress"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddress does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateContractAddress) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddress.authority":
		panic(fmt.Errorf("field authority of message academictoken.equivalence.MsgUpdateContractAddress is not mutable"))
	case "academictoken.equivalence.MsgUpdateContractAddress.new_contract_address":
		panic(fmt.Errorf("field new_contract_address of message academictoken.equivalence.MsgUpdateContractAddress is not mutable"))
	case "academictoken.equivalence.MsgUpdateContractAddress.contract_version":
		panic(fmt.Errorf("field contract_version of message academictoken.equivalence.MsgUpdateContractAddress is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddress"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddress does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgUpdateContractAddress) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddress.authority":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgUpdateContractAddress.new_contract_address":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgUpdateContractAddress.contract_version":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddress"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddress does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgUpdateContractAddress) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgUpdateContractAddress", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgUpdateContractAddress) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateContractAddress) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgUpdateContractAddress) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgUpdateContractAddress) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgUpdateContractAddress)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Authority)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NewContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ContractVersion)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdateContractAddress)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ContractVersion) > 0 {
			i -= len(x.ContractVersion)
			copy(dAtA[i:], x.ContractVersion)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractVersion)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.NewContractAddress) > 0 {
			i -= len(x.NewContractAddress)
			copy(dAtA[i:], x.NewContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NewContractAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Authority) > 0 {
			i -= len(x.Authority)
			copy(dAtA[i:], x.Authority)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Authority)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdateContractAddress)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdateContractAddress: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdateContractAddress: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Authority = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NewContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractVersion = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgUpdateContractAddressResponse                           protoreflect.MessageDescriptor
	fd_MsgUpdateContractAddressResponse_success                   protoreflect.FieldDescriptor
	fd_MsgUpdateContractAddressResponse_previous_contract_address protoreflect.FieldDescriptor
	fd_MsgUpdateContractAddressResponse_new_contract_address      protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgUpdateContractAddressResponse = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgUpdateContractAddressResponse")
	fd_MsgUpdateContractAddressResponse_success = md_MsgUpdateContractAddressResponse.Fields().ByName("success")
	fd_MsgUpdateContractAddressResponse_previous_contract_address = md_MsgUpdateContractAddressResponse.Fields().ByName("previous_contract_address")
	fd_MsgUpdateContractAddressResponse_new_contract_address = md_MsgUpdateContractAddressResponse.Fields().ByName("new_contract_address")
}

var _ protoreflect.Message = (*fastReflection_MsgUpdateContractAddressResponse)(nil)

type fastReflection_MsgUpdateContractAddressResponse MsgUpdateContractAddressResponse

func (x *MsgUpdateContractAddressResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgUpdateContractAddressResponse)(x)
}

func (x *MsgUpdateContractAddressResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgUpdateContractAddressResponse_messageType fastReflection_MsgUpdateContractAddressResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgUpdateContractAddressResponse_messageType{}

type fastReflection_MsgUpdateContractAddressResponse_messageType struct{}

func (x fastReflection_MsgUpdateContractAddressResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgUpdateContractAddressResponse)(nil)
}
func (x fastReflection_MsgUpdateContractAddressResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgUpdateContractAddressResponse)
}
func (x fastReflection_MsgUpdateContractAddressResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdateContractAddressResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgUpdateContractAddressResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUpdateContractAddressResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgUpdateContractAddressResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgUpdateContractAddressResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgUpdateContractAddressResponse) New() protoreflect.Message {
	return new(fastReflection_MsgUpdateContractAddressResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgUpdateContractAddressResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgUpdateContractAddressResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgUpdateContractAddressResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Success != false {
		value := protoreflect.ValueOfBool(x.Success)
		if !f(fd_MsgUpdateContractAddressResponse_success, value) {
			return
		}
	}
	if x.PreviousContractAddress != "" {
		value := protoreflect.ValueOfString(x.PreviousContractAddress)
		if !f(fd_MsgUpdateContractAddressResponse_previous_contract_address, value) {
			return
		}
	}
	if x.NewContractAddress != "" {
		value := protoreflect.ValueOfString(x.NewContractAddress)
		if !f(fd_MsgUpdateContractAddressResponse_new_contract_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgUpdateContractAddressResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.success":
		return x.Success != false
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.previous_contract_address":
		return x.PreviousContractAddress != ""
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.new_contract_address":
		return x.NewContractAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddressResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddressResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateContractAddressResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.success":
		x.Success = false
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.previous_contract_address":
		x.PreviousContractAddress = ""
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.new_contract_address":
		x.NewContractAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddressResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddressResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgUpdateContractAddressResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.success":
		value := x.Success
		return protoreflect.ValueOfBool(value)
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.previous_contract_address":
		value := x.PreviousContractAddress
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.new_contract_address":
		value := x.NewContractAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddressResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddressResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateContractAddressResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.success":
		x.Success = value.Bool()
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.previous_contract_address":
		x.PreviousContractAddress = value.Interface().(string)
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.new_contract_address":
		x.NewContractAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddressResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddressResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateContractAddressResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.success":
		panic(fmt.Errorf("field success of message academictoken.equivalence.MsgUpdateContractAddressResponse is not mutable"))
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.previous_contract_address":
		panic(fmt.Errorf("field previous_contract_address of message academictoken.equivalence.MsgUpdateContractAddressResponse is not mutable"))
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.new_contract_address":
		panic(fmt.Errorf("field new_contract_address of message academictoken.equivalence.MsgUpdateContractAddressResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddressResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddressResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgUpdateContractAddressResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.success":
		return protoreflect.ValueOfBool(false)
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.previous_contract_address":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgUpdateContractAddressResponse.new_contract_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgUpdateContractAddressResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgUpdateContractAddressResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgUpdateContractAddressResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgUpdateContractAddressResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgUpdateContractAddressResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUpdateContractAddressResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgUpdateContractAddressResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgUpdateContractAddressResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgUpdateContractAddressResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Success {
			n += 2
		}
		l = len(x.PreviousContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NewContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdateContractAddressResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.NewContractAddress) > 0 {
			i -= len(x.NewContractAddress)
			copy(dAtA[i:], x.NewContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NewContractAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.PreviousContractAddress) > 0 {
			i -= len(x.PreviousContractAddress)
			copy(dAtA[i:], x.PreviousContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PreviousContractAddress)))
			i--
			dAtA[i] = 0x12
		}
		if x.Success {
			i--
			if x.Success {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgUpdateContractAddressResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdateContractAddressResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUpdateContractAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Success = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PreviousContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PreviousContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NewContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgReanalyzeEquivalence                   protoreflect.MessageDescriptor
	fd_MsgReanalyzeEquivalence_creator           protoreflect.FieldDescriptor
	fd_MsgReanalyzeEquivalence_equivalence_id    protoreflect.FieldDescriptor
	fd_MsgReanalyzeEquivalence_contract_address  protoreflect.FieldDescriptor
	fd_MsgReanalyzeEquivalence_reanalysis_reason protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgReanalyzeEquivalence = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgReanalyzeEquivalence")
	fd_MsgReanalyzeEquivalence_creator = md_MsgReanalyzeEquivalence.Fields().ByName("creator")
	fd_MsgReanalyzeEquivalence_equivalence_id = md_MsgReanalyzeEquivalence.Fields().ByName("equivalence_id")
	fd_MsgReanalyzeEquivalence_contract_address = md_MsgReanalyzeEquivalence.Fields().ByName("contract_address")
	fd_MsgReanalyzeEquivalence_reanalysis_reason = md_MsgReanalyzeEquivalence.Fields().ByName("reanalysis_reason")
}

var _ protoreflect.Message = (*fastReflection_MsgReanalyzeEquivalence)(nil)

type fastReflection_MsgReanalyzeEquivalence MsgReanalyzeEquivalence

func (x *MsgReanalyzeEquivalence) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgReanalyzeEquivalence)(x)
}

func (x *MsgReanalyzeEquivalence) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgReanalyzeEquivalence_messageType fastReflection_MsgReanalyzeEquivalence_messageType
var _ protoreflect.MessageType = fastReflection_MsgReanalyzeEquivalence_messageType{}

type fastReflection_MsgReanalyzeEquivalence_messageType struct{}

func (x fastReflection_MsgReanalyzeEquivalence_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgReanalyzeEquivalence)(nil)
}
func (x fastReflection_MsgReanalyzeEquivalence_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgReanalyzeEquivalence)
}
func (x fastReflection_MsgReanalyzeEquivalence_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgReanalyzeEquivalence
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgReanalyzeEquivalence) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgReanalyzeEquivalence
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgReanalyzeEquivalence) Type() protoreflect.MessageType {
	return _fastReflection_MsgReanalyzeEquivalence_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgReanalyzeEquivalence) New() protoreflect.Message {
	return new(fastReflection_MsgReanalyzeEquivalence)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgReanalyzeEquivalence) Interface() protoreflect.ProtoMessage {
	return (*MsgReanalyzeEquivalence)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgReanalyzeEquivalence) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_MsgReanalyzeEquivalence_creator, value) {
			return
		}
	}
	if x.EquivalenceId != "" {
		value := protoreflect.ValueOfString(x.EquivalenceId)
		if !f(fd_MsgReanalyzeEquivalence_equivalence_id, value) {
			return
		}
	}
	if x.ContractAddress != "" {
		value := protoreflect.ValueOfString(x.ContractAddress)
		if !f(fd_MsgReanalyzeEquivalence_contract_address, value) {
			return
		}
	}
	if x.ReanalysisReason != "" {
		value := protoreflect.ValueOfString(x.ReanalysisReason)
		if !f(fd_MsgReanalyzeEquivalence_reanalysis_reason, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgReanalyzeEquivalence) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalence.creator":
		return x.Creator != ""
	case "academictoken.equivalence.MsgReanalyzeEquivalence.equivalence_id":
		return x.EquivalenceId != ""
	case "academictoken.equivalence.MsgReanalyzeEquivalence.contract_address":
		return x.ContractAddress != ""
	case "academictoken.equivalence.MsgReanalyzeEquivalence.reanalysis_reason":
		return x.ReanalysisReason != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalence does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgReanalyzeEquivalence) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalence.creator":
		x.Creator = ""
	case "academictoken.equivalence.MsgReanalyzeEquivalence.equivalence_id":
		x.EquivalenceId = ""
	case "academictoken.equivalence.MsgReanalyzeEquivalence.contract_address":
		x.ContractAddress = ""
	case "academictoken.equivalence.MsgReanalyzeEquivalence.reanalysis_reason":
		x.ReanalysisReason = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalence does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgReanalyzeEquivalence) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalence.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgReanalyzeEquivalence.equivalence_id":
		value := x.EquivalenceId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgReanalyzeEquivalence.contract_address":
		value := x.ContractAddress
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgReanalyzeEquivalence.reanalysis_reason":
		value := x.ReanalysisReason
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalence does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgReanalyzeEquivalence) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalence.creator":
		x.Creator = value.Interface().(string)
	case "academictoken.equivalence.MsgReanalyzeEquivalence.equivalence_id":
		x.EquivalenceId = value.Interface().(string)
	case "academictoken.equivalence.MsgReanalyzeEquivalence.contract_address":
		x.ContractAddress = value.Interface().(string)
	case "academictoken.equivalence.MsgReanalyzeEquivalence.reanalysis_reason":
		x.ReanalysisReason = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalence does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgReanalyzeEquivalence) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalence.creator":
		panic(fmt.Errorf("field creator of message academictoken.equivalence.MsgReanalyzeEquivalence is not mutable"))
	case "academictoken.equivalence.MsgReanalyzeEquivalence.equivalence_id":
		panic(fmt.Errorf("field equivalence_id of message academictoken.equivalence.MsgReanalyzeEquivalence is not mutable"))
	case "academictoken.equivalence.MsgReanalyzeEquivalence.contract_address":
		panic(fmt.Errorf("field contract_address of message academictoken.equivalence.MsgReanalyzeEquivalence is not mutable"))
	case "academictoken.equivalence.MsgReanalyzeEquivalence.reanalysis_reason":
		panic(fmt.Errorf("field reanalysis_reason of message academictoken.equivalence.MsgReanalyzeEquivalence is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalence does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgReanalyzeEquivalence) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalence.creator":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgReanalyzeEquivalence.equivalence_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgReanalyzeEquivalence.contract_address":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgReanalyzeEquivalence.reanalysis_reason":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalence"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalence does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgReanalyzeEquivalence) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgReanalyzeEquivalence", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgReanalyzeEquivalence) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgReanalyzeEquivalence) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgReanalyzeEquivalence) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgReanalyzeEquivalence) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgReanalyzeEquivalence)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EquivalenceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ReanalysisReason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgReanalyzeEquivalence)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ReanalysisReason) > 0 {
			i -= len(x.ReanalysisReason)
			copy(dAtA[i:], x.ReanalysisReason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReanalysisReason)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ContractAddress) > 0 {
			i -= len(x.ContractAddress)
			copy(dAtA[i:], x.ContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.EquivalenceId) > 0 {
			i -= len(x.EquivalenceId)
			copy(dAtA[i:], x.EquivalenceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalenceId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgReanalyzeEquivalence)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgReanalyzeEquivalence: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgReanalyzeEquivalence: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalenceId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReanalysisReason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReanalysisReason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgReanalyzeEquivalenceResponse                     protoreflect.MessageDescriptor
	fd_MsgReanalyzeEquivalenceResponse_success             protoreflect.FieldDescriptor
	fd_MsgReanalyzeEquivalenceResponse_previous_status     protoreflect.FieldDescriptor
	fd_MsgReanalyzeEquivalenceResponse_new_status          protoreflect.FieldDescriptor
	fd_MsgReanalyzeEquivalenceResponse_equivalence_percent protoreflect.FieldDescriptor
	fd_MsgReanalyzeEquivalenceResponse_analysis_metadata   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_tx_proto_init()
	md_MsgReanalyzeEquivalenceResponse = File_academictoken_equivalence_tx_proto.Messages().ByName("MsgReanalyzeEquivalenceResponse")
	fd_MsgReanalyzeEquivalenceResponse_success = md_MsgReanalyzeEquivalenceResponse.Fields().ByName("success")
	fd_MsgReanalyzeEquivalenceResponse_previous_status = md_MsgReanalyzeEquivalenceResponse.Fields().ByName("previous_status")
	fd_MsgReanalyzeEquivalenceResponse_new_status = md_MsgReanalyzeEquivalenceResponse.Fields().ByName("new_status")
	fd_MsgReanalyzeEquivalenceResponse_equivalence_percent = md_MsgReanalyzeEquivalenceResponse.Fields().ByName("equivalence_percent")
	fd_MsgReanalyzeEquivalenceResponse_analysis_metadata = md_MsgReanalyzeEquivalenceResponse.Fields().ByName("analysis_metadata")
}

var _ protoreflect.Message = (*fastReflection_MsgReanalyzeEquivalenceResponse)(nil)

type fastReflection_MsgReanalyzeEquivalenceResponse MsgReanalyzeEquivalenceResponse

func (x *MsgReanalyzeEquivalenceResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgReanalyzeEquivalenceResponse)(x)
}

func (x *MsgReanalyzeEquivalenceResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_tx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgReanalyzeEquivalenceResponse_messageType fastReflection_MsgReanalyzeEquivalenceResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgReanalyzeEquivalenceResponse_messageType{}

type fastReflection_MsgReanalyzeEquivalenceResponse_messageType struct{}

func (x fastReflection_MsgReanalyzeEquivalenceResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgReanalyzeEquivalenceResponse)(nil)
}
func (x fastReflection_MsgReanalyzeEquivalenceResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgReanalyzeEquivalenceResponse)
}
func (x fastReflection_MsgReanalyzeEquivalenceResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgReanalyzeEquivalenceResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgReanalyzeEquivalenceResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgReanalyzeEquivalenceResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) New() protoreflect.Message {
	return new(fastReflection_MsgReanalyzeEquivalenceResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgReanalyzeEquivalenceResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Success != false {
		value := protoreflect.ValueOfBool(x.Success)
		if !f(fd_MsgReanalyzeEquivalenceResponse_success, value) {
			return
		}
	}
	if x.PreviousStatus != "" {
		value := protoreflect.ValueOfString(x.PreviousStatus)
		if !f(fd_MsgReanalyzeEquivalenceResponse_previous_status, value) {
			return
		}
	}
	if x.NewStatus != "" {
		value := protoreflect.ValueOfString(x.NewStatus)
		if !f(fd_MsgReanalyzeEquivalenceResponse_new_status, value) {
			return
		}
	}
	if x.EquivalencePercent != "" {
		value := protoreflect.ValueOfString(x.EquivalencePercent)
		if !f(fd_MsgReanalyzeEquivalenceResponse_equivalence_percent, value) {
			return
		}
	}
	if x.AnalysisMetadata != "" {
		value := protoreflect.ValueOfString(x.AnalysisMetadata)
		if !f(fd_MsgReanalyzeEquivalenceResponse_analysis_metadata, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.success":
		return x.Success != false
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.previous_status":
		return x.PreviousStatus != ""
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.new_status":
		return x.NewStatus != ""
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.equivalence_percent":
		return x.EquivalencePercent != ""
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.analysis_metadata":
		return x.AnalysisMetadata != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.success":
		x.Success = false
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.previous_status":
		x.PreviousStatus = ""
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.new_status":
		x.NewStatus = ""
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.equivalence_percent":
		x.EquivalencePercent = ""
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.analysis_metadata":
		x.AnalysisMetadata = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.success":
		value := x.Success
		return protoreflect.ValueOfBool(value)
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.previous_status":
		value := x.PreviousStatus
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.new_status":
		value := x.NewStatus
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.equivalence_percent":
		value := x.EquivalencePercent
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.analysis_metadata":
		value := x.AnalysisMetadata
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalenceResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.success":
		x.Success = value.Bool()
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.previous_status":
		x.PreviousStatus = value.Interface().(string)
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.new_status":
		x.NewStatus = value.Interface().(string)
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.equivalence_percent":
		x.EquivalencePercent = value.Interface().(string)
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.analysis_metadata":
		x.AnalysisMetadata = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.success":
		panic(fmt.Errorf("field success of message academictoken.equivalence.MsgReanalyzeEquivalenceResponse is not mutable"))
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.previous_status":
		panic(fmt.Errorf("field previous_status of message academictoken.equivalence.MsgReanalyzeEquivalenceResponse is not mutable"))
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.new_status":
		panic(fmt.Errorf("field new_status of message academictoken.equivalence.MsgReanalyzeEquivalenceResponse is not mutable"))
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.equivalence_percent":
		panic(fmt.Errorf("field equivalence_percent of message academictoken.equivalence.MsgReanalyzeEquivalenceResponse is not mutable"))
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.analysis_metadata":
		panic(fmt.Errorf("field analysis_metadata of message academictoken.equivalence.MsgReanalyzeEquivalenceResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.success":
		return protoreflect.ValueOfBool(false)
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.previous_status":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.new_status":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.equivalence_percent":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.MsgReanalyzeEquivalenceResponse.analysis_metadata":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.MsgReanalyzeEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.MsgReanalyzeEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.MsgReanalyzeEquivalenceResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgReanalyzeEquivalenceResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgReanalyzeEquivalenceResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Success {
			n += 2
		}
		l = len(x.PreviousStatus)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NewStatus)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EquivalencePercent)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AnalysisMetadata)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgReanalyzeEquivalenceResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AnalysisMetadata) > 0 {
			i -= len(x.AnalysisMetadata)
			copy(dAtA[i:], x.AnalysisMetadata)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnalysisMetadata)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.EquivalencePercent) > 0 {
			i -= len(x.EquivalencePercent)
			copy(dAtA[i:], x.EquivalencePercent)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalencePercent)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.NewStatus) > 0 {
			i -= len(x.NewStatus)
			copy(dAtA[i:], x.NewStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NewStatus)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.PreviousStatus) > 0 {
			i -= len(x.PreviousStatus)
			copy(dAtA[i:], x.PreviousStatus)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PreviousStatus)))
			i--
			dAtA[i] = 0x12
		}
		if x.Success {
			i--
			if x.Success {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgReanalyzeEquivalenceResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgReanalyzeEquivalenceResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgReanalyzeEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Success = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PreviousStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PreviousStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NewStatus = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalencePercent = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisMetadata", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnalysisMetadata = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: academictoken/equivalence/tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	// NOTE: All parameters must be supplied.
	Params *Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *MsgUpdateParams) Reset() {
	*x = MsgUpdateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdateParams) ProtoMessage() {}

// Deprecated: Use MsgUpdateParams.ProtoReflect.Descriptor instead.
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MsgUpdateParams) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *MsgUpdateParams) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

// MsgUpdateParamsResponse defines the response structure for executing a MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgUpdateParamsResponse) Reset() {
	*x = MsgUpdateParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdateParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdateParamsResponse) ProtoMessage() {}

// Deprecated: Use MsgUpdateParamsResponse.ProtoReflect.Descriptor instead.
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{1}
}

// MsgRequestEquivalence requests automated equivalence analysis between two subjects
type MsgRequestEquivalence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SourceSubjectId    string `protobuf:"bytes,2,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetInstitution  string `protobuf:"bytes,3,opt,name=target_institution,json=targetInstitution,proto3" json:"target_institution,omitempty"`
	TargetSubjectId    string `protobuf:"bytes,4,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	ForceRecalculation bool   `protobuf:"varint,5,opt,name=force_recalculation,json=forceRecalculation,proto3" json:"force_recalculation,omitempty"` // Force recalculation even if already exists
	ContractAddress    string `protobuf:"bytes,6,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`           // Optional: specific contract to use for analysis
}

func (x *MsgRequestEquivalence) Reset() {
	*x = MsgRequestEquivalence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRequestEquivalence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRequestEquivalence) ProtoMessage() {}

// Deprecated: Use MsgRequestEquivalence.ProtoReflect.Descriptor instead.
func (*MsgRequestEquivalence) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{2}
}

func (x *MsgRequestEquivalence) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *MsgRequestEquivalence) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *MsgRequestEquivalence) GetTargetInstitution() string {
	if x != nil {
		return x.TargetInstitution
	}
	return ""
}

func (x *MsgRequestEquivalence) GetTargetSubjectId() string {
	if x != nil {
		return x.TargetSubjectId
	}
	return ""
}

func (x *MsgRequestEquivalence) GetForceRecalculation() bool {
	if x != nil {
		return x.ForceRecalculation
	}
	return false
}

func (x *MsgRequestEquivalence) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

// MsgRequestEquivalenceResponse defines the response for MsgRequestEquivalence
type MsgRequestEquivalenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquivalenceId     string `protobuf:"bytes,1,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
	Status            string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	AnalysisTriggered bool   `protobuf:"varint,3,opt,name=analysis_triggered,json=analysisTriggered,proto3" json:"analysis_triggered,omitempty"` // Whether contract analysis was immediately triggered
}

func (x *MsgRequestEquivalenceResponse) Reset() {
	*x = MsgRequestEquivalenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgRequestEquivalenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgRequestEquivalenceResponse) ProtoMessage() {}

// Deprecated: Use MsgRequestEquivalenceResponse.ProtoReflect.Descriptor instead.
func (*MsgRequestEquivalenceResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{3}
}

func (x *MsgRequestEquivalenceResponse) GetEquivalenceId() string {
	if x != nil {
		return x.EquivalenceId
	}
	return ""
}

func (x *MsgRequestEquivalenceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MsgRequestEquivalenceResponse) GetAnalysisTriggered() bool {
	if x != nil {
		return x.AnalysisTriggered
	}
	return false
}

// MsgExecuteEquivalenceAnalysis triggers the CosmWasm contract analysis
type MsgExecuteEquivalenceAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EquivalenceId      string `protobuf:"bytes,2,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
	ContractAddress    string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`          // CosmWasm contract to execute
	AnalysisParameters string `protobuf:"bytes,4,opt,name=analysis_parameters,json=analysisParameters,proto3" json:"analysis_parameters,omitempty"` // JSON parameters for the contract
}

func (x *MsgExecuteEquivalenceAnalysis) Reset() {
	*x = MsgExecuteEquivalenceAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgExecuteEquivalenceAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgExecuteEquivalenceAnalysis) ProtoMessage() {}

// Deprecated: Use MsgExecuteEquivalenceAnalysis.ProtoReflect.Descriptor instead.
func (*MsgExecuteEquivalenceAnalysis) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{4}
}

func (x *MsgExecuteEquivalenceAnalysis) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *MsgExecuteEquivalenceAnalysis) GetEquivalenceId() string {
	if x != nil {
		return x.EquivalenceId
	}
	return ""
}

func (x *MsgExecuteEquivalenceAnalysis) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *MsgExecuteEquivalenceAnalysis) GetAnalysisParameters() string {
	if x != nil {
		return x.AnalysisParameters
	}
	return ""
}

// MsgExecuteEquivalenceAnalysisResponse defines the response for MsgExecuteEquivalenceAnalysis
type MsgExecuteEquivalenceAnalysisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	EquivalencePercent string `protobuf:"bytes,2,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"` // Result from contract
	AnalysisMetadata   string `protobuf:"bytes,3,opt,name=analysis_metadata,json=analysisMetadata,proto3" json:"analysis_metadata,omitempty"`       // Complete analysis data from contract
	AnalysisHash       string `protobuf:"bytes,4,opt,name=analysis_hash,json=analysisHash,proto3" json:"analysis_hash,omitempty"`                   // Hash for integrity verification
	UpdatedStatus      string `protobuf:"bytes,5,opt,name=updated_status,json=updatedStatus,proto3" json:"updated_status,omitempty"`                // New status after analysis
}

func (x *MsgExecuteEquivalenceAnalysisResponse) Reset() {
	*x = MsgExecuteEquivalenceAnalysisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgExecuteEquivalenceAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgExecuteEquivalenceAnalysisResponse) ProtoMessage() {}

// Deprecated: Use MsgExecuteEquivalenceAnalysisResponse.ProtoReflect.Descriptor instead.
func (*MsgExecuteEquivalenceAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{5}
}

func (x *MsgExecuteEquivalenceAnalysisResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MsgExecuteEquivalenceAnalysisResponse) GetEquivalencePercent() string {
	if x != nil {
		return x.EquivalencePercent
	}
	return ""
}

func (x *MsgExecuteEquivalenceAnalysisResponse) GetAnalysisMetadata() string {
	if x != nil {
		return x.AnalysisMetadata
	}
	return ""
}

func (x *MsgExecuteEquivalenceAnalysisResponse) GetAnalysisHash() string {
	if x != nil {
		return x.AnalysisHash
	}
	return ""
}

func (x *MsgExecuteEquivalenceAnalysisResponse) GetUpdatedStatus() string {
	if x != nil {
		return x.UpdatedStatus
	}
	return ""
}

// EquivalenceRequest defines a single equivalence request for batch operations
type EquivalenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSubjectId   string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetInstitution string `protobuf:"bytes,2,opt,name=target_institution,json=targetInstitution,proto3" json:"target_institution,omitempty"`
	TargetSubjectId   string `protobuf:"bytes,3,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
}

func (x *EquivalenceRequest) Reset() {
	*x = EquivalenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquivalenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquivalenceRequest) ProtoMessage() {}

// Deprecated: Use EquivalenceRequest.ProtoReflect.Descriptor instead.
func (*EquivalenceRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{6}
}

func (x *EquivalenceRequest) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *EquivalenceRequest) GetTargetInstitution() string {
	if x != nil {
		return x.TargetInstitution
	}
	return ""
}

func (x *EquivalenceRequest) GetTargetSubjectId() string {
	if x != nil {
		return x.TargetSubjectId
	}
	return ""
}

// MsgBatchRequestEquivalence allows requesting multiple equivalences at once
type MsgBatchRequestEquivalence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator            string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Requests           []*EquivalenceRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	ForceRecalculation bool                  `protobuf:"varint,3,opt,name=force_recalculation,json=forceRecalculation,proto3" json:"force_recalculation,omitempty"`
	ContractAddress    string                `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"` // Contract to use for all analyses
}

func (x *MsgBatchRequestEquivalence) Reset() {
	*x = MsgBatchRequestEquivalence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgBatchRequestEquivalence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgBatchRequestEquivalence) ProtoMessage() {}

// Deprecated: Use MsgBatchRequestEquivalence.ProtoReflect.Descriptor instead.
func (*MsgBatchRequestEquivalence) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{7}
}

func (x *MsgBatchRequestEquivalence) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *MsgBatchRequestEquivalence) GetRequests() []*EquivalenceRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *MsgBatchRequestEquivalence) GetForceRecalculation() bool {
	if x != nil {
		return x.ForceRecalculation
	}
	return false
}

func (x *MsgBatchRequestEquivalence) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

// BatchEquivalenceResult defines the result of a single equivalence request in a batch
type BatchEquivalenceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquivalenceId      string `protobuf:"bytes,1,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
	SourceSubjectId    string `protobuf:"bytes,2,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetSubjectId    string `protobuf:"bytes,3,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	Status             string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	EquivalencePercent string `protobuf:"bytes,5,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"` // If analysis completed immediately
	Error              string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`                                                     // Empty if successful
}

func (x *BatchEquivalenceResult) Reset() {
	*x = BatchEquivalenceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEquivalenceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEquivalenceResult) ProtoMessage() {}

// Deprecated: Use BatchEquivalenceResult.ProtoReflect.Descriptor instead.
func (*BatchEquivalenceResult) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{8}
}

func (x *BatchEquivalenceResult) GetEquivalenceId() string {
	if x != nil {
		return x.EquivalenceId
	}
	return ""
}

func (x *BatchEquivalenceResult) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *BatchEquivalenceResult) GetTargetSubjectId() string {
	if x != nil {
		return x.TargetSubjectId
	}
	return ""
}

func (x *BatchEquivalenceResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BatchEquivalenceResult) GetEquivalencePercent() string {
	if x != nil {
		return x.EquivalencePercent
	}
	return ""
}

func (x *BatchEquivalenceResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// MsgBatchRequestEquivalenceResponse defines the response for MsgBatchRequestEquivalence
type MsgBatchRequestEquivalenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results            []*BatchEquivalenceResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	SuccessfulRequests uint64                    `protobuf:"varint,2,opt,name=successful_requests,json=successfulRequests,proto3" json:"successful_requests,omitempty"`
	FailedRequests     uint64                    `protobuf:"varint,3,opt,name=failed_requests,json=failedRequests,proto3" json:"failed_requests,omitempty"`
	PendingAnalysis    uint64                    `protobuf:"varint,4,opt,name=pending_analysis,json=pendingAnalysis,proto3" json:"pending_analysis,omitempty"` // Number of requests awaiting contract analysis
}

func (x *MsgBatchRequestEquivalenceResponse) Reset() {
	*x = MsgBatchRequestEquivalenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgBatchRequestEquivalenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgBatchRequestEquivalenceResponse) ProtoMessage() {}

// Deprecated: Use MsgBatchRequestEquivalenceResponse.ProtoReflect.Descriptor instead.
func (*MsgBatchRequestEquivalenceResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{9}
}

func (x *MsgBatchRequestEquivalenceResponse) GetResults() []*BatchEquivalenceResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *MsgBatchRequestEquivalenceResponse) GetSuccessfulRequests() uint64 {
	if x != nil {
		return x.SuccessfulRequests
	}
	return 0
}

func (x *MsgBatchRequestEquivalenceResponse) GetFailedRequests() uint64 {
	if x != nil {
		return x.FailedRequests
	}
	return 0
}

func (x *MsgBatchRequestEquivalenceResponse) GetPendingAnalysis() uint64 {
	if x != nil {
		return x.PendingAnalysis
	}
	return 0
}

// MsgUpdateContractAddress updates the CosmWasm contract address for equivalence analysis
type MsgUpdateContractAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authority          string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	NewContractAddress string `protobuf:"bytes,2,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
	ContractVersion    string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"` // Version identifier for the new contract
}

func (x *MsgUpdateContractAddress) Reset() {
	*x = MsgUpdateContractAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdateContractAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdateContractAddress) ProtoMessage() {}

// Deprecated: Use MsgUpdateContractAddress.ProtoReflect.Descriptor instead.
func (*MsgUpdateContractAddress) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{10}
}

func (x *MsgUpdateContractAddress) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *MsgUpdateContractAddress) GetNewContractAddress() string {
	if x != nil {
		return x.NewContractAddress
	}
	return ""
}

func (x *MsgUpdateContractAddress) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

// MsgUpdateContractAddressResponse defines the response for MsgUpdateContractAddress
type MsgUpdateContractAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                 bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PreviousContractAddress string `protobuf:"bytes,2,opt,name=previous_contract_address,json=previousContractAddress,proto3" json:"previous_contract_address,omitempty"`
	NewContractAddress      string `protobuf:"bytes,3,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
}

func (x *MsgUpdateContractAddressResponse) Reset() {
	*x = MsgUpdateContractAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUpdateContractAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUpdateContractAddressResponse) ProtoMessage() {}

// Deprecated: Use MsgUpdateContractAddressResponse.ProtoReflect.Descriptor instead.
func (*MsgUpdateContractAddressResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{11}
}

func (x *MsgUpdateContractAddressResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MsgUpdateContractAddressResponse) GetPreviousContractAddress() string {
	if x != nil {
		return x.PreviousContractAddress
	}
	return ""
}

func (x *MsgUpdateContractAddressResponse) GetNewContractAddress() string {
	if x != nil {
		return x.NewContractAddress
	}
	return ""
}

// MsgReanalyzeEquivalence forces re-analysis of an existing equivalence
type MsgReanalyzeEquivalence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	EquivalenceId    string `protobuf:"bytes,2,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
	ContractAddress  string `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`    // Optional: use specific contract version
	ReanalysisReason string `protobuf:"bytes,4,opt,name=reanalysis_reason,json=reanalysisReason,proto3" json:"reanalysis_reason,omitempty"` // Why re-analysis is needed
}

func (x *MsgReanalyzeEquivalence) Reset() {
	*x = MsgReanalyzeEquivalence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReanalyzeEquivalence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReanalyzeEquivalence) ProtoMessage() {}

// Deprecated: Use MsgReanalyzeEquivalence.ProtoReflect.Descriptor instead.
func (*MsgReanalyzeEquivalence) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{12}
}

func (x *MsgReanalyzeEquivalence) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *MsgReanalyzeEquivalence) GetEquivalenceId() string {
	if x != nil {
		return x.EquivalenceId
	}
	return ""
}

func (x *MsgReanalyzeEquivalence) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *MsgReanalyzeEquivalence) GetReanalysisReason() string {
	if x != nil {
		return x.ReanalysisReason
	}
	return ""
}

// MsgReanalyzeEquivalenceResponse defines the response for MsgReanalyzeEquivalence
type MsgReanalyzeEquivalenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success            bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PreviousStatus     string `protobuf:"bytes,2,opt,name=previous_status,json=previousStatus,proto3" json:"previous_status,omitempty"`
	NewStatus          string `protobuf:"bytes,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	EquivalencePercent string `protobuf:"bytes,4,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"` // New percentage from re-analysis
	AnalysisMetadata   string `protobuf:"bytes,5,opt,name=analysis_metadata,json=analysisMetadata,proto3" json:"analysis_metadata,omitempty"`       // Updated analysis data
}

func (x *MsgReanalyzeEquivalenceResponse) Reset() {
	*x = MsgReanalyzeEquivalenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_tx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgReanalyzeEquivalenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgReanalyzeEquivalenceResponse) ProtoMessage() {}

// Deprecated: Use MsgReanalyzeEquivalenceResponse.ProtoReflect.Descriptor instead.
func (*MsgReanalyzeEquivalenceResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_tx_proto_rawDescGZIP(), []int{13}
}

func (x *MsgReanalyzeEquivalenceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MsgReanalyzeEquivalenceResponse) GetPreviousStatus() string {
	if x != nil {
		return x.PreviousStatus
	}
	return ""
}

func (x *MsgReanalyzeEquivalenceResponse) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *MsgReanalyzeEquivalenceResponse) GetEquivalencePercent() string {
	if x != nil {
		return x.EquivalencePercent
	}
	return ""
}

func (x *MsgReanalyzeEquivalenceResponse) GetAnalysisMetadata() string {
	if x != nil {
		return x.AnalysisMetadata
	}
	return ""
}

var File_academictoken_equivalence_tx_proto protoreflect.FileDescriptor

var file_academictoken_equivalence_tx_proto_rawDesc = []byte{
	0x0a, 0x22, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x1a,
	0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d,
	0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x3a, 0x3e, 0x82, 0xe7, 0xb0, 0x2a, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x8a, 0xe7, 0xb0, 0x2a, 0x2b, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x78, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa2, 0x02, 0x0a, 0x15, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x0c, 0x82, 0xe7, 0xb0, 0x2a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x1d, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x1d, 0x4d, 0x73, 0x67, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x0c, 0x82, 0xe7, 0xb0, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x22, 0xeb, 0x01, 0x0a, 0x25, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x9b, 0x01, 0x0a, 0x12, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xeb, 0x01, 0x0a, 0x1a, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a,
	0x0c, 0x82, 0xe7, 0xb0, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xf6, 0x01,
	0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf6, 0x01, 0x0a, 0x22, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x18, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x0e, 0x82, 0xe7, 0xb0, 0x2a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc0,
	0x01, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x3a, 0x0c, 0x82, 0xe7, 0xb0, 0x2a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0xe1, 0x01, 0x0a, 0x1f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x32, 0xc1, 0x06, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x6e, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x2e,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x32, 0x2e, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x38, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x98, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12,
	0x38, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x40, 0x2e, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x17,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x3d,
	0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x3b, 0x2e, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x32, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d,
	0x73, 0x67, 0x52, 0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x3a, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x05, 0x80, 0xe7, 0xb0, 0x2a, 0x01, 0x42, 0xda, 0x01, 0x0a, 0x1d, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x07, 0x54, 0x78, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58, 0xaa, 0x02, 0x19, 0x41, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0xca, 0x02, 0x19, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0xe2, 0x02, 0x25, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5c, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x41, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3a, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_academictoken_equivalence_tx_proto_rawDescOnce sync.Once
	file_academictoken_equivalence_tx_proto_rawDescData = file_academictoken_equivalence_tx_proto_rawDesc
)

func file_academictoken_equivalence_tx_proto_rawDescGZIP() []byte {
	file_academictoken_equivalence_tx_proto_rawDescOnce.Do(func() {
		file_academictoken_equivalence_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_academictoken_equivalence_tx_proto_rawDescData)
	})
	return file_academictoken_equivalence_tx_proto_rawDescData
}

var file_academictoken_equivalence_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_academictoken_equivalence_tx_proto_goTypes = []interface{}{
	(*MsgUpdateParams)(nil),                       // 0: academictoken.equivalence.MsgUpdateParams
	(*MsgUpdateParamsResponse)(nil),               // 1: academictoken.equivalence.MsgUpdateParamsResponse
	(*MsgRequestEquivalence)(nil),                 // 2: academictoken.equivalence.MsgRequestEquivalence
	(*MsgRequestEquivalenceResponse)(nil),         // 3: academictoken.equivalence.MsgRequestEquivalenceResponse
	(*MsgExecuteEquivalenceAnalysis)(nil),         // 4: academictoken.equivalence.MsgExecuteEquivalenceAnalysis
	(*MsgExecuteEquivalenceAnalysisResponse)(nil), // 5: academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse
	(*EquivalenceRequest)(nil),                    // 6: academictoken.equivalence.EquivalenceRequest
	(*MsgBatchRequestEquivalence)(nil),            // 7: academictoken.equivalence.MsgBatchRequestEquivalence
	(*BatchEquivalenceResult)(nil),                // 8: academictoken.equivalence.BatchEquivalenceResult
	(*MsgBatchRequestEquivalenceResponse)(nil),    // 9: academictoken.equivalence.MsgBatchRequestEquivalenceResponse
	(*MsgUpdateContractAddress)(nil),              // 10: academictoken.equivalence.MsgUpdateContractAddress
	(*MsgUpdateContractAddressResponse)(nil),      // 11: academictoken.equivalence.MsgUpdateContractAddressResponse
	(*MsgReanalyzeEquivalence)(nil),               // 12: academictoken.equivalence.MsgReanalyzeEquivalence
	(*MsgReanalyzeEquivalenceResponse)(nil),       // 13: academictoken.equivalence.MsgReanalyzeEquivalenceResponse
	(*Params)(nil),                                // 14: academictoken.equivalence.Params
}
var file_academictoken_equivalence_tx_proto_depIdxs = []int32{
	14, // 0: academictoken.equivalence.MsgUpdateParams.params:type_name -> academictoken.equivalence.Params
	6,  // 1: academictoken.equivalence.MsgBatchRequestEquivalence.requests:type_name -> academictoken.equivalence.EquivalenceRequest
	8,  // 2: academictoken.equivalence.MsgBatchRequestEquivalenceResponse.results:type_name -> academictoken.equivalence.BatchEquivalenceResult
	0,  // 3: academictoken.equivalence.Msg.UpdateParams:input_type -> academictoken.equivalence.MsgUpdateParams
	2,  // 4: academictoken.equivalence.Msg.RequestEquivalence:input_type -> academictoken.equivalence.MsgRequestEquivalence
	4,  // 5: academictoken.equivalence.Msg.ExecuteEquivalenceAnalysis:input_type -> academictoken.equivalence.MsgExecuteEquivalenceAnalysis
	7,  // 6: academictoken.equivalence.Msg.BatchRequestEquivalence:input_type -> academictoken.equivalence.MsgBatchRequestEquivalence
	10, // 7: academictoken.equivalence.Msg.UpdateContractAddress:input_type -> academictoken.equivalence.MsgUpdateContractAddress
	12, // 8: academictoken.equivalence.Msg.ReanalyzeEquivalence:input_type -> academictoken.equivalence.MsgReanalyzeEquivalence
	1,  // 9: academictoken.equivalence.Msg.UpdateParams:output_type -> academictoken.equivalence.MsgUpdateParamsResponse
	3,  // 10: academictoken.equivalence.Msg.RequestEquivalence:output_type -> academictoken.equivalence.MsgRequestEquivalenceResponse
	5,  // 11: academictoken.equivalence.Msg.ExecuteEquivalenceAnalysis:output_type -> academictoken.equivalence.MsgExecuteEquivalenceAnalysisResponse
	9,  // 12: academictoken.equivalence.Msg.BatchRequestEquivalence:output_type -> academictoken.equivalence.MsgBatchRequestEquivalenceResponse
	11, // 13: academictoken.equivalence.Msg.UpdateContractAddress:output_type -> academictoken.equivalence.MsgUpdateContractAddressResponse
	13, // 14: academictoken.equivalence.Msg.ReanalyzeEquivalence:output_type -> academictoken.equivalence.MsgReanalyzeEquivalenceResponse
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_academictoken_equivalence_tx_proto_init() }
func file_academictoken_equivalence_tx_proto_init() {
	if File_academictoken_equivalence_tx_proto != nil {
		return
	}
	file_academictoken_equivalence_params_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_academictoken_equivalence_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdateParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRequestEquivalence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgRequestEquivalenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgExecuteEquivalenceAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgExecuteEquivalenceAnalysisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquivalenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgBatchRequestEquivalence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEquivalenceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgBatchRequestEquivalenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdateContractAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUpdateContractAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReanalyzeEquivalence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_tx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgReanalyzeEquivalenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_academictoken_equivalence_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_academictoken_equivalence_tx_proto_goTypes,
		DependencyIndexes: file_academictoken_equivalence_tx_proto_depIdxs,
		MessageInfos:      file_academictoken_equivalence_tx_proto_msgTypes,
	}.Build()
	File_academictoken_equivalence_tx_proto = out.File
	file_academictoken_equivalence_tx_proto_rawDesc = nil
	file_academictoken_equivalence_tx_proto_goTypes = nil
	file_academictoken_equivalence_tx_proto_depIdxs = nil
}
