// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package equivalence

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/query/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_QueryParamsRequest protoreflect.MessageDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryParamsRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryParamsRequest")
}

var _ protoreflect.Message = (*fastReflection_QueryParamsRequest)(nil)

type fastReflection_QueryParamsRequest QueryParamsRequest

func (x *QueryParamsRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryParamsRequest)(x)
}

func (x *QueryParamsRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryParamsRequest_messageType fastReflection_QueryParamsRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryParamsRequest_messageType{}

type fastReflection_QueryParamsRequest_messageType struct{}

func (x fastReflection_QueryParamsRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryParamsRequest)(nil)
}
func (x fastReflection_QueryParamsRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryParamsRequest)
}
func (x fastReflection_QueryParamsRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryParamsRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryParamsRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryParamsRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryParamsRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryParamsRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryParamsRequest) New() protoreflect.Message {
	return new(fastReflection_QueryParamsRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryParamsRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryParamsRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryParamsRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryParamsRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryParamsRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryParamsRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryParamsRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryParamsRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryParamsRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryParamsRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryParamsRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryParamsRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryParamsRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryParamsRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryParamsRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryParamsRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryParamsRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryParamsRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryParamsResponse        protoreflect.MessageDescriptor
	fd_QueryParamsResponse_params protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryParamsResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryParamsResponse")
	fd_QueryParamsResponse_params = md_QueryParamsResponse.Fields().ByName("params")
}

var _ protoreflect.Message = (*fastReflection_QueryParamsResponse)(nil)

type fastReflection_QueryParamsResponse QueryParamsResponse

func (x *QueryParamsResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryParamsResponse)(x)
}

func (x *QueryParamsResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryParamsResponse_messageType fastReflection_QueryParamsResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryParamsResponse_messageType{}

type fastReflection_QueryParamsResponse_messageType struct{}

func (x fastReflection_QueryParamsResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryParamsResponse)(nil)
}
func (x fastReflection_QueryParamsResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryParamsResponse)
}
func (x fastReflection_QueryParamsResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryParamsResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryParamsResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryParamsResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryParamsResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryParamsResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryParamsResponse) New() protoreflect.Message {
	return new(fastReflection_QueryParamsResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryParamsResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryParamsResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryParamsResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_QueryParamsResponse_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryParamsResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryParamsResponse.params":
		return x.Params != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryParamsResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryParamsResponse.params":
		x.Params = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryParamsResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryParamsResponse.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryParamsResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryParamsResponse.params":
		x.Params = value.Message().Interface().(*Params)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryParamsResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryParamsResponse.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryParamsResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryParamsResponse.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryParamsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryParamsResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryParamsResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryParamsResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryParamsResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryParamsResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryParamsResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryParamsResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryParamsResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryParamsResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryParamsResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryListEquivalencesRequest               protoreflect.MessageDescriptor
	fd_QueryListEquivalencesRequest_pagination    protoreflect.FieldDescriptor
	fd_QueryListEquivalencesRequest_status_filter protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryListEquivalencesRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryListEquivalencesRequest")
	fd_QueryListEquivalencesRequest_pagination = md_QueryListEquivalencesRequest.Fields().ByName("pagination")
	fd_QueryListEquivalencesRequest_status_filter = md_QueryListEquivalencesRequest.Fields().ByName("status_filter")
}

var _ protoreflect.Message = (*fastReflection_QueryListEquivalencesRequest)(nil)

type fastReflection_QueryListEquivalencesRequest QueryListEquivalencesRequest

func (x *QueryListEquivalencesRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryListEquivalencesRequest)(x)
}

func (x *QueryListEquivalencesRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryListEquivalencesRequest_messageType fastReflection_QueryListEquivalencesRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryListEquivalencesRequest_messageType{}

type fastReflection_QueryListEquivalencesRequest_messageType struct{}

func (x fastReflection_QueryListEquivalencesRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryListEquivalencesRequest)(nil)
}
func (x fastReflection_QueryListEquivalencesRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryListEquivalencesRequest)
}
func (x fastReflection_QueryListEquivalencesRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryListEquivalencesRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryListEquivalencesRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryListEquivalencesRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryListEquivalencesRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryListEquivalencesRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryListEquivalencesRequest) New() protoreflect.Message {
	return new(fastReflection_QueryListEquivalencesRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryListEquivalencesRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryListEquivalencesRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryListEquivalencesRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryListEquivalencesRequest_pagination, value) {
			return
		}
	}
	if x.StatusFilter != "" {
		value := protoreflect.ValueOfString(x.StatusFilter)
		if !f(fd_QueryListEquivalencesRequest_status_filter, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryListEquivalencesRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesRequest.pagination":
		return x.Pagination != nil
	case "academictoken.equivalence.QueryListEquivalencesRequest.status_filter":
		return x.StatusFilter != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryListEquivalencesRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesRequest.pagination":
		x.Pagination = nil
	case "academictoken.equivalence.QueryListEquivalencesRequest.status_filter":
		x.StatusFilter = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryListEquivalencesRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.equivalence.QueryListEquivalencesRequest.status_filter":
		value := x.StatusFilter
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryListEquivalencesRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	case "academictoken.equivalence.QueryListEquivalencesRequest.status_filter":
		x.StatusFilter = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryListEquivalencesRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "academictoken.equivalence.QueryListEquivalencesRequest.status_filter":
		panic(fmt.Errorf("field status_filter of message academictoken.equivalence.QueryListEquivalencesRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryListEquivalencesRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.equivalence.QueryListEquivalencesRequest.status_filter":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryListEquivalencesRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryListEquivalencesRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryListEquivalencesRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryListEquivalencesRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryListEquivalencesRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryListEquivalencesRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryListEquivalencesRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StatusFilter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryListEquivalencesRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.StatusFilter) > 0 {
			i -= len(x.StatusFilter)
			copy(dAtA[i:], x.StatusFilter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StatusFilter)))
			i--
			dAtA[i] = 0x12
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryListEquivalencesRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryListEquivalencesRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryListEquivalencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StatusFilter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryListEquivalencesResponse_1_list)(nil)

type _QueryListEquivalencesResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryListEquivalencesResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryListEquivalencesResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryListEquivalencesResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryListEquivalencesResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryListEquivalencesResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryListEquivalencesResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryListEquivalencesResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryListEquivalencesResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryListEquivalencesResponse              protoreflect.MessageDescriptor
	fd_QueryListEquivalencesResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryListEquivalencesResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryListEquivalencesResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryListEquivalencesResponse")
	fd_QueryListEquivalencesResponse_equivalences = md_QueryListEquivalencesResponse.Fields().ByName("equivalences")
	fd_QueryListEquivalencesResponse_pagination = md_QueryListEquivalencesResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryListEquivalencesResponse)(nil)

type fastReflection_QueryListEquivalencesResponse QueryListEquivalencesResponse

func (x *QueryListEquivalencesResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryListEquivalencesResponse)(x)
}

func (x *QueryListEquivalencesResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryListEquivalencesResponse_messageType fastReflection_QueryListEquivalencesResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryListEquivalencesResponse_messageType{}

type fastReflection_QueryListEquivalencesResponse_messageType struct{}

func (x fastReflection_QueryListEquivalencesResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryListEquivalencesResponse)(nil)
}
func (x fastReflection_QueryListEquivalencesResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryListEquivalencesResponse)
}
func (x fastReflection_QueryListEquivalencesResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryListEquivalencesResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryListEquivalencesResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryListEquivalencesResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryListEquivalencesResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryListEquivalencesResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryListEquivalencesResponse) New() protoreflect.Message {
	return new(fastReflection_QueryListEquivalencesResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryListEquivalencesResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryListEquivalencesResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryListEquivalencesResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryListEquivalencesResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryListEquivalencesResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryListEquivalencesResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryListEquivalencesResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryListEquivalencesResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryListEquivalencesResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryListEquivalencesResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryListEquivalencesResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryListEquivalencesResponse_1_list{})
		}
		listValue := &_QueryListEquivalencesResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryListEquivalencesResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryListEquivalencesResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryListEquivalencesResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryListEquivalencesResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryListEquivalencesResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryListEquivalencesResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryListEquivalencesResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryListEquivalencesResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryListEquivalencesResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryListEquivalencesResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryListEquivalencesResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryListEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryListEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryListEquivalencesResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryListEquivalencesResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryListEquivalencesResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryListEquivalencesResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryListEquivalencesResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryListEquivalencesResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryListEquivalencesResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryListEquivalencesResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryListEquivalencesResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryListEquivalencesResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryListEquivalencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalenceRequest       protoreflect.MessageDescriptor
	fd_QueryGetEquivalenceRequest_index protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalenceRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalenceRequest")
	fd_QueryGetEquivalenceRequest_index = md_QueryGetEquivalenceRequest.Fields().ByName("index")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalenceRequest)(nil)

type fastReflection_QueryGetEquivalenceRequest QueryGetEquivalenceRequest

func (x *QueryGetEquivalenceRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceRequest)(x)
}

func (x *QueryGetEquivalenceRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalenceRequest_messageType fastReflection_QueryGetEquivalenceRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalenceRequest_messageType{}

type fastReflection_QueryGetEquivalenceRequest_messageType struct{}

func (x fastReflection_QueryGetEquivalenceRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceRequest)(nil)
}
func (x fastReflection_QueryGetEquivalenceRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceRequest)
}
func (x fastReflection_QueryGetEquivalenceRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalenceRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalenceRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalenceRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalenceRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalenceRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalenceRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalenceRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_QueryGetEquivalenceRequest_index, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalenceRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceRequest.index":
		return x.Index != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceRequest.index":
		x.Index = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalenceRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceRequest.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceRequest.index":
		x.Index = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceRequest.index":
		panic(fmt.Errorf("field index of message academictoken.equivalence.QueryGetEquivalenceRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalenceRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceRequest.index":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalenceRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalenceRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalenceRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalenceRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalenceRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalenceRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalenceResponse             protoreflect.MessageDescriptor
	fd_QueryGetEquivalenceResponse_equivalence protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalenceResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalenceResponse")
	fd_QueryGetEquivalenceResponse_equivalence = md_QueryGetEquivalenceResponse.Fields().ByName("equivalence")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalenceResponse)(nil)

type fastReflection_QueryGetEquivalenceResponse QueryGetEquivalenceResponse

func (x *QueryGetEquivalenceResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceResponse)(x)
}

func (x *QueryGetEquivalenceResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalenceResponse_messageType fastReflection_QueryGetEquivalenceResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalenceResponse_messageType{}

type fastReflection_QueryGetEquivalenceResponse_messageType struct{}

func (x fastReflection_QueryGetEquivalenceResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceResponse)(nil)
}
func (x fastReflection_QueryGetEquivalenceResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceResponse)
}
func (x fastReflection_QueryGetEquivalenceResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalenceResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalenceResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalenceResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalenceResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalenceResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalenceResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalenceResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Equivalence != nil {
		value := protoreflect.ValueOfMessage(x.Equivalence.ProtoReflect())
		if !f(fd_QueryGetEquivalenceResponse_equivalence, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalenceResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceResponse.equivalence":
		return x.Equivalence != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceResponse.equivalence":
		x.Equivalence = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalenceResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceResponse.equivalence":
		value := x.Equivalence
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceResponse.equivalence":
		x.Equivalence = value.Message().Interface().(*SubjectEquivalence)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceResponse.equivalence":
		if x.Equivalence == nil {
			x.Equivalence = new(SubjectEquivalence)
		}
		return protoreflect.ValueOfMessage(x.Equivalence.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalenceResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceResponse.equivalence":
		m := new(SubjectEquivalence)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalenceResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalenceResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalenceResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalenceResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalenceResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalenceResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Equivalence != nil {
			l = options.Size(x.Equivalence)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Equivalence != nil {
			encoded, err := options.Marshal(x.Equivalence)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalence", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Equivalence == nil {
					x.Equivalence = &SubjectEquivalence{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalence); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalencesBySourceSubjectRequest                   protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesBySourceSubjectRequest_source_subject_id protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesBySourceSubjectRequest_pagination        protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesBySourceSubjectRequest_status_filter     protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesBySourceSubjectRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesBySourceSubjectRequest")
	fd_QueryGetEquivalencesBySourceSubjectRequest_source_subject_id = md_QueryGetEquivalencesBySourceSubjectRequest.Fields().ByName("source_subject_id")
	fd_QueryGetEquivalencesBySourceSubjectRequest_pagination = md_QueryGetEquivalencesBySourceSubjectRequest.Fields().ByName("pagination")
	fd_QueryGetEquivalencesBySourceSubjectRequest_status_filter = md_QueryGetEquivalencesBySourceSubjectRequest.Fields().ByName("status_filter")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesBySourceSubjectRequest)(nil)

type fastReflection_QueryGetEquivalencesBySourceSubjectRequest QueryGetEquivalencesBySourceSubjectRequest

func (x *QueryGetEquivalencesBySourceSubjectRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesBySourceSubjectRequest)(x)
}

func (x *QueryGetEquivalencesBySourceSubjectRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesBySourceSubjectRequest_messageType fastReflection_QueryGetEquivalencesBySourceSubjectRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesBySourceSubjectRequest_messageType{}

type fastReflection_QueryGetEquivalencesBySourceSubjectRequest_messageType struct{}

func (x fastReflection_QueryGetEquivalencesBySourceSubjectRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesBySourceSubjectRequest)(nil)
}
func (x fastReflection_QueryGetEquivalencesBySourceSubjectRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesBySourceSubjectRequest)
}
func (x fastReflection_QueryGetEquivalencesBySourceSubjectRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesBySourceSubjectRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesBySourceSubjectRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesBySourceSubjectRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesBySourceSubjectRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesBySourceSubjectRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SourceSubjectId != "" {
		value := protoreflect.ValueOfString(x.SourceSubjectId)
		if !f(fd_QueryGetEquivalencesBySourceSubjectRequest_source_subject_id, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesBySourceSubjectRequest_pagination, value) {
			return
		}
	}
	if x.StatusFilter != "" {
		value := protoreflect.ValueOfString(x.StatusFilter)
		if !f(fd_QueryGetEquivalencesBySourceSubjectRequest_status_filter, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.source_subject_id":
		return x.SourceSubjectId != ""
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.pagination":
		return x.Pagination != nil
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.status_filter":
		return x.StatusFilter != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.source_subject_id":
		x.SourceSubjectId = ""
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.pagination":
		x.Pagination = nil
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.status_filter":
		x.StatusFilter = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.source_subject_id":
		value := x.SourceSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.status_filter":
		value := x.StatusFilter
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.source_subject_id":
		x.SourceSubjectId = value.Interface().(string)
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.status_filter":
		x.StatusFilter = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.source_subject_id":
		panic(fmt.Errorf("field source_subject_id of message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.status_filter":
		panic(fmt.Errorf("field status_filter of message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.source_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.status_filter":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesBySourceSubjectRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SourceSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StatusFilter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesBySourceSubjectRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.StatusFilter) > 0 {
			i -= len(x.StatusFilter)
			copy(dAtA[i:], x.StatusFilter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StatusFilter)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SourceSubjectId) > 0 {
			i -= len(x.SourceSubjectId)
			copy(dAtA[i:], x.SourceSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceSubjectId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesBySourceSubjectRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesBySourceSubjectRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesBySourceSubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StatusFilter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetEquivalencesBySourceSubjectResponse_1_list)(nil)

type _QueryGetEquivalencesBySourceSubjectResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetEquivalencesBySourceSubjectResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetEquivalencesBySourceSubjectResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetEquivalencesBySourceSubjectResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetEquivalencesBySourceSubjectResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetEquivalencesBySourceSubjectResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesBySourceSubjectResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetEquivalencesBySourceSubjectResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesBySourceSubjectResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetEquivalencesBySourceSubjectResponse              protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesBySourceSubjectResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesBySourceSubjectResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesBySourceSubjectResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesBySourceSubjectResponse")
	fd_QueryGetEquivalencesBySourceSubjectResponse_equivalences = md_QueryGetEquivalencesBySourceSubjectResponse.Fields().ByName("equivalences")
	fd_QueryGetEquivalencesBySourceSubjectResponse_pagination = md_QueryGetEquivalencesBySourceSubjectResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesBySourceSubjectResponse)(nil)

type fastReflection_QueryGetEquivalencesBySourceSubjectResponse QueryGetEquivalencesBySourceSubjectResponse

func (x *QueryGetEquivalencesBySourceSubjectResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesBySourceSubjectResponse)(x)
}

func (x *QueryGetEquivalencesBySourceSubjectResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesBySourceSubjectResponse_messageType fastReflection_QueryGetEquivalencesBySourceSubjectResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesBySourceSubjectResponse_messageType{}

type fastReflection_QueryGetEquivalencesBySourceSubjectResponse_messageType struct{}

func (x fastReflection_QueryGetEquivalencesBySourceSubjectResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesBySourceSubjectResponse)(nil)
}
func (x fastReflection_QueryGetEquivalencesBySourceSubjectResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesBySourceSubjectResponse)
}
func (x fastReflection_QueryGetEquivalencesBySourceSubjectResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesBySourceSubjectResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesBySourceSubjectResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesBySourceSubjectResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesBySourceSubjectResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesBySourceSubjectResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetEquivalencesBySourceSubjectResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetEquivalencesBySourceSubjectResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesBySourceSubjectResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetEquivalencesBySourceSubjectResponse_1_list{})
		}
		listValue := &_QueryGetEquivalencesBySourceSubjectResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetEquivalencesBySourceSubjectResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetEquivalencesBySourceSubjectResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetEquivalencesBySourceSubjectResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesBySourceSubjectResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesBySourceSubjectResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesBySourceSubjectResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesBySourceSubjectResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesBySourceSubjectResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesBySourceSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalencesByTargetSubjectRequest                   protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesByTargetSubjectRequest_target_subject_id protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByTargetSubjectRequest_pagination        protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByTargetSubjectRequest_status_filter     protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesByTargetSubjectRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesByTargetSubjectRequest")
	fd_QueryGetEquivalencesByTargetSubjectRequest_target_subject_id = md_QueryGetEquivalencesByTargetSubjectRequest.Fields().ByName("target_subject_id")
	fd_QueryGetEquivalencesByTargetSubjectRequest_pagination = md_QueryGetEquivalencesByTargetSubjectRequest.Fields().ByName("pagination")
	fd_QueryGetEquivalencesByTargetSubjectRequest_status_filter = md_QueryGetEquivalencesByTargetSubjectRequest.Fields().ByName("status_filter")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesByTargetSubjectRequest)(nil)

type fastReflection_QueryGetEquivalencesByTargetSubjectRequest QueryGetEquivalencesByTargetSubjectRequest

func (x *QueryGetEquivalencesByTargetSubjectRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByTargetSubjectRequest)(x)
}

func (x *QueryGetEquivalencesByTargetSubjectRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesByTargetSubjectRequest_messageType fastReflection_QueryGetEquivalencesByTargetSubjectRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesByTargetSubjectRequest_messageType{}

type fastReflection_QueryGetEquivalencesByTargetSubjectRequest_messageType struct{}

func (x fastReflection_QueryGetEquivalencesByTargetSubjectRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByTargetSubjectRequest)(nil)
}
func (x fastReflection_QueryGetEquivalencesByTargetSubjectRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByTargetSubjectRequest)
}
func (x fastReflection_QueryGetEquivalencesByTargetSubjectRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByTargetSubjectRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByTargetSubjectRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesByTargetSubjectRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByTargetSubjectRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesByTargetSubjectRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TargetSubjectId != "" {
		value := protoreflect.ValueOfString(x.TargetSubjectId)
		if !f(fd_QueryGetEquivalencesByTargetSubjectRequest_target_subject_id, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesByTargetSubjectRequest_pagination, value) {
			return
		}
	}
	if x.StatusFilter != "" {
		value := protoreflect.ValueOfString(x.StatusFilter)
		if !f(fd_QueryGetEquivalencesByTargetSubjectRequest_status_filter, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.target_subject_id":
		return x.TargetSubjectId != ""
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.pagination":
		return x.Pagination != nil
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.status_filter":
		return x.StatusFilter != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.target_subject_id":
		x.TargetSubjectId = ""
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.pagination":
		x.Pagination = nil
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.status_filter":
		x.StatusFilter = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.target_subject_id":
		value := x.TargetSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.status_filter":
		value := x.StatusFilter
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.target_subject_id":
		x.TargetSubjectId = value.Interface().(string)
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.status_filter":
		x.StatusFilter = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.target_subject_id":
		panic(fmt.Errorf("field target_subject_id of message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.status_filter":
		panic(fmt.Errorf("field status_filter of message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.target_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.status_filter":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesByTargetSubjectRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TargetSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StatusFilter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByTargetSubjectRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.StatusFilter) > 0 {
			i -= len(x.StatusFilter)
			copy(dAtA[i:], x.StatusFilter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StatusFilter)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TargetSubjectId) > 0 {
			i -= len(x.TargetSubjectId)
			copy(dAtA[i:], x.TargetSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetSubjectId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByTargetSubjectRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByTargetSubjectRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByTargetSubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StatusFilter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetEquivalencesByTargetSubjectResponse_1_list)(nil)

type _QueryGetEquivalencesByTargetSubjectResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetEquivalencesByTargetSubjectResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetEquivalencesByTargetSubjectResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetEquivalencesByTargetSubjectResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetEquivalencesByTargetSubjectResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetEquivalencesByTargetSubjectResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesByTargetSubjectResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetEquivalencesByTargetSubjectResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesByTargetSubjectResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetEquivalencesByTargetSubjectResponse              protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesByTargetSubjectResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByTargetSubjectResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesByTargetSubjectResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesByTargetSubjectResponse")
	fd_QueryGetEquivalencesByTargetSubjectResponse_equivalences = md_QueryGetEquivalencesByTargetSubjectResponse.Fields().ByName("equivalences")
	fd_QueryGetEquivalencesByTargetSubjectResponse_pagination = md_QueryGetEquivalencesByTargetSubjectResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesByTargetSubjectResponse)(nil)

type fastReflection_QueryGetEquivalencesByTargetSubjectResponse QueryGetEquivalencesByTargetSubjectResponse

func (x *QueryGetEquivalencesByTargetSubjectResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByTargetSubjectResponse)(x)
}

func (x *QueryGetEquivalencesByTargetSubjectResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesByTargetSubjectResponse_messageType fastReflection_QueryGetEquivalencesByTargetSubjectResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesByTargetSubjectResponse_messageType{}

type fastReflection_QueryGetEquivalencesByTargetSubjectResponse_messageType struct{}

func (x fastReflection_QueryGetEquivalencesByTargetSubjectResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByTargetSubjectResponse)(nil)
}
func (x fastReflection_QueryGetEquivalencesByTargetSubjectResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByTargetSubjectResponse)
}
func (x fastReflection_QueryGetEquivalencesByTargetSubjectResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByTargetSubjectResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByTargetSubjectResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesByTargetSubjectResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByTargetSubjectResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesByTargetSubjectResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetEquivalencesByTargetSubjectResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetEquivalencesByTargetSubjectResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesByTargetSubjectResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetEquivalencesByTargetSubjectResponse_1_list{})
		}
		listValue := &_QueryGetEquivalencesByTargetSubjectResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetEquivalencesByTargetSubjectResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetEquivalencesByTargetSubjectResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetEquivalencesByTargetSubjectResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesByTargetSubjectResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesByTargetSubjectResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByTargetSubjectResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByTargetSubjectResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByTargetSubjectResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByTargetSubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalencesByInstitutionRequest                protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesByInstitutionRequest_institution_id protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByInstitutionRequest_pagination     protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByInstitutionRequest_status_filter  protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesByInstitutionRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesByInstitutionRequest")
	fd_QueryGetEquivalencesByInstitutionRequest_institution_id = md_QueryGetEquivalencesByInstitutionRequest.Fields().ByName("institution_id")
	fd_QueryGetEquivalencesByInstitutionRequest_pagination = md_QueryGetEquivalencesByInstitutionRequest.Fields().ByName("pagination")
	fd_QueryGetEquivalencesByInstitutionRequest_status_filter = md_QueryGetEquivalencesByInstitutionRequest.Fields().ByName("status_filter")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesByInstitutionRequest)(nil)

type fastReflection_QueryGetEquivalencesByInstitutionRequest QueryGetEquivalencesByInstitutionRequest

func (x *QueryGetEquivalencesByInstitutionRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByInstitutionRequest)(x)
}

func (x *QueryGetEquivalencesByInstitutionRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesByInstitutionRequest_messageType fastReflection_QueryGetEquivalencesByInstitutionRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesByInstitutionRequest_messageType{}

type fastReflection_QueryGetEquivalencesByInstitutionRequest_messageType struct{}

func (x fastReflection_QueryGetEquivalencesByInstitutionRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByInstitutionRequest)(nil)
}
func (x fastReflection_QueryGetEquivalencesByInstitutionRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByInstitutionRequest)
}
func (x fastReflection_QueryGetEquivalencesByInstitutionRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByInstitutionRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByInstitutionRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesByInstitutionRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByInstitutionRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesByInstitutionRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.InstitutionId != "" {
		value := protoreflect.ValueOfString(x.InstitutionId)
		if !f(fd_QueryGetEquivalencesByInstitutionRequest_institution_id, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesByInstitutionRequest_pagination, value) {
			return
		}
	}
	if x.StatusFilter != "" {
		value := protoreflect.ValueOfString(x.StatusFilter)
		if !f(fd_QueryGetEquivalencesByInstitutionRequest_status_filter, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.institution_id":
		return x.InstitutionId != ""
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.pagination":
		return x.Pagination != nil
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.status_filter":
		return x.StatusFilter != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.institution_id":
		x.InstitutionId = ""
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.pagination":
		x.Pagination = nil
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.status_filter":
		x.StatusFilter = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.institution_id":
		value := x.InstitutionId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.status_filter":
		value := x.StatusFilter
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.institution_id":
		x.InstitutionId = value.Interface().(string)
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.status_filter":
		x.StatusFilter = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.institution_id":
		panic(fmt.Errorf("field institution_id of message academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.status_filter":
		panic(fmt.Errorf("field status_filter of message academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.institution_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.status_filter":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesByInstitutionRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesByInstitutionRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.InstitutionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StatusFilter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByInstitutionRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.StatusFilter) > 0 {
			i -= len(x.StatusFilter)
			copy(dAtA[i:], x.StatusFilter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StatusFilter)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.InstitutionId) > 0 {
			i -= len(x.InstitutionId)
			copy(dAtA[i:], x.InstitutionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InstitutionId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByInstitutionRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByInstitutionRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByInstitutionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InstitutionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InstitutionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StatusFilter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetEquivalencesByInstitutionResponse_1_list)(nil)

type _QueryGetEquivalencesByInstitutionResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetEquivalencesByInstitutionResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetEquivalencesByInstitutionResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetEquivalencesByInstitutionResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetEquivalencesByInstitutionResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetEquivalencesByInstitutionResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesByInstitutionResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetEquivalencesByInstitutionResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesByInstitutionResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetEquivalencesByInstitutionResponse              protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesByInstitutionResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByInstitutionResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesByInstitutionResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesByInstitutionResponse")
	fd_QueryGetEquivalencesByInstitutionResponse_equivalences = md_QueryGetEquivalencesByInstitutionResponse.Fields().ByName("equivalences")
	fd_QueryGetEquivalencesByInstitutionResponse_pagination = md_QueryGetEquivalencesByInstitutionResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesByInstitutionResponse)(nil)

type fastReflection_QueryGetEquivalencesByInstitutionResponse QueryGetEquivalencesByInstitutionResponse

func (x *QueryGetEquivalencesByInstitutionResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByInstitutionResponse)(x)
}

func (x *QueryGetEquivalencesByInstitutionResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesByInstitutionResponse_messageType fastReflection_QueryGetEquivalencesByInstitutionResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesByInstitutionResponse_messageType{}

type fastReflection_QueryGetEquivalencesByInstitutionResponse_messageType struct{}

func (x fastReflection_QueryGetEquivalencesByInstitutionResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByInstitutionResponse)(nil)
}
func (x fastReflection_QueryGetEquivalencesByInstitutionResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByInstitutionResponse)
}
func (x fastReflection_QueryGetEquivalencesByInstitutionResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByInstitutionResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByInstitutionResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesByInstitutionResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByInstitutionResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesByInstitutionResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetEquivalencesByInstitutionResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetEquivalencesByInstitutionResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesByInstitutionResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetEquivalencesByInstitutionResponse_1_list{})
		}
		listValue := &_QueryGetEquivalencesByInstitutionResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetEquivalencesByInstitutionResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetEquivalencesByInstitutionResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetEquivalencesByInstitutionResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesByInstitutionResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesByInstitutionResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByInstitutionResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByInstitutionResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByInstitutionResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByInstitutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryCheckEquivalenceStatusRequest                   protoreflect.MessageDescriptor
	fd_QueryCheckEquivalenceStatusRequest_source_subject_id protoreflect.FieldDescriptor
	fd_QueryCheckEquivalenceStatusRequest_target_subject_id protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryCheckEquivalenceStatusRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryCheckEquivalenceStatusRequest")
	fd_QueryCheckEquivalenceStatusRequest_source_subject_id = md_QueryCheckEquivalenceStatusRequest.Fields().ByName("source_subject_id")
	fd_QueryCheckEquivalenceStatusRequest_target_subject_id = md_QueryCheckEquivalenceStatusRequest.Fields().ByName("target_subject_id")
}

var _ protoreflect.Message = (*fastReflection_QueryCheckEquivalenceStatusRequest)(nil)

type fastReflection_QueryCheckEquivalenceStatusRequest QueryCheckEquivalenceStatusRequest

func (x *QueryCheckEquivalenceStatusRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryCheckEquivalenceStatusRequest)(x)
}

func (x *QueryCheckEquivalenceStatusRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryCheckEquivalenceStatusRequest_messageType fastReflection_QueryCheckEquivalenceStatusRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryCheckEquivalenceStatusRequest_messageType{}

type fastReflection_QueryCheckEquivalenceStatusRequest_messageType struct{}

func (x fastReflection_QueryCheckEquivalenceStatusRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryCheckEquivalenceStatusRequest)(nil)
}
func (x fastReflection_QueryCheckEquivalenceStatusRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryCheckEquivalenceStatusRequest)
}
func (x fastReflection_QueryCheckEquivalenceStatusRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryCheckEquivalenceStatusRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryCheckEquivalenceStatusRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryCheckEquivalenceStatusRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) New() protoreflect.Message {
	return new(fastReflection_QueryCheckEquivalenceStatusRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryCheckEquivalenceStatusRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SourceSubjectId != "" {
		value := protoreflect.ValueOfString(x.SourceSubjectId)
		if !f(fd_QueryCheckEquivalenceStatusRequest_source_subject_id, value) {
			return
		}
	}
	if x.TargetSubjectId != "" {
		value := protoreflect.ValueOfString(x.TargetSubjectId)
		if !f(fd_QueryCheckEquivalenceStatusRequest_target_subject_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.source_subject_id":
		return x.SourceSubjectId != ""
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.target_subject_id":
		return x.TargetSubjectId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.source_subject_id":
		x.SourceSubjectId = ""
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.target_subject_id":
		x.TargetSubjectId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.source_subject_id":
		value := x.SourceSubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.target_subject_id":
		value := x.TargetSubjectId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.source_subject_id":
		x.SourceSubjectId = value.Interface().(string)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.target_subject_id":
		x.TargetSubjectId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.source_subject_id":
		panic(fmt.Errorf("field source_subject_id of message academictoken.equivalence.QueryCheckEquivalenceStatusRequest is not mutable"))
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.target_subject_id":
		panic(fmt.Errorf("field target_subject_id of message academictoken.equivalence.QueryCheckEquivalenceStatusRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.source_subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryCheckEquivalenceStatusRequest.target_subject_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryCheckEquivalenceStatusRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryCheckEquivalenceStatusRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryCheckEquivalenceStatusRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SourceSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TargetSubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryCheckEquivalenceStatusRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TargetSubjectId) > 0 {
			i -= len(x.TargetSubjectId)
			copy(dAtA[i:], x.TargetSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TargetSubjectId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SourceSubjectId) > 0 {
			i -= len(x.SourceSubjectId)
			copy(dAtA[i:], x.SourceSubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceSubjectId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryCheckEquivalenceStatusRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryCheckEquivalenceStatusRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryCheckEquivalenceStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetSubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TargetSubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryCheckEquivalenceStatusResponse                     protoreflect.MessageDescriptor
	fd_QueryCheckEquivalenceStatusResponse_has_equivalence     protoreflect.FieldDescriptor
	fd_QueryCheckEquivalenceStatusResponse_status              protoreflect.FieldDescriptor
	fd_QueryCheckEquivalenceStatusResponse_equivalence_percent protoreflect.FieldDescriptor
	fd_QueryCheckEquivalenceStatusResponse_equivalence         protoreflect.FieldDescriptor
	fd_QueryCheckEquivalenceStatusResponse_contract_version    protoreflect.FieldDescriptor
	fd_QueryCheckEquivalenceStatusResponse_analysis_timestamp  protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryCheckEquivalenceStatusResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryCheckEquivalenceStatusResponse")
	fd_QueryCheckEquivalenceStatusResponse_has_equivalence = md_QueryCheckEquivalenceStatusResponse.Fields().ByName("has_equivalence")
	fd_QueryCheckEquivalenceStatusResponse_status = md_QueryCheckEquivalenceStatusResponse.Fields().ByName("status")
	fd_QueryCheckEquivalenceStatusResponse_equivalence_percent = md_QueryCheckEquivalenceStatusResponse.Fields().ByName("equivalence_percent")
	fd_QueryCheckEquivalenceStatusResponse_equivalence = md_QueryCheckEquivalenceStatusResponse.Fields().ByName("equivalence")
	fd_QueryCheckEquivalenceStatusResponse_contract_version = md_QueryCheckEquivalenceStatusResponse.Fields().ByName("contract_version")
	fd_QueryCheckEquivalenceStatusResponse_analysis_timestamp = md_QueryCheckEquivalenceStatusResponse.Fields().ByName("analysis_timestamp")
}

var _ protoreflect.Message = (*fastReflection_QueryCheckEquivalenceStatusResponse)(nil)

type fastReflection_QueryCheckEquivalenceStatusResponse QueryCheckEquivalenceStatusResponse

func (x *QueryCheckEquivalenceStatusResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryCheckEquivalenceStatusResponse)(x)
}

func (x *QueryCheckEquivalenceStatusResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryCheckEquivalenceStatusResponse_messageType fastReflection_QueryCheckEquivalenceStatusResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryCheckEquivalenceStatusResponse_messageType{}

type fastReflection_QueryCheckEquivalenceStatusResponse_messageType struct{}

func (x fastReflection_QueryCheckEquivalenceStatusResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryCheckEquivalenceStatusResponse)(nil)
}
func (x fastReflection_QueryCheckEquivalenceStatusResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryCheckEquivalenceStatusResponse)
}
func (x fastReflection_QueryCheckEquivalenceStatusResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryCheckEquivalenceStatusResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryCheckEquivalenceStatusResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryCheckEquivalenceStatusResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) New() protoreflect.Message {
	return new(fastReflection_QueryCheckEquivalenceStatusResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryCheckEquivalenceStatusResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.HasEquivalence != false {
		value := protoreflect.ValueOfBool(x.HasEquivalence)
		if !f(fd_QueryCheckEquivalenceStatusResponse_has_equivalence, value) {
			return
		}
	}
	if x.Status != "" {
		value := protoreflect.ValueOfString(x.Status)
		if !f(fd_QueryCheckEquivalenceStatusResponse_status, value) {
			return
		}
	}
	if x.EquivalencePercent != "" {
		value := protoreflect.ValueOfString(x.EquivalencePercent)
		if !f(fd_QueryCheckEquivalenceStatusResponse_equivalence_percent, value) {
			return
		}
	}
	if x.Equivalence != nil {
		value := protoreflect.ValueOfMessage(x.Equivalence.ProtoReflect())
		if !f(fd_QueryCheckEquivalenceStatusResponse_equivalence, value) {
			return
		}
	}
	if x.ContractVersion != "" {
		value := protoreflect.ValueOfString(x.ContractVersion)
		if !f(fd_QueryCheckEquivalenceStatusResponse_contract_version, value) {
			return
		}
	}
	if x.AnalysisTimestamp != "" {
		value := protoreflect.ValueOfString(x.AnalysisTimestamp)
		if !f(fd_QueryCheckEquivalenceStatusResponse_analysis_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.has_equivalence":
		return x.HasEquivalence != false
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.status":
		return x.Status != ""
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence_percent":
		return x.EquivalencePercent != ""
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence":
		return x.Equivalence != nil
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.contract_version":
		return x.ContractVersion != ""
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.analysis_timestamp":
		return x.AnalysisTimestamp != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.has_equivalence":
		x.HasEquivalence = false
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.status":
		x.Status = ""
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence_percent":
		x.EquivalencePercent = ""
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence":
		x.Equivalence = nil
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.contract_version":
		x.ContractVersion = ""
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.analysis_timestamp":
		x.AnalysisTimestamp = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.has_equivalence":
		value := x.HasEquivalence
		return protoreflect.ValueOfBool(value)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.status":
		value := x.Status
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence_percent":
		value := x.EquivalencePercent
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence":
		value := x.Equivalence
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.contract_version":
		value := x.ContractVersion
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.analysis_timestamp":
		value := x.AnalysisTimestamp
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.has_equivalence":
		x.HasEquivalence = value.Bool()
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.status":
		x.Status = value.Interface().(string)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence_percent":
		x.EquivalencePercent = value.Interface().(string)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence":
		x.Equivalence = value.Message().Interface().(*SubjectEquivalence)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.contract_version":
		x.ContractVersion = value.Interface().(string)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.analysis_timestamp":
		x.AnalysisTimestamp = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence":
		if x.Equivalence == nil {
			x.Equivalence = new(SubjectEquivalence)
		}
		return protoreflect.ValueOfMessage(x.Equivalence.ProtoReflect())
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.has_equivalence":
		panic(fmt.Errorf("field has_equivalence of message academictoken.equivalence.QueryCheckEquivalenceStatusResponse is not mutable"))
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.status":
		panic(fmt.Errorf("field status of message academictoken.equivalence.QueryCheckEquivalenceStatusResponse is not mutable"))
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence_percent":
		panic(fmt.Errorf("field equivalence_percent of message academictoken.equivalence.QueryCheckEquivalenceStatusResponse is not mutable"))
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.contract_version":
		panic(fmt.Errorf("field contract_version of message academictoken.equivalence.QueryCheckEquivalenceStatusResponse is not mutable"))
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.analysis_timestamp":
		panic(fmt.Errorf("field analysis_timestamp of message academictoken.equivalence.QueryCheckEquivalenceStatusResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.has_equivalence":
		return protoreflect.ValueOfBool(false)
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.status":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence_percent":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence":
		m := new(SubjectEquivalence)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.contract_version":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryCheckEquivalenceStatusResponse.analysis_timestamp":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryCheckEquivalenceStatusResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryCheckEquivalenceStatusResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryCheckEquivalenceStatusResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryCheckEquivalenceStatusResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryCheckEquivalenceStatusResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.HasEquivalence {
			n += 2
		}
		l = len(x.Status)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EquivalencePercent)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Equivalence != nil {
			l = options.Size(x.Equivalence)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ContractVersion)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AnalysisTimestamp)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryCheckEquivalenceStatusResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AnalysisTimestamp) > 0 {
			i -= len(x.AnalysisTimestamp)
			copy(dAtA[i:], x.AnalysisTimestamp)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnalysisTimestamp)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.ContractVersion) > 0 {
			i -= len(x.ContractVersion)
			copy(dAtA[i:], x.ContractVersion)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractVersion)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Equivalence != nil {
			encoded, err := options.Marshal(x.Equivalence)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.EquivalencePercent) > 0 {
			i -= len(x.EquivalencePercent)
			copy(dAtA[i:], x.EquivalencePercent)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalencePercent)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Status) > 0 {
			i -= len(x.Status)
			copy(dAtA[i:], x.Status)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Status)))
			i--
			dAtA[i] = 0x12
		}
		if x.HasEquivalence {
			i--
			if x.HasEquivalence {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryCheckEquivalenceStatusResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryCheckEquivalenceStatusResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryCheckEquivalenceStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HasEquivalence", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.HasEquivalence = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Status = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalencePercent", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalencePercent = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalence", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Equivalence == nil {
					x.Equivalence = &SubjectEquivalence{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalence); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractVersion = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisTimestamp", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnalysisTimestamp = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetPendingAnalysisRequest            protoreflect.MessageDescriptor
	fd_QueryGetPendingAnalysisRequest_pagination protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetPendingAnalysisRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetPendingAnalysisRequest")
	fd_QueryGetPendingAnalysisRequest_pagination = md_QueryGetPendingAnalysisRequest.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetPendingAnalysisRequest)(nil)

type fastReflection_QueryGetPendingAnalysisRequest QueryGetPendingAnalysisRequest

func (x *QueryGetPendingAnalysisRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetPendingAnalysisRequest)(x)
}

func (x *QueryGetPendingAnalysisRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetPendingAnalysisRequest_messageType fastReflection_QueryGetPendingAnalysisRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetPendingAnalysisRequest_messageType{}

type fastReflection_QueryGetPendingAnalysisRequest_messageType struct{}

func (x fastReflection_QueryGetPendingAnalysisRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetPendingAnalysisRequest)(nil)
}
func (x fastReflection_QueryGetPendingAnalysisRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetPendingAnalysisRequest)
}
func (x fastReflection_QueryGetPendingAnalysisRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetPendingAnalysisRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetPendingAnalysisRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetPendingAnalysisRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetPendingAnalysisRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetPendingAnalysisRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetPendingAnalysisRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetPendingAnalysisRequest_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisRequest.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisRequest.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetPendingAnalysisRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetPendingAnalysisRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetPendingAnalysisRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetPendingAnalysisRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetPendingAnalysisRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetPendingAnalysisRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetPendingAnalysisRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetPendingAnalysisRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetPendingAnalysisRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetPendingAnalysisRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetPendingAnalysisRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetPendingAnalysisRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetPendingAnalysisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetPendingAnalysisResponse_1_list)(nil)

type _QueryGetPendingAnalysisResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetPendingAnalysisResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetPendingAnalysisResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetPendingAnalysisResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetPendingAnalysisResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetPendingAnalysisResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetPendingAnalysisResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetPendingAnalysisResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetPendingAnalysisResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetPendingAnalysisResponse              protoreflect.MessageDescriptor
	fd_QueryGetPendingAnalysisResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetPendingAnalysisResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetPendingAnalysisResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetPendingAnalysisResponse")
	fd_QueryGetPendingAnalysisResponse_equivalences = md_QueryGetPendingAnalysisResponse.Fields().ByName("equivalences")
	fd_QueryGetPendingAnalysisResponse_pagination = md_QueryGetPendingAnalysisResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetPendingAnalysisResponse)(nil)

type fastReflection_QueryGetPendingAnalysisResponse QueryGetPendingAnalysisResponse

func (x *QueryGetPendingAnalysisResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetPendingAnalysisResponse)(x)
}

func (x *QueryGetPendingAnalysisResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetPendingAnalysisResponse_messageType fastReflection_QueryGetPendingAnalysisResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetPendingAnalysisResponse_messageType{}

type fastReflection_QueryGetPendingAnalysisResponse_messageType struct{}

func (x fastReflection_QueryGetPendingAnalysisResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetPendingAnalysisResponse)(nil)
}
func (x fastReflection_QueryGetPendingAnalysisResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetPendingAnalysisResponse)
}
func (x fastReflection_QueryGetPendingAnalysisResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetPendingAnalysisResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetPendingAnalysisResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetPendingAnalysisResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetPendingAnalysisResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetPendingAnalysisResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetPendingAnalysisResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetPendingAnalysisResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetPendingAnalysisResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetPendingAnalysisResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetPendingAnalysisResponse_1_list{})
		}
		listValue := &_QueryGetPendingAnalysisResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetPendingAnalysisResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetPendingAnalysisResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetPendingAnalysisResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetPendingAnalysisResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetPendingAnalysisResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetPendingAnalysisResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetPendingAnalysisResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetPendingAnalysisResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetPendingAnalysisResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetPendingAnalysisResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetPendingAnalysisResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetPendingAnalysisResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetPendingAnalysisResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetPendingAnalysisResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetPendingAnalysisResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetPendingAnalysisResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetPendingAnalysisResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetPendingAnalysisResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetPendingAnalysisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetApprovedEquivalencesRequest                         protoreflect.MessageDescriptor
	fd_QueryGetApprovedEquivalencesRequest_pagination              protoreflect.FieldDescriptor
	fd_QueryGetApprovedEquivalencesRequest_min_equivalence_percent protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetApprovedEquivalencesRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetApprovedEquivalencesRequest")
	fd_QueryGetApprovedEquivalencesRequest_pagination = md_QueryGetApprovedEquivalencesRequest.Fields().ByName("pagination")
	fd_QueryGetApprovedEquivalencesRequest_min_equivalence_percent = md_QueryGetApprovedEquivalencesRequest.Fields().ByName("min_equivalence_percent")
}

var _ protoreflect.Message = (*fastReflection_QueryGetApprovedEquivalencesRequest)(nil)

type fastReflection_QueryGetApprovedEquivalencesRequest QueryGetApprovedEquivalencesRequest

func (x *QueryGetApprovedEquivalencesRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetApprovedEquivalencesRequest)(x)
}

func (x *QueryGetApprovedEquivalencesRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetApprovedEquivalencesRequest_messageType fastReflection_QueryGetApprovedEquivalencesRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetApprovedEquivalencesRequest_messageType{}

type fastReflection_QueryGetApprovedEquivalencesRequest_messageType struct{}

func (x fastReflection_QueryGetApprovedEquivalencesRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetApprovedEquivalencesRequest)(nil)
}
func (x fastReflection_QueryGetApprovedEquivalencesRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetApprovedEquivalencesRequest)
}
func (x fastReflection_QueryGetApprovedEquivalencesRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetApprovedEquivalencesRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetApprovedEquivalencesRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetApprovedEquivalencesRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetApprovedEquivalencesRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetApprovedEquivalencesRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetApprovedEquivalencesRequest_pagination, value) {
			return
		}
	}
	if x.MinEquivalencePercent != "" {
		value := protoreflect.ValueOfString(x.MinEquivalencePercent)
		if !f(fd_QueryGetApprovedEquivalencesRequest_min_equivalence_percent, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.pagination":
		return x.Pagination != nil
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.min_equivalence_percent":
		return x.MinEquivalencePercent != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.pagination":
		x.Pagination = nil
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.min_equivalence_percent":
		x.MinEquivalencePercent = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.min_equivalence_percent":
		value := x.MinEquivalencePercent
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.min_equivalence_percent":
		x.MinEquivalencePercent = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.min_equivalence_percent":
		panic(fmt.Errorf("field min_equivalence_percent of message academictoken.equivalence.QueryGetApprovedEquivalencesRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.equivalence.QueryGetApprovedEquivalencesRequest.min_equivalence_percent":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetApprovedEquivalencesRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetApprovedEquivalencesRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetApprovedEquivalencesRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinEquivalencePercent)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetApprovedEquivalencesRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MinEquivalencePercent) > 0 {
			i -= len(x.MinEquivalencePercent)
			copy(dAtA[i:], x.MinEquivalencePercent)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinEquivalencePercent)))
			i--
			dAtA[i] = 0x12
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetApprovedEquivalencesRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetApprovedEquivalencesRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetApprovedEquivalencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinEquivalencePercent", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinEquivalencePercent = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetApprovedEquivalencesResponse_1_list)(nil)

type _QueryGetApprovedEquivalencesResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetApprovedEquivalencesResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetApprovedEquivalencesResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetApprovedEquivalencesResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetApprovedEquivalencesResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetApprovedEquivalencesResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetApprovedEquivalencesResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetApprovedEquivalencesResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetApprovedEquivalencesResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetApprovedEquivalencesResponse              protoreflect.MessageDescriptor
	fd_QueryGetApprovedEquivalencesResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetApprovedEquivalencesResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetApprovedEquivalencesResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetApprovedEquivalencesResponse")
	fd_QueryGetApprovedEquivalencesResponse_equivalences = md_QueryGetApprovedEquivalencesResponse.Fields().ByName("equivalences")
	fd_QueryGetApprovedEquivalencesResponse_pagination = md_QueryGetApprovedEquivalencesResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetApprovedEquivalencesResponse)(nil)

type fastReflection_QueryGetApprovedEquivalencesResponse QueryGetApprovedEquivalencesResponse

func (x *QueryGetApprovedEquivalencesResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetApprovedEquivalencesResponse)(x)
}

func (x *QueryGetApprovedEquivalencesResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetApprovedEquivalencesResponse_messageType fastReflection_QueryGetApprovedEquivalencesResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetApprovedEquivalencesResponse_messageType{}

type fastReflection_QueryGetApprovedEquivalencesResponse_messageType struct{}

func (x fastReflection_QueryGetApprovedEquivalencesResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetApprovedEquivalencesResponse)(nil)
}
func (x fastReflection_QueryGetApprovedEquivalencesResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetApprovedEquivalencesResponse)
}
func (x fastReflection_QueryGetApprovedEquivalencesResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetApprovedEquivalencesResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetApprovedEquivalencesResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetApprovedEquivalencesResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetApprovedEquivalencesResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetApprovedEquivalencesResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetApprovedEquivalencesResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetApprovedEquivalencesResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetApprovedEquivalencesResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetApprovedEquivalencesResponse_1_list{})
		}
		listValue := &_QueryGetApprovedEquivalencesResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetApprovedEquivalencesResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetApprovedEquivalencesResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetApprovedEquivalencesResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetApprovedEquivalencesResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetApprovedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetApprovedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetApprovedEquivalencesResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetApprovedEquivalencesResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetApprovedEquivalencesResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetApprovedEquivalencesResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetApprovedEquivalencesResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetApprovedEquivalencesResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetApprovedEquivalencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetRejectedEquivalencesRequest            protoreflect.MessageDescriptor
	fd_QueryGetRejectedEquivalencesRequest_pagination protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetRejectedEquivalencesRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetRejectedEquivalencesRequest")
	fd_QueryGetRejectedEquivalencesRequest_pagination = md_QueryGetRejectedEquivalencesRequest.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetRejectedEquivalencesRequest)(nil)

type fastReflection_QueryGetRejectedEquivalencesRequest QueryGetRejectedEquivalencesRequest

func (x *QueryGetRejectedEquivalencesRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetRejectedEquivalencesRequest)(x)
}

func (x *QueryGetRejectedEquivalencesRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetRejectedEquivalencesRequest_messageType fastReflection_QueryGetRejectedEquivalencesRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetRejectedEquivalencesRequest_messageType{}

type fastReflection_QueryGetRejectedEquivalencesRequest_messageType struct{}

func (x fastReflection_QueryGetRejectedEquivalencesRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetRejectedEquivalencesRequest)(nil)
}
func (x fastReflection_QueryGetRejectedEquivalencesRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetRejectedEquivalencesRequest)
}
func (x fastReflection_QueryGetRejectedEquivalencesRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetRejectedEquivalencesRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetRejectedEquivalencesRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetRejectedEquivalencesRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetRejectedEquivalencesRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetRejectedEquivalencesRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetRejectedEquivalencesRequest_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesRequest.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesRequest.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetRejectedEquivalencesRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetRejectedEquivalencesRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetRejectedEquivalencesRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetRejectedEquivalencesRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetRejectedEquivalencesRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetRejectedEquivalencesRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetRejectedEquivalencesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetRejectedEquivalencesResponse_1_list)(nil)

type _QueryGetRejectedEquivalencesResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetRejectedEquivalencesResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetRejectedEquivalencesResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetRejectedEquivalencesResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetRejectedEquivalencesResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetRejectedEquivalencesResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetRejectedEquivalencesResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetRejectedEquivalencesResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetRejectedEquivalencesResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetRejectedEquivalencesResponse              protoreflect.MessageDescriptor
	fd_QueryGetRejectedEquivalencesResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetRejectedEquivalencesResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetRejectedEquivalencesResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetRejectedEquivalencesResponse")
	fd_QueryGetRejectedEquivalencesResponse_equivalences = md_QueryGetRejectedEquivalencesResponse.Fields().ByName("equivalences")
	fd_QueryGetRejectedEquivalencesResponse_pagination = md_QueryGetRejectedEquivalencesResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetRejectedEquivalencesResponse)(nil)

type fastReflection_QueryGetRejectedEquivalencesResponse QueryGetRejectedEquivalencesResponse

func (x *QueryGetRejectedEquivalencesResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetRejectedEquivalencesResponse)(x)
}

func (x *QueryGetRejectedEquivalencesResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetRejectedEquivalencesResponse_messageType fastReflection_QueryGetRejectedEquivalencesResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetRejectedEquivalencesResponse_messageType{}

type fastReflection_QueryGetRejectedEquivalencesResponse_messageType struct{}

func (x fastReflection_QueryGetRejectedEquivalencesResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetRejectedEquivalencesResponse)(nil)
}
func (x fastReflection_QueryGetRejectedEquivalencesResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetRejectedEquivalencesResponse)
}
func (x fastReflection_QueryGetRejectedEquivalencesResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetRejectedEquivalencesResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetRejectedEquivalencesResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetRejectedEquivalencesResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetRejectedEquivalencesResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetRejectedEquivalencesResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetRejectedEquivalencesResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetRejectedEquivalencesResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetRejectedEquivalencesResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetRejectedEquivalencesResponse_1_list{})
		}
		listValue := &_QueryGetRejectedEquivalencesResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetRejectedEquivalencesResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetRejectedEquivalencesResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetRejectedEquivalencesResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetRejectedEquivalencesResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetRejectedEquivalencesResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetRejectedEquivalencesResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetRejectedEquivalencesResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetRejectedEquivalencesResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetRejectedEquivalencesResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetRejectedEquivalencesResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetRejectedEquivalencesResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetRejectedEquivalencesResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetRejectedEquivalencesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalencesByContractRequest                  protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesByContractRequest_contract_address protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByContractRequest_pagination       protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesByContractRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesByContractRequest")
	fd_QueryGetEquivalencesByContractRequest_contract_address = md_QueryGetEquivalencesByContractRequest.Fields().ByName("contract_address")
	fd_QueryGetEquivalencesByContractRequest_pagination = md_QueryGetEquivalencesByContractRequest.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesByContractRequest)(nil)

type fastReflection_QueryGetEquivalencesByContractRequest QueryGetEquivalencesByContractRequest

func (x *QueryGetEquivalencesByContractRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByContractRequest)(x)
}

func (x *QueryGetEquivalencesByContractRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesByContractRequest_messageType fastReflection_QueryGetEquivalencesByContractRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesByContractRequest_messageType{}

type fastReflection_QueryGetEquivalencesByContractRequest_messageType struct{}

func (x fastReflection_QueryGetEquivalencesByContractRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByContractRequest)(nil)
}
func (x fastReflection_QueryGetEquivalencesByContractRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByContractRequest)
}
func (x fastReflection_QueryGetEquivalencesByContractRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByContractRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByContractRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesByContractRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByContractRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesByContractRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ContractAddress != "" {
		value := protoreflect.ValueOfString(x.ContractAddress)
		if !f(fd_QueryGetEquivalencesByContractRequest_contract_address, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesByContractRequest_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.contract_address":
		return x.ContractAddress != ""
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.contract_address":
		x.ContractAddress = ""
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.contract_address":
		value := x.ContractAddress
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.contract_address":
		x.ContractAddress = value.Interface().(string)
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.contract_address":
		panic(fmt.Errorf("field contract_address of message academictoken.equivalence.QueryGetEquivalencesByContractRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.contract_address":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetEquivalencesByContractRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesByContractRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesByContractRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ContractAddress) > 0 {
			i -= len(x.ContractAddress)
			copy(dAtA[i:], x.ContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByContractRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetEquivalencesByContractResponse_1_list)(nil)

type _QueryGetEquivalencesByContractResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetEquivalencesByContractResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetEquivalencesByContractResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetEquivalencesByContractResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetEquivalencesByContractResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetEquivalencesByContractResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesByContractResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetEquivalencesByContractResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesByContractResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetEquivalencesByContractResponse              protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesByContractResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByContractResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesByContractResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesByContractResponse")
	fd_QueryGetEquivalencesByContractResponse_equivalences = md_QueryGetEquivalencesByContractResponse.Fields().ByName("equivalences")
	fd_QueryGetEquivalencesByContractResponse_pagination = md_QueryGetEquivalencesByContractResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesByContractResponse)(nil)

type fastReflection_QueryGetEquivalencesByContractResponse QueryGetEquivalencesByContractResponse

func (x *QueryGetEquivalencesByContractResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByContractResponse)(x)
}

func (x *QueryGetEquivalencesByContractResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesByContractResponse_messageType fastReflection_QueryGetEquivalencesByContractResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesByContractResponse_messageType{}

type fastReflection_QueryGetEquivalencesByContractResponse_messageType struct{}

func (x fastReflection_QueryGetEquivalencesByContractResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByContractResponse)(nil)
}
func (x fastReflection_QueryGetEquivalencesByContractResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByContractResponse)
}
func (x fastReflection_QueryGetEquivalencesByContractResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByContractResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByContractResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesByContractResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByContractResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesByContractResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetEquivalencesByContractResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetEquivalencesByContractResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesByContractResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetEquivalencesByContractResponse_1_list{})
		}
		listValue := &_QueryGetEquivalencesByContractResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetEquivalencesByContractResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetEquivalencesByContractResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetEquivalencesByContractResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetEquivalencesByContractResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesByContractResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesByContractResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByContractResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalencesByContractVersionRequest                  protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesByContractVersionRequest_contract_version protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByContractVersionRequest_pagination       protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesByContractVersionRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesByContractVersionRequest")
	fd_QueryGetEquivalencesByContractVersionRequest_contract_version = md_QueryGetEquivalencesByContractVersionRequest.Fields().ByName("contract_version")
	fd_QueryGetEquivalencesByContractVersionRequest_pagination = md_QueryGetEquivalencesByContractVersionRequest.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesByContractVersionRequest)(nil)

type fastReflection_QueryGetEquivalencesByContractVersionRequest QueryGetEquivalencesByContractVersionRequest

func (x *QueryGetEquivalencesByContractVersionRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByContractVersionRequest)(x)
}

func (x *QueryGetEquivalencesByContractVersionRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesByContractVersionRequest_messageType fastReflection_QueryGetEquivalencesByContractVersionRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesByContractVersionRequest_messageType{}

type fastReflection_QueryGetEquivalencesByContractVersionRequest_messageType struct{}

func (x fastReflection_QueryGetEquivalencesByContractVersionRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByContractVersionRequest)(nil)
}
func (x fastReflection_QueryGetEquivalencesByContractVersionRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByContractVersionRequest)
}
func (x fastReflection_QueryGetEquivalencesByContractVersionRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByContractVersionRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByContractVersionRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesByContractVersionRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByContractVersionRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesByContractVersionRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ContractVersion != "" {
		value := protoreflect.ValueOfString(x.ContractVersion)
		if !f(fd_QueryGetEquivalencesByContractVersionRequest_contract_version, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesByContractVersionRequest_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.contract_version":
		return x.ContractVersion != ""
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.contract_version":
		x.ContractVersion = ""
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.contract_version":
		value := x.ContractVersion
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.contract_version":
		x.ContractVersion = value.Interface().(string)
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.contract_version":
		panic(fmt.Errorf("field contract_version of message academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.contract_version":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesByContractVersionRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractVersionRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ContractVersion)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractVersionRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ContractVersion) > 0 {
			i -= len(x.ContractVersion)
			copy(dAtA[i:], x.ContractVersion)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractVersion)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractVersionRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByContractVersionRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByContractVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractVersion = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetEquivalencesByContractVersionResponse_1_list)(nil)

type _QueryGetEquivalencesByContractVersionResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetEquivalencesByContractVersionResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetEquivalencesByContractVersionResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetEquivalencesByContractVersionResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetEquivalencesByContractVersionResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetEquivalencesByContractVersionResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesByContractVersionResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetEquivalencesByContractVersionResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalencesByContractVersionResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetEquivalencesByContractVersionResponse              protoreflect.MessageDescriptor
	fd_QueryGetEquivalencesByContractVersionResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetEquivalencesByContractVersionResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalencesByContractVersionResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalencesByContractVersionResponse")
	fd_QueryGetEquivalencesByContractVersionResponse_equivalences = md_QueryGetEquivalencesByContractVersionResponse.Fields().ByName("equivalences")
	fd_QueryGetEquivalencesByContractVersionResponse_pagination = md_QueryGetEquivalencesByContractVersionResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalencesByContractVersionResponse)(nil)

type fastReflection_QueryGetEquivalencesByContractVersionResponse QueryGetEquivalencesByContractVersionResponse

func (x *QueryGetEquivalencesByContractVersionResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByContractVersionResponse)(x)
}

func (x *QueryGetEquivalencesByContractVersionResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalencesByContractVersionResponse_messageType fastReflection_QueryGetEquivalencesByContractVersionResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalencesByContractVersionResponse_messageType{}

type fastReflection_QueryGetEquivalencesByContractVersionResponse_messageType struct{}

func (x fastReflection_QueryGetEquivalencesByContractVersionResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalencesByContractVersionResponse)(nil)
}
func (x fastReflection_QueryGetEquivalencesByContractVersionResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByContractVersionResponse)
}
func (x fastReflection_QueryGetEquivalencesByContractVersionResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByContractVersionResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalencesByContractVersionResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalencesByContractVersionResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalencesByContractVersionResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalencesByContractVersionResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetEquivalencesByContractVersionResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetEquivalencesByContractVersionResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalencesByContractVersionResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetEquivalencesByContractVersionResponse_1_list{})
		}
		listValue := &_QueryGetEquivalencesByContractVersionResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetEquivalencesByContractVersionResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetEquivalencesByContractVersionResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetEquivalencesByContractVersionResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalencesByContractVersionResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractVersionResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractVersionResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalencesByContractVersionResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByContractVersionResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalencesByContractVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalenceHistoryRequest            protoreflect.MessageDescriptor
	fd_QueryGetEquivalenceHistoryRequest_subject_id protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceHistoryRequest_pagination protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalenceHistoryRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalenceHistoryRequest")
	fd_QueryGetEquivalenceHistoryRequest_subject_id = md_QueryGetEquivalenceHistoryRequest.Fields().ByName("subject_id")
	fd_QueryGetEquivalenceHistoryRequest_pagination = md_QueryGetEquivalenceHistoryRequest.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalenceHistoryRequest)(nil)

type fastReflection_QueryGetEquivalenceHistoryRequest QueryGetEquivalenceHistoryRequest

func (x *QueryGetEquivalenceHistoryRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceHistoryRequest)(x)
}

func (x *QueryGetEquivalenceHistoryRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalenceHistoryRequest_messageType fastReflection_QueryGetEquivalenceHistoryRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalenceHistoryRequest_messageType{}

type fastReflection_QueryGetEquivalenceHistoryRequest_messageType struct{}

func (x fastReflection_QueryGetEquivalenceHistoryRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceHistoryRequest)(nil)
}
func (x fastReflection_QueryGetEquivalenceHistoryRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceHistoryRequest)
}
func (x fastReflection_QueryGetEquivalenceHistoryRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceHistoryRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceHistoryRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalenceHistoryRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceHistoryRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalenceHistoryRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SubjectId != "" {
		value := protoreflect.ValueOfString(x.SubjectId)
		if !f(fd_QueryGetEquivalenceHistoryRequest_subject_id, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalenceHistoryRequest_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.subject_id":
		return x.SubjectId != ""
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.subject_id":
		x.SubjectId = ""
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.subject_id":
		value := x.SubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.subject_id":
		x.SubjectId = value.Interface().(string)
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.subject_id":
		panic(fmt.Errorf("field subject_id of message academictoken.equivalence.QueryGetEquivalenceHistoryRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.subject_id":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetEquivalenceHistoryRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalenceHistoryRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalenceHistoryRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalenceHistoryRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceHistoryRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SubjectId) > 0 {
			i -= len(x.SubjectId)
			copy(dAtA[i:], x.SubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SubjectId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceHistoryRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceHistoryRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetEquivalenceHistoryResponse_1_list)(nil)

type _QueryGetEquivalenceHistoryResponse_1_list struct {
	list *[]*SubjectEquivalence
}

func (x *_QueryGetEquivalenceHistoryResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetEquivalenceHistoryResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryGetEquivalenceHistoryResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetEquivalenceHistoryResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*SubjectEquivalence)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetEquivalenceHistoryResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(SubjectEquivalence)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalenceHistoryResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetEquivalenceHistoryResponse_1_list) NewElement() protoreflect.Value {
	v := new(SubjectEquivalence)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryGetEquivalenceHistoryResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetEquivalenceHistoryResponse              protoreflect.MessageDescriptor
	fd_QueryGetEquivalenceHistoryResponse_equivalences protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceHistoryResponse_pagination   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalenceHistoryResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalenceHistoryResponse")
	fd_QueryGetEquivalenceHistoryResponse_equivalences = md_QueryGetEquivalenceHistoryResponse.Fields().ByName("equivalences")
	fd_QueryGetEquivalenceHistoryResponse_pagination = md_QueryGetEquivalenceHistoryResponse.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalenceHistoryResponse)(nil)

type fastReflection_QueryGetEquivalenceHistoryResponse QueryGetEquivalenceHistoryResponse

func (x *QueryGetEquivalenceHistoryResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceHistoryResponse)(x)
}

func (x *QueryGetEquivalenceHistoryResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalenceHistoryResponse_messageType fastReflection_QueryGetEquivalenceHistoryResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalenceHistoryResponse_messageType{}

type fastReflection_QueryGetEquivalenceHistoryResponse_messageType struct{}

func (x fastReflection_QueryGetEquivalenceHistoryResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceHistoryResponse)(nil)
}
func (x fastReflection_QueryGetEquivalenceHistoryResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceHistoryResponse)
}
func (x fastReflection_QueryGetEquivalenceHistoryResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceHistoryResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceHistoryResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalenceHistoryResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceHistoryResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalenceHistoryResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Equivalences) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetEquivalenceHistoryResponse_1_list{list: &x.Equivalences})
		if !f(fd_QueryGetEquivalenceHistoryResponse_equivalences, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryGetEquivalenceHistoryResponse_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.equivalences":
		return len(x.Equivalences) != 0
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.equivalences":
		x.Equivalences = nil
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.equivalences":
		if len(x.Equivalences) == 0 {
			return protoreflect.ValueOfList(&_QueryGetEquivalenceHistoryResponse_1_list{})
		}
		listValue := &_QueryGetEquivalenceHistoryResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(listValue)
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.equivalences":
		lv := value.List()
		clv := lv.(*_QueryGetEquivalenceHistoryResponse_1_list)
		x.Equivalences = *clv.list
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageResponse)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.equivalences":
		if x.Equivalences == nil {
			x.Equivalences = []*SubjectEquivalence{}
		}
		value := &_QueryGetEquivalenceHistoryResponse_1_list{list: &x.Equivalences}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageResponse)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.equivalences":
		list := []*SubjectEquivalence{}
		return protoreflect.ValueOfList(&_QueryGetEquivalenceHistoryResponse_1_list{list: &list})
	case "academictoken.equivalence.QueryGetEquivalenceHistoryResponse.pagination":
		m := new(v1beta1.PageResponse)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceHistoryResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceHistoryResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalenceHistoryResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalenceHistoryResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalenceHistoryResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Equivalences) > 0 {
			for _, e := range x.Equivalences {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceHistoryResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Equivalences) > 0 {
			for iNdEx := len(x.Equivalences) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Equivalences[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceHistoryResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceHistoryResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Equivalences", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Equivalences = append(x.Equivalences, &SubjectEquivalence{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Equivalences[len(x.Equivalences)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageResponse{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetEquivalenceStatsRequest protoreflect.MessageDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalenceStatsRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalenceStatsRequest")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalenceStatsRequest)(nil)

type fastReflection_QueryGetEquivalenceStatsRequest QueryGetEquivalenceStatsRequest

func (x *QueryGetEquivalenceStatsRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceStatsRequest)(x)
}

func (x *QueryGetEquivalenceStatsRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalenceStatsRequest_messageType fastReflection_QueryGetEquivalenceStatsRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalenceStatsRequest_messageType{}

type fastReflection_QueryGetEquivalenceStatsRequest_messageType struct{}

func (x fastReflection_QueryGetEquivalenceStatsRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceStatsRequest)(nil)
}
func (x fastReflection_QueryGetEquivalenceStatsRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceStatsRequest)
}
func (x fastReflection_QueryGetEquivalenceStatsRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceStatsRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceStatsRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalenceStatsRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceStatsRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalenceStatsRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalenceStatsRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalenceStatsRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalenceStatsRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceStatsRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceStatsRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceStatsRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryGetEquivalenceStatsResponse_10_list)(nil)

type _QueryGetEquivalenceStatsResponse_10_list struct {
	list *[]string
}

func (x *_QueryGetEquivalenceStatsResponse_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryGetEquivalenceStatsResponse_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_QueryGetEquivalenceStatsResponse_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_QueryGetEquivalenceStatsResponse_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryGetEquivalenceStatsResponse_10_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message QueryGetEquivalenceStatsResponse at list field ActiveContractVersions as it is not of Message kind"))
}

func (x *_QueryGetEquivalenceStatsResponse_10_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_QueryGetEquivalenceStatsResponse_10_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_QueryGetEquivalenceStatsResponse_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryGetEquivalenceStatsResponse                                  protoreflect.MessageDescriptor
	fd_QueryGetEquivalenceStatsResponse_total_equivalences               protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_pending_analysis                 protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_approved_equivalences            protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_rejected_equivalences            protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_error_equivalences               protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_average_equivalence_percent      protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_total_institutions_involved      protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_total_subjects_with_equivalences protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_total_contract_analyses          protoreflect.FieldDescriptor
	fd_QueryGetEquivalenceStatsResponse_active_contract_versions         protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetEquivalenceStatsResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetEquivalenceStatsResponse")
	fd_QueryGetEquivalenceStatsResponse_total_equivalences = md_QueryGetEquivalenceStatsResponse.Fields().ByName("total_equivalences")
	fd_QueryGetEquivalenceStatsResponse_pending_analysis = md_QueryGetEquivalenceStatsResponse.Fields().ByName("pending_analysis")
	fd_QueryGetEquivalenceStatsResponse_approved_equivalences = md_QueryGetEquivalenceStatsResponse.Fields().ByName("approved_equivalences")
	fd_QueryGetEquivalenceStatsResponse_rejected_equivalences = md_QueryGetEquivalenceStatsResponse.Fields().ByName("rejected_equivalences")
	fd_QueryGetEquivalenceStatsResponse_error_equivalences = md_QueryGetEquivalenceStatsResponse.Fields().ByName("error_equivalences")
	fd_QueryGetEquivalenceStatsResponse_average_equivalence_percent = md_QueryGetEquivalenceStatsResponse.Fields().ByName("average_equivalence_percent")
	fd_QueryGetEquivalenceStatsResponse_total_institutions_involved = md_QueryGetEquivalenceStatsResponse.Fields().ByName("total_institutions_involved")
	fd_QueryGetEquivalenceStatsResponse_total_subjects_with_equivalences = md_QueryGetEquivalenceStatsResponse.Fields().ByName("total_subjects_with_equivalences")
	fd_QueryGetEquivalenceStatsResponse_total_contract_analyses = md_QueryGetEquivalenceStatsResponse.Fields().ByName("total_contract_analyses")
	fd_QueryGetEquivalenceStatsResponse_active_contract_versions = md_QueryGetEquivalenceStatsResponse.Fields().ByName("active_contract_versions")
}

var _ protoreflect.Message = (*fastReflection_QueryGetEquivalenceStatsResponse)(nil)

type fastReflection_QueryGetEquivalenceStatsResponse QueryGetEquivalenceStatsResponse

func (x *QueryGetEquivalenceStatsResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceStatsResponse)(x)
}

func (x *QueryGetEquivalenceStatsResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetEquivalenceStatsResponse_messageType fastReflection_QueryGetEquivalenceStatsResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetEquivalenceStatsResponse_messageType{}

type fastReflection_QueryGetEquivalenceStatsResponse_messageType struct{}

func (x fastReflection_QueryGetEquivalenceStatsResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetEquivalenceStatsResponse)(nil)
}
func (x fastReflection_QueryGetEquivalenceStatsResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceStatsResponse)
}
func (x fastReflection_QueryGetEquivalenceStatsResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceStatsResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetEquivalenceStatsResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetEquivalenceStatsResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetEquivalenceStatsResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetEquivalenceStatsResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalEquivalences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalEquivalences)
		if !f(fd_QueryGetEquivalenceStatsResponse_total_equivalences, value) {
			return
		}
	}
	if x.PendingAnalysis != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PendingAnalysis)
		if !f(fd_QueryGetEquivalenceStatsResponse_pending_analysis, value) {
			return
		}
	}
	if x.ApprovedEquivalences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ApprovedEquivalences)
		if !f(fd_QueryGetEquivalenceStatsResponse_approved_equivalences, value) {
			return
		}
	}
	if x.RejectedEquivalences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RejectedEquivalences)
		if !f(fd_QueryGetEquivalenceStatsResponse_rejected_equivalences, value) {
			return
		}
	}
	if x.ErrorEquivalences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ErrorEquivalences)
		if !f(fd_QueryGetEquivalenceStatsResponse_error_equivalences, value) {
			return
		}
	}
	if x.AverageEquivalencePercent != "" {
		value := protoreflect.ValueOfString(x.AverageEquivalencePercent)
		if !f(fd_QueryGetEquivalenceStatsResponse_average_equivalence_percent, value) {
			return
		}
	}
	if x.TotalInstitutionsInvolved != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalInstitutionsInvolved)
		if !f(fd_QueryGetEquivalenceStatsResponse_total_institutions_involved, value) {
			return
		}
	}
	if x.TotalSubjectsWithEquivalences != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalSubjectsWithEquivalences)
		if !f(fd_QueryGetEquivalenceStatsResponse_total_subjects_with_equivalences, value) {
			return
		}
	}
	if x.TotalContractAnalyses != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalContractAnalyses)
		if !f(fd_QueryGetEquivalenceStatsResponse_total_contract_analyses, value) {
			return
		}
	}
	if len(x.ActiveContractVersions) != 0 {
		value := protoreflect.ValueOfList(&_QueryGetEquivalenceStatsResponse_10_list{list: &x.ActiveContractVersions})
		if !f(fd_QueryGetEquivalenceStatsResponse_active_contract_versions, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_equivalences":
		return x.TotalEquivalences != uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.pending_analysis":
		return x.PendingAnalysis != uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.approved_equivalences":
		return x.ApprovedEquivalences != uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.rejected_equivalences":
		return x.RejectedEquivalences != uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.error_equivalences":
		return x.ErrorEquivalences != uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.average_equivalence_percent":
		return x.AverageEquivalencePercent != ""
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_institutions_involved":
		return x.TotalInstitutionsInvolved != uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_subjects_with_equivalences":
		return x.TotalSubjectsWithEquivalences != uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_contract_analyses":
		return x.TotalContractAnalyses != uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.active_contract_versions":
		return len(x.ActiveContractVersions) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_equivalences":
		x.TotalEquivalences = uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.pending_analysis":
		x.PendingAnalysis = uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.approved_equivalences":
		x.ApprovedEquivalences = uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.rejected_equivalences":
		x.RejectedEquivalences = uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.error_equivalences":
		x.ErrorEquivalences = uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.average_equivalence_percent":
		x.AverageEquivalencePercent = ""
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_institutions_involved":
		x.TotalInstitutionsInvolved = uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_subjects_with_equivalences":
		x.TotalSubjectsWithEquivalences = uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_contract_analyses":
		x.TotalContractAnalyses = uint64(0)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.active_contract_versions":
		x.ActiveContractVersions = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_equivalences":
		value := x.TotalEquivalences
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.pending_analysis":
		value := x.PendingAnalysis
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.approved_equivalences":
		value := x.ApprovedEquivalences
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.rejected_equivalences":
		value := x.RejectedEquivalences
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.error_equivalences":
		value := x.ErrorEquivalences
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.average_equivalence_percent":
		value := x.AverageEquivalencePercent
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_institutions_involved":
		value := x.TotalInstitutionsInvolved
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_subjects_with_equivalences":
		value := x.TotalSubjectsWithEquivalences
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_contract_analyses":
		value := x.TotalContractAnalyses
		return protoreflect.ValueOfUint64(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.active_contract_versions":
		if len(x.ActiveContractVersions) == 0 {
			return protoreflect.ValueOfList(&_QueryGetEquivalenceStatsResponse_10_list{})
		}
		listValue := &_QueryGetEquivalenceStatsResponse_10_list{list: &x.ActiveContractVersions}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_equivalences":
		x.TotalEquivalences = value.Uint()
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.pending_analysis":
		x.PendingAnalysis = value.Uint()
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.approved_equivalences":
		x.ApprovedEquivalences = value.Uint()
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.rejected_equivalences":
		x.RejectedEquivalences = value.Uint()
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.error_equivalences":
		x.ErrorEquivalences = value.Uint()
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.average_equivalence_percent":
		x.AverageEquivalencePercent = value.Interface().(string)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_institutions_involved":
		x.TotalInstitutionsInvolved = value.Uint()
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_subjects_with_equivalences":
		x.TotalSubjectsWithEquivalences = value.Uint()
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_contract_analyses":
		x.TotalContractAnalyses = value.Uint()
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.active_contract_versions":
		lv := value.List()
		clv := lv.(*_QueryGetEquivalenceStatsResponse_10_list)
		x.ActiveContractVersions = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.active_contract_versions":
		if x.ActiveContractVersions == nil {
			x.ActiveContractVersions = []string{}
		}
		value := &_QueryGetEquivalenceStatsResponse_10_list{list: &x.ActiveContractVersions}
		return protoreflect.ValueOfList(value)
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_equivalences":
		panic(fmt.Errorf("field total_equivalences of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.pending_analysis":
		panic(fmt.Errorf("field pending_analysis of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.approved_equivalences":
		panic(fmt.Errorf("field approved_equivalences of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.rejected_equivalences":
		panic(fmt.Errorf("field rejected_equivalences of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.error_equivalences":
		panic(fmt.Errorf("field error_equivalences of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.average_equivalence_percent":
		panic(fmt.Errorf("field average_equivalence_percent of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_institutions_involved":
		panic(fmt.Errorf("field total_institutions_involved of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_subjects_with_equivalences":
		panic(fmt.Errorf("field total_subjects_with_equivalences of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_contract_analyses":
		panic(fmt.Errorf("field total_contract_analyses of message academictoken.equivalence.QueryGetEquivalenceStatsResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_equivalences":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.pending_analysis":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.approved_equivalences":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.rejected_equivalences":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.error_equivalences":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.average_equivalence_percent":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_institutions_involved":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_subjects_with_equivalences":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.total_contract_analyses":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.equivalence.QueryGetEquivalenceStatsResponse.active_contract_versions":
		list := []string{}
		return protoreflect.ValueOfList(&_QueryGetEquivalenceStatsResponse_10_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetEquivalenceStatsResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetEquivalenceStatsResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetEquivalenceStatsResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetEquivalenceStatsResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetEquivalenceStatsResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TotalEquivalences != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalEquivalences))
		}
		if x.PendingAnalysis != 0 {
			n += 1 + runtime.Sov(uint64(x.PendingAnalysis))
		}
		if x.ApprovedEquivalences != 0 {
			n += 1 + runtime.Sov(uint64(x.ApprovedEquivalences))
		}
		if x.RejectedEquivalences != 0 {
			n += 1 + runtime.Sov(uint64(x.RejectedEquivalences))
		}
		if x.ErrorEquivalences != 0 {
			n += 1 + runtime.Sov(uint64(x.ErrorEquivalences))
		}
		l = len(x.AverageEquivalencePercent)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TotalInstitutionsInvolved != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalInstitutionsInvolved))
		}
		if x.TotalSubjectsWithEquivalences != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalSubjectsWithEquivalences))
		}
		if x.TotalContractAnalyses != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalContractAnalyses))
		}
		if len(x.ActiveContractVersions) > 0 {
			for _, s := range x.ActiveContractVersions {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceStatsResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ActiveContractVersions) > 0 {
			for iNdEx := len(x.ActiveContractVersions) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ActiveContractVersions[iNdEx])
				copy(dAtA[i:], x.ActiveContractVersions[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ActiveContractVersions[iNdEx])))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.TotalContractAnalyses != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalContractAnalyses))
			i--
			dAtA[i] = 0x48
		}
		if x.TotalSubjectsWithEquivalences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalSubjectsWithEquivalences))
			i--
			dAtA[i] = 0x40
		}
		if x.TotalInstitutionsInvolved != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalInstitutionsInvolved))
			i--
			dAtA[i] = 0x38
		}
		if len(x.AverageEquivalencePercent) > 0 {
			i -= len(x.AverageEquivalencePercent)
			copy(dAtA[i:], x.AverageEquivalencePercent)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AverageEquivalencePercent)))
			i--
			dAtA[i] = 0x32
		}
		if x.ErrorEquivalences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ErrorEquivalences))
			i--
			dAtA[i] = 0x28
		}
		if x.RejectedEquivalences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RejectedEquivalences))
			i--
			dAtA[i] = 0x20
		}
		if x.ApprovedEquivalences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ApprovedEquivalences))
			i--
			dAtA[i] = 0x18
		}
		if x.PendingAnalysis != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PendingAnalysis))
			i--
			dAtA[i] = 0x10
		}
		if x.TotalEquivalences != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalEquivalences))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetEquivalenceStatsResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceStatsResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetEquivalenceStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalEquivalences", wireType)
				}
				x.TotalEquivalences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalEquivalences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingAnalysis", wireType)
				}
				x.PendingAnalysis = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PendingAnalysis |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ApprovedEquivalences", wireType)
				}
				x.ApprovedEquivalences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ApprovedEquivalences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectedEquivalences", wireType)
				}
				x.RejectedEquivalences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RejectedEquivalences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ErrorEquivalences", wireType)
				}
				x.ErrorEquivalences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ErrorEquivalences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AverageEquivalencePercent", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AverageEquivalencePercent = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalInstitutionsInvolved", wireType)
				}
				x.TotalInstitutionsInvolved = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalInstitutionsInvolved |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalSubjectsWithEquivalences", wireType)
				}
				x.TotalSubjectsWithEquivalences = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalSubjectsWithEquivalences |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalContractAnalyses", wireType)
				}
				x.TotalContractAnalyses = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalContractAnalyses |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveContractVersions", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ActiveContractVersions = append(x.ActiveContractVersions, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetAnalysisMetadataRequest                protoreflect.MessageDescriptor
	fd_QueryGetAnalysisMetadataRequest_equivalence_id protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetAnalysisMetadataRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetAnalysisMetadataRequest")
	fd_QueryGetAnalysisMetadataRequest_equivalence_id = md_QueryGetAnalysisMetadataRequest.Fields().ByName("equivalence_id")
}

var _ protoreflect.Message = (*fastReflection_QueryGetAnalysisMetadataRequest)(nil)

type fastReflection_QueryGetAnalysisMetadataRequest QueryGetAnalysisMetadataRequest

func (x *QueryGetAnalysisMetadataRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetAnalysisMetadataRequest)(x)
}

func (x *QueryGetAnalysisMetadataRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetAnalysisMetadataRequest_messageType fastReflection_QueryGetAnalysisMetadataRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetAnalysisMetadataRequest_messageType{}

type fastReflection_QueryGetAnalysisMetadataRequest_messageType struct{}

func (x fastReflection_QueryGetAnalysisMetadataRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetAnalysisMetadataRequest)(nil)
}
func (x fastReflection_QueryGetAnalysisMetadataRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetAnalysisMetadataRequest)
}
func (x fastReflection_QueryGetAnalysisMetadataRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetAnalysisMetadataRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetAnalysisMetadataRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetAnalysisMetadataRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) New() protoreflect.Message {
	return new(fastReflection_QueryGetAnalysisMetadataRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryGetAnalysisMetadataRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EquivalenceId != "" {
		value := protoreflect.ValueOfString(x.EquivalenceId)
		if !f(fd_QueryGetAnalysisMetadataRequest_equivalence_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataRequest.equivalence_id":
		return x.EquivalenceId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataRequest.equivalence_id":
		x.EquivalenceId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataRequest.equivalence_id":
		value := x.EquivalenceId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataRequest.equivalence_id":
		x.EquivalenceId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataRequest.equivalence_id":
		panic(fmt.Errorf("field equivalence_id of message academictoken.equivalence.QueryGetAnalysisMetadataRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataRequest.equivalence_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetAnalysisMetadataRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetAnalysisMetadataRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetAnalysisMetadataRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.EquivalenceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetAnalysisMetadataRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EquivalenceId) > 0 {
			i -= len(x.EquivalenceId)
			copy(dAtA[i:], x.EquivalenceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalenceId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetAnalysisMetadataRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetAnalysisMetadataRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetAnalysisMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalenceId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryGetAnalysisMetadataResponse                    protoreflect.MessageDescriptor
	fd_QueryGetAnalysisMetadataResponse_analysis_metadata  protoreflect.FieldDescriptor
	fd_QueryGetAnalysisMetadataResponse_contract_address   protoreflect.FieldDescriptor
	fd_QueryGetAnalysisMetadataResponse_contract_version   protoreflect.FieldDescriptor
	fd_QueryGetAnalysisMetadataResponse_analysis_hash      protoreflect.FieldDescriptor
	fd_QueryGetAnalysisMetadataResponse_analysis_timestamp protoreflect.FieldDescriptor
	fd_QueryGetAnalysisMetadataResponse_analysis_count     protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryGetAnalysisMetadataResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryGetAnalysisMetadataResponse")
	fd_QueryGetAnalysisMetadataResponse_analysis_metadata = md_QueryGetAnalysisMetadataResponse.Fields().ByName("analysis_metadata")
	fd_QueryGetAnalysisMetadataResponse_contract_address = md_QueryGetAnalysisMetadataResponse.Fields().ByName("contract_address")
	fd_QueryGetAnalysisMetadataResponse_contract_version = md_QueryGetAnalysisMetadataResponse.Fields().ByName("contract_version")
	fd_QueryGetAnalysisMetadataResponse_analysis_hash = md_QueryGetAnalysisMetadataResponse.Fields().ByName("analysis_hash")
	fd_QueryGetAnalysisMetadataResponse_analysis_timestamp = md_QueryGetAnalysisMetadataResponse.Fields().ByName("analysis_timestamp")
	fd_QueryGetAnalysisMetadataResponse_analysis_count = md_QueryGetAnalysisMetadataResponse.Fields().ByName("analysis_count")
}

var _ protoreflect.Message = (*fastReflection_QueryGetAnalysisMetadataResponse)(nil)

type fastReflection_QueryGetAnalysisMetadataResponse QueryGetAnalysisMetadataResponse

func (x *QueryGetAnalysisMetadataResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryGetAnalysisMetadataResponse)(x)
}

func (x *QueryGetAnalysisMetadataResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryGetAnalysisMetadataResponse_messageType fastReflection_QueryGetAnalysisMetadataResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryGetAnalysisMetadataResponse_messageType{}

type fastReflection_QueryGetAnalysisMetadataResponse_messageType struct{}

func (x fastReflection_QueryGetAnalysisMetadataResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryGetAnalysisMetadataResponse)(nil)
}
func (x fastReflection_QueryGetAnalysisMetadataResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryGetAnalysisMetadataResponse)
}
func (x fastReflection_QueryGetAnalysisMetadataResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetAnalysisMetadataResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryGetAnalysisMetadataResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryGetAnalysisMetadataResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) New() protoreflect.Message {
	return new(fastReflection_QueryGetAnalysisMetadataResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryGetAnalysisMetadataResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AnalysisMetadata != "" {
		value := protoreflect.ValueOfString(x.AnalysisMetadata)
		if !f(fd_QueryGetAnalysisMetadataResponse_analysis_metadata, value) {
			return
		}
	}
	if x.ContractAddress != "" {
		value := protoreflect.ValueOfString(x.ContractAddress)
		if !f(fd_QueryGetAnalysisMetadataResponse_contract_address, value) {
			return
		}
	}
	if x.ContractVersion != "" {
		value := protoreflect.ValueOfString(x.ContractVersion)
		if !f(fd_QueryGetAnalysisMetadataResponse_contract_version, value) {
			return
		}
	}
	if x.AnalysisHash != "" {
		value := protoreflect.ValueOfString(x.AnalysisHash)
		if !f(fd_QueryGetAnalysisMetadataResponse_analysis_hash, value) {
			return
		}
	}
	if x.AnalysisTimestamp != "" {
		value := protoreflect.ValueOfString(x.AnalysisTimestamp)
		if !f(fd_QueryGetAnalysisMetadataResponse_analysis_timestamp, value) {
			return
		}
	}
	if x.AnalysisCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AnalysisCount)
		if !f(fd_QueryGetAnalysisMetadataResponse_analysis_count, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_metadata":
		return x.AnalysisMetadata != ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_address":
		return x.ContractAddress != ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_version":
		return x.ContractVersion != ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_hash":
		return x.AnalysisHash != ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_timestamp":
		return x.AnalysisTimestamp != ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_count":
		return x.AnalysisCount != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_metadata":
		x.AnalysisMetadata = ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_address":
		x.ContractAddress = ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_version":
		x.ContractVersion = ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_hash":
		x.AnalysisHash = ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_timestamp":
		x.AnalysisTimestamp = ""
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_count":
		x.AnalysisCount = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_metadata":
		value := x.AnalysisMetadata
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_address":
		value := x.ContractAddress
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_version":
		value := x.ContractVersion
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_hash":
		value := x.AnalysisHash
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_timestamp":
		value := x.AnalysisTimestamp
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_count":
		value := x.AnalysisCount
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_metadata":
		x.AnalysisMetadata = value.Interface().(string)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_address":
		x.ContractAddress = value.Interface().(string)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_version":
		x.ContractVersion = value.Interface().(string)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_hash":
		x.AnalysisHash = value.Interface().(string)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_timestamp":
		x.AnalysisTimestamp = value.Interface().(string)
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_count":
		x.AnalysisCount = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_metadata":
		panic(fmt.Errorf("field analysis_metadata of message academictoken.equivalence.QueryGetAnalysisMetadataResponse is not mutable"))
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_address":
		panic(fmt.Errorf("field contract_address of message academictoken.equivalence.QueryGetAnalysisMetadataResponse is not mutable"))
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_version":
		panic(fmt.Errorf("field contract_version of message academictoken.equivalence.QueryGetAnalysisMetadataResponse is not mutable"))
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_hash":
		panic(fmt.Errorf("field analysis_hash of message academictoken.equivalence.QueryGetAnalysisMetadataResponse is not mutable"))
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_timestamp":
		panic(fmt.Errorf("field analysis_timestamp of message academictoken.equivalence.QueryGetAnalysisMetadataResponse is not mutable"))
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_count":
		panic(fmt.Errorf("field analysis_count of message academictoken.equivalence.QueryGetAnalysisMetadataResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_metadata":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_address":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.contract_version":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_hash":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_timestamp":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryGetAnalysisMetadataResponse.analysis_count":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryGetAnalysisMetadataResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryGetAnalysisMetadataResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryGetAnalysisMetadataResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryGetAnalysisMetadataResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryGetAnalysisMetadataResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AnalysisMetadata)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ContractAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ContractVersion)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AnalysisHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AnalysisTimestamp)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AnalysisCount != 0 {
			n += 1 + runtime.Sov(uint64(x.AnalysisCount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetAnalysisMetadataResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AnalysisCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AnalysisCount))
			i--
			dAtA[i] = 0x30
		}
		if len(x.AnalysisTimestamp) > 0 {
			i -= len(x.AnalysisTimestamp)
			copy(dAtA[i:], x.AnalysisTimestamp)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnalysisTimestamp)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.AnalysisHash) > 0 {
			i -= len(x.AnalysisHash)
			copy(dAtA[i:], x.AnalysisHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnalysisHash)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ContractVersion) > 0 {
			i -= len(x.ContractVersion)
			copy(dAtA[i:], x.ContractVersion)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractVersion)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ContractAddress) > 0 {
			i -= len(x.ContractAddress)
			copy(dAtA[i:], x.ContractAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContractAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.AnalysisMetadata) > 0 {
			i -= len(x.AnalysisMetadata)
			copy(dAtA[i:], x.AnalysisMetadata)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AnalysisMetadata)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryGetAnalysisMetadataResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetAnalysisMetadataResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryGetAnalysisMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisMetadata", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnalysisMetadata = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContractVersion = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnalysisHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisTimestamp", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AnalysisTimestamp = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AnalysisCount", wireType)
				}
				x.AnalysisCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AnalysisCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryVerifyAnalysisIntegrityRequest                protoreflect.MessageDescriptor
	fd_QueryVerifyAnalysisIntegrityRequest_equivalence_id protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryVerifyAnalysisIntegrityRequest = File_academictoken_equivalence_query_proto.Messages().ByName("QueryVerifyAnalysisIntegrityRequest")
	fd_QueryVerifyAnalysisIntegrityRequest_equivalence_id = md_QueryVerifyAnalysisIntegrityRequest.Fields().ByName("equivalence_id")
}

var _ protoreflect.Message = (*fastReflection_QueryVerifyAnalysisIntegrityRequest)(nil)

type fastReflection_QueryVerifyAnalysisIntegrityRequest QueryVerifyAnalysisIntegrityRequest

func (x *QueryVerifyAnalysisIntegrityRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryVerifyAnalysisIntegrityRequest)(x)
}

func (x *QueryVerifyAnalysisIntegrityRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryVerifyAnalysisIntegrityRequest_messageType fastReflection_QueryVerifyAnalysisIntegrityRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryVerifyAnalysisIntegrityRequest_messageType{}

type fastReflection_QueryVerifyAnalysisIntegrityRequest_messageType struct{}

func (x fastReflection_QueryVerifyAnalysisIntegrityRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryVerifyAnalysisIntegrityRequest)(nil)
}
func (x fastReflection_QueryVerifyAnalysisIntegrityRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryVerifyAnalysisIntegrityRequest)
}
func (x fastReflection_QueryVerifyAnalysisIntegrityRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryVerifyAnalysisIntegrityRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryVerifyAnalysisIntegrityRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryVerifyAnalysisIntegrityRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) New() protoreflect.Message {
	return new(fastReflection_QueryVerifyAnalysisIntegrityRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryVerifyAnalysisIntegrityRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EquivalenceId != "" {
		value := protoreflect.ValueOfString(x.EquivalenceId)
		if !f(fd_QueryVerifyAnalysisIntegrityRequest_equivalence_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest.equivalence_id":
		return x.EquivalenceId != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest.equivalence_id":
		x.EquivalenceId = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest.equivalence_id":
		value := x.EquivalenceId
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest.equivalence_id":
		x.EquivalenceId = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest.equivalence_id":
		panic(fmt.Errorf("field equivalence_id of message academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest.equivalence_id":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryVerifyAnalysisIntegrityRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryVerifyAnalysisIntegrityRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.EquivalenceId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryVerifyAnalysisIntegrityRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EquivalenceId) > 0 {
			i -= len(x.EquivalenceId)
			copy(dAtA[i:], x.EquivalenceId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EquivalenceId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryVerifyAnalysisIntegrityRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryVerifyAnalysisIntegrityRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryVerifyAnalysisIntegrityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalenceId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EquivalenceId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueryVerifyAnalysisIntegrityResponse                        protoreflect.MessageDescriptor
	fd_QueryVerifyAnalysisIntegrityResponse_integrity_valid        protoreflect.FieldDescriptor
	fd_QueryVerifyAnalysisIntegrityResponse_stored_hash            protoreflect.FieldDescriptor
	fd_QueryVerifyAnalysisIntegrityResponse_calculated_hash        protoreflect.FieldDescriptor
	fd_QueryVerifyAnalysisIntegrityResponse_verification_timestamp protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_equivalence_query_proto_init()
	md_QueryVerifyAnalysisIntegrityResponse = File_academictoken_equivalence_query_proto.Messages().ByName("QueryVerifyAnalysisIntegrityResponse")
	fd_QueryVerifyAnalysisIntegrityResponse_integrity_valid = md_QueryVerifyAnalysisIntegrityResponse.Fields().ByName("integrity_valid")
	fd_QueryVerifyAnalysisIntegrityResponse_stored_hash = md_QueryVerifyAnalysisIntegrityResponse.Fields().ByName("stored_hash")
	fd_QueryVerifyAnalysisIntegrityResponse_calculated_hash = md_QueryVerifyAnalysisIntegrityResponse.Fields().ByName("calculated_hash")
	fd_QueryVerifyAnalysisIntegrityResponse_verification_timestamp = md_QueryVerifyAnalysisIntegrityResponse.Fields().ByName("verification_timestamp")
}

var _ protoreflect.Message = (*fastReflection_QueryVerifyAnalysisIntegrityResponse)(nil)

type fastReflection_QueryVerifyAnalysisIntegrityResponse QueryVerifyAnalysisIntegrityResponse

func (x *QueryVerifyAnalysisIntegrityResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryVerifyAnalysisIntegrityResponse)(x)
}

func (x *QueryVerifyAnalysisIntegrityResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_equivalence_query_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryVerifyAnalysisIntegrityResponse_messageType fastReflection_QueryVerifyAnalysisIntegrityResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryVerifyAnalysisIntegrityResponse_messageType{}

type fastReflection_QueryVerifyAnalysisIntegrityResponse_messageType struct{}

func (x fastReflection_QueryVerifyAnalysisIntegrityResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryVerifyAnalysisIntegrityResponse)(nil)
}
func (x fastReflection_QueryVerifyAnalysisIntegrityResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryVerifyAnalysisIntegrityResponse)
}
func (x fastReflection_QueryVerifyAnalysisIntegrityResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryVerifyAnalysisIntegrityResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryVerifyAnalysisIntegrityResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryVerifyAnalysisIntegrityResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) New() protoreflect.Message {
	return new(fastReflection_QueryVerifyAnalysisIntegrityResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryVerifyAnalysisIntegrityResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.IntegrityValid != false {
		value := protoreflect.ValueOfBool(x.IntegrityValid)
		if !f(fd_QueryVerifyAnalysisIntegrityResponse_integrity_valid, value) {
			return
		}
	}
	if x.StoredHash != "" {
		value := protoreflect.ValueOfString(x.StoredHash)
		if !f(fd_QueryVerifyAnalysisIntegrityResponse_stored_hash, value) {
			return
		}
	}
	if x.CalculatedHash != "" {
		value := protoreflect.ValueOfString(x.CalculatedHash)
		if !f(fd_QueryVerifyAnalysisIntegrityResponse_calculated_hash, value) {
			return
		}
	}
	if x.VerificationTimestamp != "" {
		value := protoreflect.ValueOfString(x.VerificationTimestamp)
		if !f(fd_QueryVerifyAnalysisIntegrityResponse_verification_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.integrity_valid":
		return x.IntegrityValid != false
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.stored_hash":
		return x.StoredHash != ""
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.calculated_hash":
		return x.CalculatedHash != ""
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.verification_timestamp":
		return x.VerificationTimestamp != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.integrity_valid":
		x.IntegrityValid = false
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.stored_hash":
		x.StoredHash = ""
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.calculated_hash":
		x.CalculatedHash = ""
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.verification_timestamp":
		x.VerificationTimestamp = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.integrity_valid":
		value := x.IntegrityValid
		return protoreflect.ValueOfBool(value)
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.stored_hash":
		value := x.StoredHash
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.calculated_hash":
		value := x.CalculatedHash
		return protoreflect.ValueOfString(value)
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.verification_timestamp":
		value := x.VerificationTimestamp
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.integrity_valid":
		x.IntegrityValid = value.Bool()
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.stored_hash":
		x.StoredHash = value.Interface().(string)
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.calculated_hash":
		x.CalculatedHash = value.Interface().(string)
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.verification_timestamp":
		x.VerificationTimestamp = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.integrity_valid":
		panic(fmt.Errorf("field integrity_valid of message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse is not mutable"))
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.stored_hash":
		panic(fmt.Errorf("field stored_hash of message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse is not mutable"))
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.calculated_hash":
		panic(fmt.Errorf("field calculated_hash of message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse is not mutable"))
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.verification_timestamp":
		panic(fmt.Errorf("field verification_timestamp of message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.integrity_valid":
		return protoreflect.ValueOfBool(false)
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.stored_hash":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.calculated_hash":
		return protoreflect.ValueOfString("")
	case "academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse.verification_timestamp":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse"))
		}
		panic(fmt.Errorf("message academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryVerifyAnalysisIntegrityResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryVerifyAnalysisIntegrityResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.IntegrityValid {
			n += 2
		}
		l = len(x.StoredHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CalculatedHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VerificationTimestamp)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryVerifyAnalysisIntegrityResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.VerificationTimestamp) > 0 {
			i -= len(x.VerificationTimestamp)
			copy(dAtA[i:], x.VerificationTimestamp)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VerificationTimestamp)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.CalculatedHash) > 0 {
			i -= len(x.CalculatedHash)
			copy(dAtA[i:], x.CalculatedHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CalculatedHash)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.StoredHash) > 0 {
			i -= len(x.StoredHash)
			copy(dAtA[i:], x.StoredHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StoredHash)))
			i--
			dAtA[i] = 0x12
		}
		if x.IntegrityValid {
			i--
			if x.IntegrityValid {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryVerifyAnalysisIntegrityResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryVerifyAnalysisIntegrityResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryVerifyAnalysisIntegrityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IntegrityValid", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IntegrityValid = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StoredHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StoredHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CalculatedHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CalculatedHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VerificationTimestamp", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VerificationTimestamp = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: academictoken/equivalence/query.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryParamsRequest) Reset() {
	*x = QueryParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamsRequest) ProtoMessage() {}

// Deprecated: Use QueryParamsRequest.ProtoReflect.Descriptor instead.
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{0}
}

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params holds all the parameters of this module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *QueryParamsResponse) Reset() {
	*x = QueryParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamsResponse) ProtoMessage() {}

// Deprecated: Use QueryParamsResponse.ProtoReflect.Descriptor instead.
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{1}
}

func (x *QueryParamsResponse) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

// QueryListEquivalencesRequest is request type for the Query/ListEquivalences RPC method.
type QueryListEquivalencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination   *v1beta1.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	StatusFilter string               `protobuf:"bytes,2,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"` // Optional filter by status
}

func (x *QueryListEquivalencesRequest) Reset() {
	*x = QueryListEquivalencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryListEquivalencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryListEquivalencesRequest) ProtoMessage() {}

// Deprecated: Use QueryListEquivalencesRequest.ProtoReflect.Descriptor instead.
func (*QueryListEquivalencesRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryListEquivalencesRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryListEquivalencesRequest) GetStatusFilter() string {
	if x != nil {
		return x.StatusFilter
	}
	return ""
}

// QueryListEquivalencesResponse is response type for the Query/ListEquivalences RPC method.
type QueryListEquivalencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryListEquivalencesResponse) Reset() {
	*x = QueryListEquivalencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryListEquivalencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryListEquivalencesResponse) ProtoMessage() {}

// Deprecated: Use QueryListEquivalencesResponse.ProtoReflect.Descriptor instead.
func (*QueryListEquivalencesResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryListEquivalencesResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryListEquivalencesResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalenceRequest is request type for the Query/GetEquivalence RPC method.
type QueryGetEquivalenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *QueryGetEquivalenceRequest) Reset() {
	*x = QueryGetEquivalenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalenceRequest) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalenceRequest.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalenceRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryGetEquivalenceRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

// QueryGetEquivalenceResponse is response type for the Query/GetEquivalence RPC method.
type QueryGetEquivalenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalence *SubjectEquivalence `protobuf:"bytes,1,opt,name=equivalence,proto3" json:"equivalence,omitempty"`
}

func (x *QueryGetEquivalenceResponse) Reset() {
	*x = QueryGetEquivalenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalenceResponse) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalenceResponse.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalenceResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryGetEquivalenceResponse) GetEquivalence() *SubjectEquivalence {
	if x != nil {
		return x.Equivalence
	}
	return nil
}

// QueryGetEquivalencesBySourceSubjectRequest is request type for the Query/GetEquivalencesBySourceSubject RPC method.
type QueryGetEquivalencesBySourceSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSubjectId string               `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	Pagination      *v1beta1.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	StatusFilter    string               `protobuf:"bytes,3,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"` // Optional filter by status
}

func (x *QueryGetEquivalencesBySourceSubjectRequest) Reset() {
	*x = QueryGetEquivalencesBySourceSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesBySourceSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesBySourceSubjectRequest) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesBySourceSubjectRequest.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesBySourceSubjectRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{6}
}

func (x *QueryGetEquivalencesBySourceSubjectRequest) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *QueryGetEquivalencesBySourceSubjectRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryGetEquivalencesBySourceSubjectRequest) GetStatusFilter() string {
	if x != nil {
		return x.StatusFilter
	}
	return ""
}

// QueryGetEquivalencesBySourceSubjectResponse is response type for the Query/GetEquivalencesBySourceSubject RPC method.
type QueryGetEquivalencesBySourceSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalencesBySourceSubjectResponse) Reset() {
	*x = QueryGetEquivalencesBySourceSubjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesBySourceSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesBySourceSubjectResponse) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesBySourceSubjectResponse.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesBySourceSubjectResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{7}
}

func (x *QueryGetEquivalencesBySourceSubjectResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetEquivalencesBySourceSubjectResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalencesByTargetSubjectRequest is request type for the Query/GetEquivalencesByTargetSubject RPC method.
type QueryGetEquivalencesByTargetSubjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetSubjectId string               `protobuf:"bytes,1,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
	Pagination      *v1beta1.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	StatusFilter    string               `protobuf:"bytes,3,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"` // Optional filter by status
}

func (x *QueryGetEquivalencesByTargetSubjectRequest) Reset() {
	*x = QueryGetEquivalencesByTargetSubjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesByTargetSubjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesByTargetSubjectRequest) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesByTargetSubjectRequest.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesByTargetSubjectRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryGetEquivalencesByTargetSubjectRequest) GetTargetSubjectId() string {
	if x != nil {
		return x.TargetSubjectId
	}
	return ""
}

func (x *QueryGetEquivalencesByTargetSubjectRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryGetEquivalencesByTargetSubjectRequest) GetStatusFilter() string {
	if x != nil {
		return x.StatusFilter
	}
	return ""
}

// QueryGetEquivalencesByTargetSubjectResponse is response type for the Query/GetEquivalencesByTargetSubject RPC method.
type QueryGetEquivalencesByTargetSubjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalencesByTargetSubjectResponse) Reset() {
	*x = QueryGetEquivalencesByTargetSubjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesByTargetSubjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesByTargetSubjectResponse) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesByTargetSubjectResponse.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesByTargetSubjectResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryGetEquivalencesByTargetSubjectResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetEquivalencesByTargetSubjectResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalencesByInstitutionRequest is request type for the Query/GetEquivalencesByInstitution RPC method.
type QueryGetEquivalencesByInstitutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstitutionId string               `protobuf:"bytes,1,opt,name=institution_id,json=institutionId,proto3" json:"institution_id,omitempty"`
	Pagination    *v1beta1.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	StatusFilter  string               `protobuf:"bytes,3,opt,name=status_filter,json=statusFilter,proto3" json:"status_filter,omitempty"` // Optional filter by status
}

func (x *QueryGetEquivalencesByInstitutionRequest) Reset() {
	*x = QueryGetEquivalencesByInstitutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesByInstitutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesByInstitutionRequest) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesByInstitutionRequest.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesByInstitutionRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{10}
}

func (x *QueryGetEquivalencesByInstitutionRequest) GetInstitutionId() string {
	if x != nil {
		return x.InstitutionId
	}
	return ""
}

func (x *QueryGetEquivalencesByInstitutionRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryGetEquivalencesByInstitutionRequest) GetStatusFilter() string {
	if x != nil {
		return x.StatusFilter
	}
	return ""
}

// QueryGetEquivalencesByInstitutionResponse is response type for the Query/GetEquivalencesByInstitution RPC method.
type QueryGetEquivalencesByInstitutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalencesByInstitutionResponse) Reset() {
	*x = QueryGetEquivalencesByInstitutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesByInstitutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesByInstitutionResponse) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesByInstitutionResponse.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesByInstitutionResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{11}
}

func (x *QueryGetEquivalencesByInstitutionResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetEquivalencesByInstitutionResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryCheckEquivalenceStatusRequest is request type for the Query/CheckEquivalenceStatus RPC method.
type QueryCheckEquivalenceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceSubjectId string `protobuf:"bytes,1,opt,name=source_subject_id,json=sourceSubjectId,proto3" json:"source_subject_id,omitempty"`
	TargetSubjectId string `protobuf:"bytes,2,opt,name=target_subject_id,json=targetSubjectId,proto3" json:"target_subject_id,omitempty"`
}

func (x *QueryCheckEquivalenceStatusRequest) Reset() {
	*x = QueryCheckEquivalenceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCheckEquivalenceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCheckEquivalenceStatusRequest) ProtoMessage() {}

// Deprecated: Use QueryCheckEquivalenceStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryCheckEquivalenceStatusRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{12}
}

func (x *QueryCheckEquivalenceStatusRequest) GetSourceSubjectId() string {
	if x != nil {
		return x.SourceSubjectId
	}
	return ""
}

func (x *QueryCheckEquivalenceStatusRequest) GetTargetSubjectId() string {
	if x != nil {
		return x.TargetSubjectId
	}
	return ""
}

// QueryCheckEquivalenceStatusResponse is response type for the Query/CheckEquivalenceStatus RPC method.
type QueryCheckEquivalenceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasEquivalence     bool                `protobuf:"varint,1,opt,name=has_equivalence,json=hasEquivalence,proto3" json:"has_equivalence,omitempty"`
	Status             string              `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	EquivalencePercent string              `protobuf:"bytes,3,opt,name=equivalence_percent,json=equivalencePercent,proto3" json:"equivalence_percent,omitempty"`
	Equivalence        *SubjectEquivalence `protobuf:"bytes,4,opt,name=equivalence,proto3" json:"equivalence,omitempty"`
	ContractVersion    string              `protobuf:"bytes,5,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`       // Version of contract that analyzed
	AnalysisTimestamp  string              `protobuf:"bytes,6,opt,name=analysis_timestamp,json=analysisTimestamp,proto3" json:"analysis_timestamp,omitempty"` // When analysis was performed
}

func (x *QueryCheckEquivalenceStatusResponse) Reset() {
	*x = QueryCheckEquivalenceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCheckEquivalenceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCheckEquivalenceStatusResponse) ProtoMessage() {}

// Deprecated: Use QueryCheckEquivalenceStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryCheckEquivalenceStatusResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{13}
}

func (x *QueryCheckEquivalenceStatusResponse) GetHasEquivalence() bool {
	if x != nil {
		return x.HasEquivalence
	}
	return false
}

func (x *QueryCheckEquivalenceStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *QueryCheckEquivalenceStatusResponse) GetEquivalencePercent() string {
	if x != nil {
		return x.EquivalencePercent
	}
	return ""
}

func (x *QueryCheckEquivalenceStatusResponse) GetEquivalence() *SubjectEquivalence {
	if x != nil {
		return x.Equivalence
	}
	return nil
}

func (x *QueryCheckEquivalenceStatusResponse) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

func (x *QueryCheckEquivalenceStatusResponse) GetAnalysisTimestamp() string {
	if x != nil {
		return x.AnalysisTimestamp
	}
	return ""
}

// QueryGetPendingAnalysisRequest is request type for the Query/GetPendingAnalysis RPC method.
type QueryGetPendingAnalysisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v1beta1.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetPendingAnalysisRequest) Reset() {
	*x = QueryGetPendingAnalysisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetPendingAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetPendingAnalysisRequest) ProtoMessage() {}

// Deprecated: Use QueryGetPendingAnalysisRequest.ProtoReflect.Descriptor instead.
func (*QueryGetPendingAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{14}
}

func (x *QueryGetPendingAnalysisRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetPendingAnalysisResponse is response type for the Query/GetPendingAnalysis RPC method.
type QueryGetPendingAnalysisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetPendingAnalysisResponse) Reset() {
	*x = QueryGetPendingAnalysisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetPendingAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetPendingAnalysisResponse) ProtoMessage() {}

// Deprecated: Use QueryGetPendingAnalysisResponse.ProtoReflect.Descriptor instead.
func (*QueryGetPendingAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{15}
}

func (x *QueryGetPendingAnalysisResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetPendingAnalysisResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetApprovedEquivalencesRequest is request type for the Query/GetApprovedEquivalences RPC method.
type QueryGetApprovedEquivalencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination            *v1beta1.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	MinEquivalencePercent string               `protobuf:"bytes,2,opt,name=min_equivalence_percent,json=minEquivalencePercent,proto3" json:"min_equivalence_percent,omitempty"` // Optional minimum percentage filter
}

func (x *QueryGetApprovedEquivalencesRequest) Reset() {
	*x = QueryGetApprovedEquivalencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetApprovedEquivalencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetApprovedEquivalencesRequest) ProtoMessage() {}

// Deprecated: Use QueryGetApprovedEquivalencesRequest.ProtoReflect.Descriptor instead.
func (*QueryGetApprovedEquivalencesRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{16}
}

func (x *QueryGetApprovedEquivalencesRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryGetApprovedEquivalencesRequest) GetMinEquivalencePercent() string {
	if x != nil {
		return x.MinEquivalencePercent
	}
	return ""
}

// QueryGetApprovedEquivalencesResponse is response type for the Query/GetApprovedEquivalences RPC method.
type QueryGetApprovedEquivalencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetApprovedEquivalencesResponse) Reset() {
	*x = QueryGetApprovedEquivalencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetApprovedEquivalencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetApprovedEquivalencesResponse) ProtoMessage() {}

// Deprecated: Use QueryGetApprovedEquivalencesResponse.ProtoReflect.Descriptor instead.
func (*QueryGetApprovedEquivalencesResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{17}
}

func (x *QueryGetApprovedEquivalencesResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetApprovedEquivalencesResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetRejectedEquivalencesRequest is request type for the Query/GetRejectedEquivalences RPC method.
type QueryGetRejectedEquivalencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *v1beta1.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetRejectedEquivalencesRequest) Reset() {
	*x = QueryGetRejectedEquivalencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRejectedEquivalencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRejectedEquivalencesRequest) ProtoMessage() {}

// Deprecated: Use QueryGetRejectedEquivalencesRequest.ProtoReflect.Descriptor instead.
func (*QueryGetRejectedEquivalencesRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{18}
}

func (x *QueryGetRejectedEquivalencesRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetRejectedEquivalencesResponse is response type for the Query/GetRejectedEquivalences RPC method.
type QueryGetRejectedEquivalencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetRejectedEquivalencesResponse) Reset() {
	*x = QueryGetRejectedEquivalencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetRejectedEquivalencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetRejectedEquivalencesResponse) ProtoMessage() {}

// Deprecated: Use QueryGetRejectedEquivalencesResponse.ProtoReflect.Descriptor instead.
func (*QueryGetRejectedEquivalencesResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{19}
}

func (x *QueryGetRejectedEquivalencesResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetRejectedEquivalencesResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalencesByContractRequest is request type for the Query/GetEquivalencesByContract RPC method.
type QueryGetEquivalencesByContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string               `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Pagination      *v1beta1.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalencesByContractRequest) Reset() {
	*x = QueryGetEquivalencesByContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesByContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesByContractRequest) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesByContractRequest.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesByContractRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{20}
}

func (x *QueryGetEquivalencesByContractRequest) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *QueryGetEquivalencesByContractRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalencesByContractResponse is response type for the Query/GetEquivalencesByContract RPC method.
type QueryGetEquivalencesByContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalencesByContractResponse) Reset() {
	*x = QueryGetEquivalencesByContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesByContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesByContractResponse) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesByContractResponse.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesByContractResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{21}
}

func (x *QueryGetEquivalencesByContractResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetEquivalencesByContractResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalencesByContractVersionRequest is request type for the Query/GetEquivalencesByContractVersion RPC method.
type QueryGetEquivalencesByContractVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractVersion string               `protobuf:"bytes,1,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	Pagination      *v1beta1.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalencesByContractVersionRequest) Reset() {
	*x = QueryGetEquivalencesByContractVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesByContractVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesByContractVersionRequest) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesByContractVersionRequest.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesByContractVersionRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{22}
}

func (x *QueryGetEquivalencesByContractVersionRequest) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

func (x *QueryGetEquivalencesByContractVersionRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalencesByContractVersionResponse is response type for the Query/GetEquivalencesByContractVersion RPC method.
type QueryGetEquivalencesByContractVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalencesByContractVersionResponse) Reset() {
	*x = QueryGetEquivalencesByContractVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalencesByContractVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalencesByContractVersionResponse) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalencesByContractVersionResponse.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalencesByContractVersionResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{23}
}

func (x *QueryGetEquivalencesByContractVersionResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetEquivalencesByContractVersionResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalenceHistoryRequest is request type for the Query/GetEquivalenceHistory RPC method.
type QueryGetEquivalenceHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubjectId  string               `protobuf:"bytes,1,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	Pagination *v1beta1.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalenceHistoryRequest) Reset() {
	*x = QueryGetEquivalenceHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalenceHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalenceHistoryRequest) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalenceHistoryRequest.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalenceHistoryRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{24}
}

func (x *QueryGetEquivalenceHistoryRequest) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *QueryGetEquivalenceHistoryRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalenceHistoryResponse is response type for the Query/GetEquivalenceHistory RPC method.
type QueryGetEquivalenceHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Equivalences []*SubjectEquivalence `protobuf:"bytes,1,rep,name=equivalences,proto3" json:"equivalences,omitempty"`
	Pagination   *v1beta1.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryGetEquivalenceHistoryResponse) Reset() {
	*x = QueryGetEquivalenceHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalenceHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalenceHistoryResponse) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalenceHistoryResponse.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalenceHistoryResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{25}
}

func (x *QueryGetEquivalenceHistoryResponse) GetEquivalences() []*SubjectEquivalence {
	if x != nil {
		return x.Equivalences
	}
	return nil
}

func (x *QueryGetEquivalenceHistoryResponse) GetPagination() *v1beta1.PageResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// QueryGetEquivalenceStatsRequest is request type for the Query/GetEquivalenceStats RPC method.
type QueryGetEquivalenceStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryGetEquivalenceStatsRequest) Reset() {
	*x = QueryGetEquivalenceStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalenceStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalenceStatsRequest) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalenceStatsRequest.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalenceStatsRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{26}
}

// QueryGetEquivalenceStatsResponse is response type for the Query/GetEquivalenceStats RPC method.
type QueryGetEquivalenceStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalEquivalences             uint64   `protobuf:"varint,1,opt,name=total_equivalences,json=totalEquivalences,proto3" json:"total_equivalences,omitempty"`
	PendingAnalysis               uint64   `protobuf:"varint,2,opt,name=pending_analysis,json=pendingAnalysis,proto3" json:"pending_analysis,omitempty"` // Changed from pending_equivalences
	ApprovedEquivalences          uint64   `protobuf:"varint,3,opt,name=approved_equivalences,json=approvedEquivalences,proto3" json:"approved_equivalences,omitempty"`
	RejectedEquivalences          uint64   `protobuf:"varint,4,opt,name=rejected_equivalences,json=rejectedEquivalences,proto3" json:"rejected_equivalences,omitempty"`
	ErrorEquivalences             uint64   `protobuf:"varint,5,opt,name=error_equivalences,json=errorEquivalences,proto3" json:"error_equivalences,omitempty"` // Contract analysis errors
	AverageEquivalencePercent     string   `protobuf:"bytes,6,opt,name=average_equivalence_percent,json=averageEquivalencePercent,proto3" json:"average_equivalence_percent,omitempty"`
	TotalInstitutionsInvolved     uint64   `protobuf:"varint,7,opt,name=total_institutions_involved,json=totalInstitutionsInvolved,proto3" json:"total_institutions_involved,omitempty"`
	TotalSubjectsWithEquivalences uint64   `protobuf:"varint,8,opt,name=total_subjects_with_equivalences,json=totalSubjectsWithEquivalences,proto3" json:"total_subjects_with_equivalences,omitempty"`
	TotalContractAnalyses         uint64   `protobuf:"varint,9,opt,name=total_contract_analyses,json=totalContractAnalyses,proto3" json:"total_contract_analyses,omitempty"`    // Total number of contract executions
	ActiveContractVersions        []string `protobuf:"bytes,10,rep,name=active_contract_versions,json=activeContractVersions,proto3" json:"active_contract_versions,omitempty"` // Currently used contract versions
}

func (x *QueryGetEquivalenceStatsResponse) Reset() {
	*x = QueryGetEquivalenceStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetEquivalenceStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetEquivalenceStatsResponse) ProtoMessage() {}

// Deprecated: Use QueryGetEquivalenceStatsResponse.ProtoReflect.Descriptor instead.
func (*QueryGetEquivalenceStatsResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{27}
}

func (x *QueryGetEquivalenceStatsResponse) GetTotalEquivalences() uint64 {
	if x != nil {
		return x.TotalEquivalences
	}
	return 0
}

func (x *QueryGetEquivalenceStatsResponse) GetPendingAnalysis() uint64 {
	if x != nil {
		return x.PendingAnalysis
	}
	return 0
}

func (x *QueryGetEquivalenceStatsResponse) GetApprovedEquivalences() uint64 {
	if x != nil {
		return x.ApprovedEquivalences
	}
	return 0
}

func (x *QueryGetEquivalenceStatsResponse) GetRejectedEquivalences() uint64 {
	if x != nil {
		return x.RejectedEquivalences
	}
	return 0
}

func (x *QueryGetEquivalenceStatsResponse) GetErrorEquivalences() uint64 {
	if x != nil {
		return x.ErrorEquivalences
	}
	return 0
}

func (x *QueryGetEquivalenceStatsResponse) GetAverageEquivalencePercent() string {
	if x != nil {
		return x.AverageEquivalencePercent
	}
	return ""
}

func (x *QueryGetEquivalenceStatsResponse) GetTotalInstitutionsInvolved() uint64 {
	if x != nil {
		return x.TotalInstitutionsInvolved
	}
	return 0
}

func (x *QueryGetEquivalenceStatsResponse) GetTotalSubjectsWithEquivalences() uint64 {
	if x != nil {
		return x.TotalSubjectsWithEquivalences
	}
	return 0
}

func (x *QueryGetEquivalenceStatsResponse) GetTotalContractAnalyses() uint64 {
	if x != nil {
		return x.TotalContractAnalyses
	}
	return 0
}

func (x *QueryGetEquivalenceStatsResponse) GetActiveContractVersions() []string {
	if x != nil {
		return x.ActiveContractVersions
	}
	return nil
}

// QueryGetAnalysisMetadataRequest is request type for the Query/GetAnalysisMetadata RPC method.
type QueryGetAnalysisMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquivalenceId string `protobuf:"bytes,1,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
}

func (x *QueryGetAnalysisMetadataRequest) Reset() {
	*x = QueryGetAnalysisMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetAnalysisMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetAnalysisMetadataRequest) ProtoMessage() {}

// Deprecated: Use QueryGetAnalysisMetadataRequest.ProtoReflect.Descriptor instead.
func (*QueryGetAnalysisMetadataRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{28}
}

func (x *QueryGetAnalysisMetadataRequest) GetEquivalenceId() string {
	if x != nil {
		return x.EquivalenceId
	}
	return ""
}

// QueryGetAnalysisMetadataResponse is response type for the Query/GetAnalysisMetadata RPC method.
type QueryGetAnalysisMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnalysisMetadata  string `protobuf:"bytes,1,opt,name=analysis_metadata,json=analysisMetadata,proto3" json:"analysis_metadata,omitempty"` // Full JSON metadata from contract
	ContractAddress   string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	ContractVersion   string `protobuf:"bytes,3,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	AnalysisHash      string `protobuf:"bytes,4,opt,name=analysis_hash,json=analysisHash,proto3" json:"analysis_hash,omitempty"`
	AnalysisTimestamp string `protobuf:"bytes,5,opt,name=analysis_timestamp,json=analysisTimestamp,proto3" json:"analysis_timestamp,omitempty"`
	AnalysisCount     uint64 `protobuf:"varint,6,opt,name=analysis_count,json=analysisCount,proto3" json:"analysis_count,omitempty"` // How many times this equivalence was analyzed
}

func (x *QueryGetAnalysisMetadataResponse) Reset() {
	*x = QueryGetAnalysisMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryGetAnalysisMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGetAnalysisMetadataResponse) ProtoMessage() {}

// Deprecated: Use QueryGetAnalysisMetadataResponse.ProtoReflect.Descriptor instead.
func (*QueryGetAnalysisMetadataResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{29}
}

func (x *QueryGetAnalysisMetadataResponse) GetAnalysisMetadata() string {
	if x != nil {
		return x.AnalysisMetadata
	}
	return ""
}

func (x *QueryGetAnalysisMetadataResponse) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *QueryGetAnalysisMetadataResponse) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

func (x *QueryGetAnalysisMetadataResponse) GetAnalysisHash() string {
	if x != nil {
		return x.AnalysisHash
	}
	return ""
}

func (x *QueryGetAnalysisMetadataResponse) GetAnalysisTimestamp() string {
	if x != nil {
		return x.AnalysisTimestamp
	}
	return ""
}

func (x *QueryGetAnalysisMetadataResponse) GetAnalysisCount() uint64 {
	if x != nil {
		return x.AnalysisCount
	}
	return 0
}

// QueryVerifyAnalysisIntegrityRequest is request type for the Query/VerifyAnalysisIntegrity RPC method.
type QueryVerifyAnalysisIntegrityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EquivalenceId string `protobuf:"bytes,1,opt,name=equivalence_id,json=equivalenceId,proto3" json:"equivalence_id,omitempty"`
}

func (x *QueryVerifyAnalysisIntegrityRequest) Reset() {
	*x = QueryVerifyAnalysisIntegrityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVerifyAnalysisIntegrityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVerifyAnalysisIntegrityRequest) ProtoMessage() {}

// Deprecated: Use QueryVerifyAnalysisIntegrityRequest.ProtoReflect.Descriptor instead.
func (*QueryVerifyAnalysisIntegrityRequest) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{30}
}

func (x *QueryVerifyAnalysisIntegrityRequest) GetEquivalenceId() string {
	if x != nil {
		return x.EquivalenceId
	}
	return ""
}

// QueryVerifyAnalysisIntegrityResponse is response type for the Query/VerifyAnalysisIntegrity RPC method.
type QueryVerifyAnalysisIntegrityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntegrityValid        bool   `protobuf:"varint,1,opt,name=integrity_valid,json=integrityValid,proto3" json:"integrity_valid,omitempty"`
	StoredHash            string `protobuf:"bytes,2,opt,name=stored_hash,json=storedHash,proto3" json:"stored_hash,omitempty"`
	CalculatedHash        string `protobuf:"bytes,3,opt,name=calculated_hash,json=calculatedHash,proto3" json:"calculated_hash,omitempty"`
	VerificationTimestamp string `protobuf:"bytes,4,opt,name=verification_timestamp,json=verificationTimestamp,proto3" json:"verification_timestamp,omitempty"`
}

func (x *QueryVerifyAnalysisIntegrityResponse) Reset() {
	*x = QueryVerifyAnalysisIntegrityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_equivalence_query_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVerifyAnalysisIntegrityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVerifyAnalysisIntegrityResponse) ProtoMessage() {}

// Deprecated: Use QueryVerifyAnalysisIntegrityResponse.ProtoReflect.Descriptor instead.
func (*QueryVerifyAnalysisIntegrityResponse) Descriptor() ([]byte, []int) {
	return file_academictoken_equivalence_query_proto_rawDescGZIP(), []int{31}
}

func (x *QueryVerifyAnalysisIntegrityResponse) GetIntegrityValid() bool {
	if x != nil {
		return x.IntegrityValid
	}
	return false
}

func (x *QueryVerifyAnalysisIntegrityResponse) GetStoredHash() string {
	if x != nil {
		return x.StoredHash
	}
	return ""
}

func (x *QueryVerifyAnalysisIntegrityResponse) GetCalculatedHash() string {
	if x != nil {
		return x.CalculatedHash
	}
	return ""
}

func (x *QueryVerifyAnalysisIntegrityResponse) GetVerificationTimestamp() string {
	if x != nil {
		return x.VerificationTimestamp
	}
	return ""
}

var File_academictoken_equivalence_query_proto protoreflect.FileDescriptor

var file_academictoken_equivalence_query_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x74, 0x0a, 0x1b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0xc5, 0x01, 0x0a, 0x2a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x2b, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x2a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xcf, 0x01, 0x0a, 0x2b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a, 0x28, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x68, 0x61, 0x73, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x4f,
	0x0a, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x68, 0x0a, 0x1e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x23, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x69, 0x6e,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x22, 0xc8, 0x01, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x23,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x01, 0x0a, 0x24,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x25, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa1, 0x01, 0x0a, 0x2c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x2d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0c,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21,
	0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xd0, 0x04, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x33, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x49, 0x6e, 0x76, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa0,
	0x02, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x4c, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xd0, 0x01, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x35, 0x0a, 0x16, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x32, 0xa0, 0x1b, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x92, 0x01, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0xb6, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x12, 0x27, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x2e,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x7d, 0x12, 0xfb, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x46, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12,
	0x42, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xfb, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47,
	0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0xf7, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xe9, 0x01, 0x0a, 0x16,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f,
	0x7b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xcd, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x39,
	0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0xd4, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0xd4,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0xed, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x40, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45,
	0x12, 0x43, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x7d, 0x12, 0x8a, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x12, 0x4b, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x7d, 0x12, 0xcd, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x2e, 0x61,
	0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65,
	0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x12, 0x2f, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x7b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x61, 0x63, 0x61,
	0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x45, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0xcc, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x7b, 0x65, 0x71, 0x75,
	0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xd6, 0x01, 0x0a,
	0x17, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x12, 0x32, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x2f, 0x7b, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0xdd, 0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x63,
	0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0xa2, 0x02, 0x03, 0x41, 0x45, 0x58, 0xaa, 0x02, 0x19, 0x41, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0xca, 0x02, 0x19, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0xe2, 0x02, 0x25, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5c, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x41, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3a, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_academictoken_equivalence_query_proto_rawDescOnce sync.Once
	file_academictoken_equivalence_query_proto_rawDescData = file_academictoken_equivalence_query_proto_rawDesc
)

func file_academictoken_equivalence_query_proto_rawDescGZIP() []byte {
	file_academictoken_equivalence_query_proto_rawDescOnce.Do(func() {
		file_academictoken_equivalence_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_academictoken_equivalence_query_proto_rawDescData)
	})
	return file_academictoken_equivalence_query_proto_rawDescData
}

var file_academictoken_equivalence_query_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_academictoken_equivalence_query_proto_goTypes = []interface{}{
	(*QueryParamsRequest)(nil),                            // 0: academictoken.equivalence.QueryParamsRequest
	(*QueryParamsResponse)(nil),                           // 1: academictoken.equivalence.QueryParamsResponse
	(*QueryListEquivalencesRequest)(nil),                  // 2: academictoken.equivalence.QueryListEquivalencesRequest
	(*QueryListEquivalencesResponse)(nil),                 // 3: academictoken.equivalence.QueryListEquivalencesResponse
	(*QueryGetEquivalenceRequest)(nil),                    // 4: academictoken.equivalence.QueryGetEquivalenceRequest
	(*QueryGetEquivalenceResponse)(nil),                   // 5: academictoken.equivalence.QueryGetEquivalenceResponse
	(*QueryGetEquivalencesBySourceSubjectRequest)(nil),    // 6: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest
	(*QueryGetEquivalencesBySourceSubjectResponse)(nil),   // 7: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse
	(*QueryGetEquivalencesByTargetSubjectRequest)(nil),    // 8: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest
	(*QueryGetEquivalencesByTargetSubjectResponse)(nil),   // 9: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse
	(*QueryGetEquivalencesByInstitutionRequest)(nil),      // 10: academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest
	(*QueryGetEquivalencesByInstitutionResponse)(nil),     // 11: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse
	(*QueryCheckEquivalenceStatusRequest)(nil),            // 12: academictoken.equivalence.QueryCheckEquivalenceStatusRequest
	(*QueryCheckEquivalenceStatusResponse)(nil),           // 13: academictoken.equivalence.QueryCheckEquivalenceStatusResponse
	(*QueryGetPendingAnalysisRequest)(nil),                // 14: academictoken.equivalence.QueryGetPendingAnalysisRequest
	(*QueryGetPendingAnalysisResponse)(nil),               // 15: academictoken.equivalence.QueryGetPendingAnalysisResponse
	(*QueryGetApprovedEquivalencesRequest)(nil),           // 16: academictoken.equivalence.QueryGetApprovedEquivalencesRequest
	(*QueryGetApprovedEquivalencesResponse)(nil),          // 17: academictoken.equivalence.QueryGetApprovedEquivalencesResponse
	(*QueryGetRejectedEquivalencesRequest)(nil),           // 18: academictoken.equivalence.QueryGetRejectedEquivalencesRequest
	(*QueryGetRejectedEquivalencesResponse)(nil),          // 19: academictoken.equivalence.QueryGetRejectedEquivalencesResponse
	(*QueryGetEquivalencesByContractRequest)(nil),         // 20: academictoken.equivalence.QueryGetEquivalencesByContractRequest
	(*QueryGetEquivalencesByContractResponse)(nil),        // 21: academictoken.equivalence.QueryGetEquivalencesByContractResponse
	(*QueryGetEquivalencesByContractVersionRequest)(nil),  // 22: academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest
	(*QueryGetEquivalencesByContractVersionResponse)(nil), // 23: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse
	(*QueryGetEquivalenceHistoryRequest)(nil),             // 24: academictoken.equivalence.QueryGetEquivalenceHistoryRequest
	(*QueryGetEquivalenceHistoryResponse)(nil),            // 25: academictoken.equivalence.QueryGetEquivalenceHistoryResponse
	(*QueryGetEquivalenceStatsRequest)(nil),               // 26: academictoken.equivalence.QueryGetEquivalenceStatsRequest
	(*QueryGetEquivalenceStatsResponse)(nil),              // 27: academictoken.equivalence.QueryGetEquivalenceStatsResponse
	(*QueryGetAnalysisMetadataRequest)(nil),               // 28: academictoken.equivalence.QueryGetAnalysisMetadataRequest
	(*QueryGetAnalysisMetadataResponse)(nil),              // 29: academictoken.equivalence.QueryGetAnalysisMetadataResponse
	(*QueryVerifyAnalysisIntegrityRequest)(nil),           // 30: academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest
	(*QueryVerifyAnalysisIntegrityResponse)(nil),          // 31: academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse
	(*Params)(nil),               // 32: academictoken.equivalence.Params
	(*v1beta1.PageRequest)(nil),  // 33: cosmos.base.query.v1beta1.PageRequest
	(*SubjectEquivalence)(nil),   // 34: academictoken.equivalence.SubjectEquivalence
	(*v1beta1.PageResponse)(nil), // 35: cosmos.base.query.v1beta1.PageResponse
}
var file_academictoken_equivalence_query_proto_depIdxs = []int32{
	32, // 0: academictoken.equivalence.QueryParamsResponse.params:type_name -> academictoken.equivalence.Params
	33, // 1: academictoken.equivalence.QueryListEquivalencesRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 2: academictoken.equivalence.QueryListEquivalencesResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 3: academictoken.equivalence.QueryListEquivalencesResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	34, // 4: academictoken.equivalence.QueryGetEquivalenceResponse.equivalence:type_name -> academictoken.equivalence.SubjectEquivalence
	33, // 5: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 6: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 7: academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	33, // 8: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 9: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 10: academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	33, // 11: academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 12: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 13: academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	34, // 14: academictoken.equivalence.QueryCheckEquivalenceStatusResponse.equivalence:type_name -> academictoken.equivalence.SubjectEquivalence
	33, // 15: academictoken.equivalence.QueryGetPendingAnalysisRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 16: academictoken.equivalence.QueryGetPendingAnalysisResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 17: academictoken.equivalence.QueryGetPendingAnalysisResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	33, // 18: academictoken.equivalence.QueryGetApprovedEquivalencesRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 19: academictoken.equivalence.QueryGetApprovedEquivalencesResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 20: academictoken.equivalence.QueryGetApprovedEquivalencesResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	33, // 21: academictoken.equivalence.QueryGetRejectedEquivalencesRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 22: academictoken.equivalence.QueryGetRejectedEquivalencesResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 23: academictoken.equivalence.QueryGetRejectedEquivalencesResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	33, // 24: academictoken.equivalence.QueryGetEquivalencesByContractRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 25: academictoken.equivalence.QueryGetEquivalencesByContractResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 26: academictoken.equivalence.QueryGetEquivalencesByContractResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	33, // 27: academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 28: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 29: academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	33, // 30: academictoken.equivalence.QueryGetEquivalenceHistoryRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	34, // 31: academictoken.equivalence.QueryGetEquivalenceHistoryResponse.equivalences:type_name -> academictoken.equivalence.SubjectEquivalence
	35, // 32: academictoken.equivalence.QueryGetEquivalenceHistoryResponse.pagination:type_name -> cosmos.base.query.v1beta1.PageResponse
	0,  // 33: academictoken.equivalence.Query.Params:input_type -> academictoken.equivalence.QueryParamsRequest
	2,  // 34: academictoken.equivalence.Query.ListEquivalences:input_type -> academictoken.equivalence.QueryListEquivalencesRequest
	4,  // 35: academictoken.equivalence.Query.GetEquivalence:input_type -> academictoken.equivalence.QueryGetEquivalenceRequest
	6,  // 36: academictoken.equivalence.Query.GetEquivalencesBySourceSubject:input_type -> academictoken.equivalence.QueryGetEquivalencesBySourceSubjectRequest
	8,  // 37: academictoken.equivalence.Query.GetEquivalencesByTargetSubject:input_type -> academictoken.equivalence.QueryGetEquivalencesByTargetSubjectRequest
	10, // 38: academictoken.equivalence.Query.GetEquivalencesByInstitution:input_type -> academictoken.equivalence.QueryGetEquivalencesByInstitutionRequest
	12, // 39: academictoken.equivalence.Query.CheckEquivalenceStatus:input_type -> academictoken.equivalence.QueryCheckEquivalenceStatusRequest
	14, // 40: academictoken.equivalence.Query.GetPendingAnalysis:input_type -> academictoken.equivalence.QueryGetPendingAnalysisRequest
	16, // 41: academictoken.equivalence.Query.GetApprovedEquivalences:input_type -> academictoken.equivalence.QueryGetApprovedEquivalencesRequest
	18, // 42: academictoken.equivalence.Query.GetRejectedEquivalences:input_type -> academictoken.equivalence.QueryGetRejectedEquivalencesRequest
	20, // 43: academictoken.equivalence.Query.GetEquivalencesByContract:input_type -> academictoken.equivalence.QueryGetEquivalencesByContractRequest
	22, // 44: academictoken.equivalence.Query.GetEquivalencesByContractVersion:input_type -> academictoken.equivalence.QueryGetEquivalencesByContractVersionRequest
	24, // 45: academictoken.equivalence.Query.GetEquivalenceHistory:input_type -> academictoken.equivalence.QueryGetEquivalenceHistoryRequest
	26, // 46: academictoken.equivalence.Query.GetEquivalenceStats:input_type -> academictoken.equivalence.QueryGetEquivalenceStatsRequest
	28, // 47: academictoken.equivalence.Query.GetAnalysisMetadata:input_type -> academictoken.equivalence.QueryGetAnalysisMetadataRequest
	30, // 48: academictoken.equivalence.Query.VerifyAnalysisIntegrity:input_type -> academictoken.equivalence.QueryVerifyAnalysisIntegrityRequest
	1,  // 49: academictoken.equivalence.Query.Params:output_type -> academictoken.equivalence.QueryParamsResponse
	3,  // 50: academictoken.equivalence.Query.ListEquivalences:output_type -> academictoken.equivalence.QueryListEquivalencesResponse
	5,  // 51: academictoken.equivalence.Query.GetEquivalence:output_type -> academictoken.equivalence.QueryGetEquivalenceResponse
	7,  // 52: academictoken.equivalence.Query.GetEquivalencesBySourceSubject:output_type -> academictoken.equivalence.QueryGetEquivalencesBySourceSubjectResponse
	9,  // 53: academictoken.equivalence.Query.GetEquivalencesByTargetSubject:output_type -> academictoken.equivalence.QueryGetEquivalencesByTargetSubjectResponse
	11, // 54: academictoken.equivalence.Query.GetEquivalencesByInstitution:output_type -> academictoken.equivalence.QueryGetEquivalencesByInstitutionResponse
	13, // 55: academictoken.equivalence.Query.CheckEquivalenceStatus:output_type -> academictoken.equivalence.QueryCheckEquivalenceStatusResponse
	15, // 56: academictoken.equivalence.Query.GetPendingAnalysis:output_type -> academictoken.equivalence.QueryGetPendingAnalysisResponse
	17, // 57: academictoken.equivalence.Query.GetApprovedEquivalences:output_type -> academictoken.equivalence.QueryGetApprovedEquivalencesResponse
	19, // 58: academictoken.equivalence.Query.GetRejectedEquivalences:output_type -> academictoken.equivalence.QueryGetRejectedEquivalencesResponse
	21, // 59: academictoken.equivalence.Query.GetEquivalencesByContract:output_type -> academictoken.equivalence.QueryGetEquivalencesByContractResponse
	23, // 60: academictoken.equivalence.Query.GetEquivalencesByContractVersion:output_type -> academictoken.equivalence.QueryGetEquivalencesByContractVersionResponse
	25, // 61: academictoken.equivalence.Query.GetEquivalenceHistory:output_type -> academictoken.equivalence.QueryGetEquivalenceHistoryResponse
	27, // 62: academictoken.equivalence.Query.GetEquivalenceStats:output_type -> academictoken.equivalence.QueryGetEquivalenceStatsResponse
	29, // 63: academictoken.equivalence.Query.GetAnalysisMetadata:output_type -> academictoken.equivalence.QueryGetAnalysisMetadataResponse
	31, // 64: academictoken.equivalence.Query.VerifyAnalysisIntegrity:output_type -> academictoken.equivalence.QueryVerifyAnalysisIntegrityResponse
	49, // [49:65] is the sub-list for method output_type
	33, // [33:49] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_academictoken_equivalence_query_proto_init() }
func file_academictoken_equivalence_query_proto_init() {
	if File_academictoken_equivalence_query_proto != nil {
		return
	}
	file_academictoken_equivalence_params_proto_init()
	file_academictoken_equivalence_subject_equivalence_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_academictoken_equivalence_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryListEquivalencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryListEquivalencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesBySourceSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesBySourceSubjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesByTargetSubjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesByTargetSubjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesByInstitutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesByInstitutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCheckEquivalenceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCheckEquivalenceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetPendingAnalysisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetPendingAnalysisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetApprovedEquivalencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetApprovedEquivalencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRejectedEquivalencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetRejectedEquivalencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesByContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesByContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesByContractVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalencesByContractVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalenceHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalenceHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalenceStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetEquivalenceStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetAnalysisMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryGetAnalysisMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVerifyAnalysisIntegrityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_equivalence_query_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVerifyAnalysisIntegrityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_academictoken_equivalence_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_academictoken_equivalence_query_proto_goTypes,
		DependencyIndexes: file_academictoken_equivalence_query_proto_depIdxs,
		MessageInfos:      file_academictoken_equivalence_query_proto_msgTypes,
	}.Build()
	File_academictoken_equivalence_query_proto = out.File
	file_academictoken_equivalence_query_proto_rawDesc = nil
	file_academictoken_equivalence_query_proto_goTypes = nil
	file_academictoken_equivalence_query_proto_depIdxs = nil
}
