// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: academictoken/degree/tx.proto

package degree

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_RequestDegree_FullMethodName              = "/academictoken.degree.Msg/RequestDegree"
	Msg_ValidateDegreeRequirements_FullMethodName = "/academictoken.degree.Msg/ValidateDegreeRequirements"
	Msg_IssueDegree_FullMethodName                = "/academictoken.degree.Msg/IssueDegree"
	Msg_UpdateDegreeContract_FullMethodName       = "/academictoken.degree.Msg/UpdateDegreeContract"
	Msg_CancelDegreeRequest_FullMethodName        = "/academictoken.degree.Msg/CancelDegreeRequest"
	Msg_UpdateParams_FullMethodName               = "/academictoken.degree.Msg/UpdateParams"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// RequestDegree requests a degree for a student
	RequestDegree(ctx context.Context, in *MsgRequestDegree, opts ...grpc.CallOption) (*MsgRequestDegreeResponse, error)
	// ValidateDegreeRequirements validates if student meets graduation requirements
	ValidateDegreeRequirements(ctx context.Context, in *MsgValidateDegreeRequirements, opts ...grpc.CallOption) (*MsgValidateDegreeRequirementsResponse, error)
	// IssueDegree issues a degree after successful validation
	IssueDegree(ctx context.Context, in *MsgIssueDegree, opts ...grpc.CallOption) (*MsgIssueDegreeResponse, error)
	// UpdateDegreeContract updates the CosmWasm contract address
	UpdateDegreeContract(ctx context.Context, in *MsgUpdateDegreeContract, opts ...grpc.CallOption) (*MsgUpdateDegreeContractResponse, error)
	// CancelDegreeRequest cancels a pending degree request
	CancelDegreeRequest(ctx context.Context, in *MsgCancelDegreeRequest, opts ...grpc.CallOption) (*MsgCancelDegreeRequestResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RequestDegree(ctx context.Context, in *MsgRequestDegree, opts ...grpc.CallOption) (*MsgRequestDegreeResponse, error) {
	out := new(MsgRequestDegreeResponse)
	err := c.cc.Invoke(ctx, Msg_RequestDegree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValidateDegreeRequirements(ctx context.Context, in *MsgValidateDegreeRequirements, opts ...grpc.CallOption) (*MsgValidateDegreeRequirementsResponse, error) {
	out := new(MsgValidateDegreeRequirementsResponse)
	err := c.cc.Invoke(ctx, Msg_ValidateDegreeRequirements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssueDegree(ctx context.Context, in *MsgIssueDegree, opts ...grpc.CallOption) (*MsgIssueDegreeResponse, error) {
	out := new(MsgIssueDegreeResponse)
	err := c.cc.Invoke(ctx, Msg_IssueDegree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDegreeContract(ctx context.Context, in *MsgUpdateDegreeContract, opts ...grpc.CallOption) (*MsgUpdateDegreeContractResponse, error) {
	out := new(MsgUpdateDegreeContractResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateDegreeContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelDegreeRequest(ctx context.Context, in *MsgCancelDegreeRequest, opts ...grpc.CallOption) (*MsgCancelDegreeRequestResponse, error) {
	out := new(MsgCancelDegreeRequestResponse)
	err := c.cc.Invoke(ctx, Msg_CancelDegreeRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// RequestDegree requests a degree for a student
	RequestDegree(context.Context, *MsgRequestDegree) (*MsgRequestDegreeResponse, error)
	// ValidateDegreeRequirements validates if student meets graduation requirements
	ValidateDegreeRequirements(context.Context, *MsgValidateDegreeRequirements) (*MsgValidateDegreeRequirementsResponse, error)
	// IssueDegree issues a degree after successful validation
	IssueDegree(context.Context, *MsgIssueDegree) (*MsgIssueDegreeResponse, error)
	// UpdateDegreeContract updates the CosmWasm contract address
	UpdateDegreeContract(context.Context, *MsgUpdateDegreeContract) (*MsgUpdateDegreeContractResponse, error)
	// CancelDegreeRequest cancels a pending degree request
	CancelDegreeRequest(context.Context, *MsgCancelDegreeRequest) (*MsgCancelDegreeRequestResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) RequestDegree(context.Context, *MsgRequestDegree) (*MsgRequestDegreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDegree not implemented")
}
func (UnimplementedMsgServer) ValidateDegreeRequirements(context.Context, *MsgValidateDegreeRequirements) (*MsgValidateDegreeRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDegreeRequirements not implemented")
}
func (UnimplementedMsgServer) IssueDegree(context.Context, *MsgIssueDegree) (*MsgIssueDegreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueDegree not implemented")
}
func (UnimplementedMsgServer) UpdateDegreeContract(context.Context, *MsgUpdateDegreeContract) (*MsgUpdateDegreeContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDegreeContract not implemented")
}
func (UnimplementedMsgServer) CancelDegreeRequest(context.Context, *MsgCancelDegreeRequest) (*MsgCancelDegreeRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDegreeRequest not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_RequestDegree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestDegree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestDegree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestDegree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestDegree(ctx, req.(*MsgRequestDegree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValidateDegreeRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValidateDegreeRequirements)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValidateDegreeRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ValidateDegreeRequirements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValidateDegreeRequirements(ctx, req.(*MsgValidateDegreeRequirements))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssueDegree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueDegree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueDegree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_IssueDegree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueDegree(ctx, req.(*MsgIssueDegree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDegreeContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDegreeContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDegreeContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateDegreeContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDegreeContract(ctx, req.(*MsgUpdateDegreeContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelDegreeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelDegreeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CancelDegreeRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelDegreeRequest(ctx, req.(*MsgCancelDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.degree.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestDegree",
			Handler:    _Msg_RequestDegree_Handler,
		},
		{
			MethodName: "ValidateDegreeRequirements",
			Handler:    _Msg_ValidateDegreeRequirements_Handler,
		},
		{
			MethodName: "IssueDegree",
			Handler:    _Msg_IssueDegree_Handler,
		},
		{
			MethodName: "UpdateDegreeContract",
			Handler:    _Msg_UpdateDegreeContract_Handler,
		},
		{
			MethodName: "CancelDegreeRequest",
			Handler:    _Msg_CancelDegreeRequest_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/degree/tx.proto",
}
