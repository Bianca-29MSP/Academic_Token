// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: academictoken/degree/query.proto

package degree

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                 = "/academictoken.degree.Query/Params"
	Query_Degree_FullMethodName                 = "/academictoken.degree.Query/Degree"
	Query_DegreeAll_FullMethodName              = "/academictoken.degree.Query/DegreeAll"
	Query_DegreesByStudent_FullMethodName       = "/academictoken.degree.Query/DegreesByStudent"
	Query_DegreesByInstitution_FullMethodName   = "/academictoken.degree.Query/DegreesByInstitution"
	Query_DegreeRequests_FullMethodName         = "/academictoken.degree.Query/DegreeRequests"
	Query_DegreeValidationStatus_FullMethodName = "/academictoken.degree.Query/DegreeValidationStatus"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Degree by index.
	Degree(ctx context.Context, in *QueryGetDegreeRequest, opts ...grpc.CallOption) (*QueryGetDegreeResponse, error)
	// Queries a list of Degree items.
	DegreeAll(ctx context.Context, in *QueryAllDegreeRequest, opts ...grpc.CallOption) (*QueryAllDegreeResponse, error)
	// Queries degrees by student ID
	DegreesByStudent(ctx context.Context, in *QueryDegreesByStudentRequest, opts ...grpc.CallOption) (*QueryDegreesByStudentResponse, error)
	// Queries degrees by institution ID
	DegreesByInstitution(ctx context.Context, in *QueryDegreesByInstitutionRequest, opts ...grpc.CallOption) (*QueryDegreesByInstitutionResponse, error)
	// Queries degree requests (pending degrees)
	DegreeRequests(ctx context.Context, in *QueryDegreeRequestsRequest, opts ...grpc.CallOption) (*QueryDegreeRequestsResponse, error)
	// Queries degree validation status
	DegreeValidationStatus(ctx context.Context, in *QueryDegreeValidationStatusRequest, opts ...grpc.CallOption) (*QueryDegreeValidationStatusResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Degree(ctx context.Context, in *QueryGetDegreeRequest, opts ...grpc.CallOption) (*QueryGetDegreeResponse, error) {
	out := new(QueryGetDegreeResponse)
	err := c.cc.Invoke(ctx, Query_Degree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreeAll(ctx context.Context, in *QueryAllDegreeRequest, opts ...grpc.CallOption) (*QueryAllDegreeResponse, error) {
	out := new(QueryAllDegreeResponse)
	err := c.cc.Invoke(ctx, Query_DegreeAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreesByStudent(ctx context.Context, in *QueryDegreesByStudentRequest, opts ...grpc.CallOption) (*QueryDegreesByStudentResponse, error) {
	out := new(QueryDegreesByStudentResponse)
	err := c.cc.Invoke(ctx, Query_DegreesByStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreesByInstitution(ctx context.Context, in *QueryDegreesByInstitutionRequest, opts ...grpc.CallOption) (*QueryDegreesByInstitutionResponse, error) {
	out := new(QueryDegreesByInstitutionResponse)
	err := c.cc.Invoke(ctx, Query_DegreesByInstitution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreeRequests(ctx context.Context, in *QueryDegreeRequestsRequest, opts ...grpc.CallOption) (*QueryDegreeRequestsResponse, error) {
	out := new(QueryDegreeRequestsResponse)
	err := c.cc.Invoke(ctx, Query_DegreeRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DegreeValidationStatus(ctx context.Context, in *QueryDegreeValidationStatusRequest, opts ...grpc.CallOption) (*QueryDegreeValidationStatusResponse, error) {
	out := new(QueryDegreeValidationStatusResponse)
	err := c.cc.Invoke(ctx, Query_DegreeValidationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Degree by index.
	Degree(context.Context, *QueryGetDegreeRequest) (*QueryGetDegreeResponse, error)
	// Queries a list of Degree items.
	DegreeAll(context.Context, *QueryAllDegreeRequest) (*QueryAllDegreeResponse, error)
	// Queries degrees by student ID
	DegreesByStudent(context.Context, *QueryDegreesByStudentRequest) (*QueryDegreesByStudentResponse, error)
	// Queries degrees by institution ID
	DegreesByInstitution(context.Context, *QueryDegreesByInstitutionRequest) (*QueryDegreesByInstitutionResponse, error)
	// Queries degree requests (pending degrees)
	DegreeRequests(context.Context, *QueryDegreeRequestsRequest) (*QueryDegreeRequestsResponse, error)
	// Queries degree validation status
	DegreeValidationStatus(context.Context, *QueryDegreeValidationStatusRequest) (*QueryDegreeValidationStatusResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Degree(context.Context, *QueryGetDegreeRequest) (*QueryGetDegreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Degree not implemented")
}
func (UnimplementedQueryServer) DegreeAll(context.Context, *QueryAllDegreeRequest) (*QueryAllDegreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreeAll not implemented")
}
func (UnimplementedQueryServer) DegreesByStudent(context.Context, *QueryDegreesByStudentRequest) (*QueryDegreesByStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreesByStudent not implemented")
}
func (UnimplementedQueryServer) DegreesByInstitution(context.Context, *QueryDegreesByInstitutionRequest) (*QueryDegreesByInstitutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreesByInstitution not implemented")
}
func (UnimplementedQueryServer) DegreeRequests(context.Context, *QueryDegreeRequestsRequest) (*QueryDegreeRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreeRequests not implemented")
}
func (UnimplementedQueryServer) DegreeValidationStatus(context.Context, *QueryDegreeValidationStatusRequest) (*QueryDegreeValidationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DegreeValidationStatus not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Degree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Degree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Degree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Degree(ctx, req.(*QueryGetDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DegreeAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreeAll(ctx, req.(*QueryAllDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreesByStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDegreesByStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreesByStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DegreesByStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreesByStudent(ctx, req.(*QueryDegreesByStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreesByInstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDegreesByInstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreesByInstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DegreesByInstitution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreesByInstitution(ctx, req.(*QueryDegreesByInstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreeRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDegreeRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreeRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DegreeRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreeRequests(ctx, req.(*QueryDegreeRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DegreeValidationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDegreeValidationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DegreeValidationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DegreeValidationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DegreeValidationStatus(ctx, req.(*QueryDegreeValidationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academictoken.degree.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Degree",
			Handler:    _Query_Degree_Handler,
		},
		{
			MethodName: "DegreeAll",
			Handler:    _Query_DegreeAll_Handler,
		},
		{
			MethodName: "DegreesByStudent",
			Handler:    _Query_DegreesByStudent_Handler,
		},
		{
			MethodName: "DegreesByInstitution",
			Handler:    _Query_DegreesByInstitution_Handler,
		},
		{
			MethodName: "DegreeRequests",
			Handler:    _Query_DegreeRequests_Handler,
		},
		{
			MethodName: "DegreeValidationStatus",
			Handler:    _Query_DegreeValidationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "academictoken/degree/query.proto",
}
