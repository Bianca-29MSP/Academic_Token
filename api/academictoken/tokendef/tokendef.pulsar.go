// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package tokendef

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_TokenDefinition                protoreflect.MessageDescriptor
	fd_TokenDefinition_index          protoreflect.FieldDescriptor
	fd_TokenDefinition_tokenDefId     protoreflect.FieldDescriptor
	fd_TokenDefinition_subjectId      protoreflect.FieldDescriptor
	fd_TokenDefinition_institutionId  protoreflect.FieldDescriptor
	fd_TokenDefinition_courseId       protoreflect.FieldDescriptor
	fd_TokenDefinition_tokenName      protoreflect.FieldDescriptor
	fd_TokenDefinition_tokenSymbol    protoreflect.FieldDescriptor
	fd_TokenDefinition_tokenType      protoreflect.FieldDescriptor
	fd_TokenDefinition_isTransferable protoreflect.FieldDescriptor
	fd_TokenDefinition_isBurnable     protoreflect.FieldDescriptor
	fd_TokenDefinition_maxSupply      protoreflect.FieldDescriptor
	fd_TokenDefinition_metadata       protoreflect.FieldDescriptor
	fd_TokenDefinition_contentHash    protoreflect.FieldDescriptor
	fd_TokenDefinition_ipfsLink       protoreflect.FieldDescriptor
	fd_TokenDefinition_creator        protoreflect.FieldDescriptor
	fd_TokenDefinition_createdAt      protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_tokendef_tokendef_proto_init()
	md_TokenDefinition = File_academictoken_tokendef_tokendef_proto.Messages().ByName("TokenDefinition")
	fd_TokenDefinition_index = md_TokenDefinition.Fields().ByName("index")
	fd_TokenDefinition_tokenDefId = md_TokenDefinition.Fields().ByName("tokenDefId")
	fd_TokenDefinition_subjectId = md_TokenDefinition.Fields().ByName("subjectId")
	fd_TokenDefinition_institutionId = md_TokenDefinition.Fields().ByName("institutionId")
	fd_TokenDefinition_courseId = md_TokenDefinition.Fields().ByName("courseId")
	fd_TokenDefinition_tokenName = md_TokenDefinition.Fields().ByName("tokenName")
	fd_TokenDefinition_tokenSymbol = md_TokenDefinition.Fields().ByName("tokenSymbol")
	fd_TokenDefinition_tokenType = md_TokenDefinition.Fields().ByName("tokenType")
	fd_TokenDefinition_isTransferable = md_TokenDefinition.Fields().ByName("isTransferable")
	fd_TokenDefinition_isBurnable = md_TokenDefinition.Fields().ByName("isBurnable")
	fd_TokenDefinition_maxSupply = md_TokenDefinition.Fields().ByName("maxSupply")
	fd_TokenDefinition_metadata = md_TokenDefinition.Fields().ByName("metadata")
	fd_TokenDefinition_contentHash = md_TokenDefinition.Fields().ByName("contentHash")
	fd_TokenDefinition_ipfsLink = md_TokenDefinition.Fields().ByName("ipfsLink")
	fd_TokenDefinition_creator = md_TokenDefinition.Fields().ByName("creator")
	fd_TokenDefinition_createdAt = md_TokenDefinition.Fields().ByName("createdAt")
}

var _ protoreflect.Message = (*fastReflection_TokenDefinition)(nil)

type fastReflection_TokenDefinition TokenDefinition

func (x *TokenDefinition) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TokenDefinition)(x)
}

func (x *TokenDefinition) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_tokendef_tokendef_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TokenDefinition_messageType fastReflection_TokenDefinition_messageType
var _ protoreflect.MessageType = fastReflection_TokenDefinition_messageType{}

type fastReflection_TokenDefinition_messageType struct{}

func (x fastReflection_TokenDefinition_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TokenDefinition)(nil)
}
func (x fastReflection_TokenDefinition_messageType) New() protoreflect.Message {
	return new(fastReflection_TokenDefinition)
}
func (x fastReflection_TokenDefinition_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenDefinition
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TokenDefinition) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenDefinition
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TokenDefinition) Type() protoreflect.MessageType {
	return _fastReflection_TokenDefinition_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TokenDefinition) New() protoreflect.Message {
	return new(fastReflection_TokenDefinition)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TokenDefinition) Interface() protoreflect.ProtoMessage {
	return (*TokenDefinition)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TokenDefinition) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Index != "" {
		value := protoreflect.ValueOfString(x.Index)
		if !f(fd_TokenDefinition_index, value) {
			return
		}
	}
	if x.TokenDefId != "" {
		value := protoreflect.ValueOfString(x.TokenDefId)
		if !f(fd_TokenDefinition_tokenDefId, value) {
			return
		}
	}
	if x.SubjectId != "" {
		value := protoreflect.ValueOfString(x.SubjectId)
		if !f(fd_TokenDefinition_subjectId, value) {
			return
		}
	}
	if x.InstitutionId != "" {
		value := protoreflect.ValueOfString(x.InstitutionId)
		if !f(fd_TokenDefinition_institutionId, value) {
			return
		}
	}
	if x.CourseId != "" {
		value := protoreflect.ValueOfString(x.CourseId)
		if !f(fd_TokenDefinition_courseId, value) {
			return
		}
	}
	if x.TokenName != "" {
		value := protoreflect.ValueOfString(x.TokenName)
		if !f(fd_TokenDefinition_tokenName, value) {
			return
		}
	}
	if x.TokenSymbol != "" {
		value := protoreflect.ValueOfString(x.TokenSymbol)
		if !f(fd_TokenDefinition_tokenSymbol, value) {
			return
		}
	}
	if x.TokenType != "" {
		value := protoreflect.ValueOfString(x.TokenType)
		if !f(fd_TokenDefinition_tokenType, value) {
			return
		}
	}
	if x.IsTransferable != false {
		value := protoreflect.ValueOfBool(x.IsTransferable)
		if !f(fd_TokenDefinition_isTransferable, value) {
			return
		}
	}
	if x.IsBurnable != false {
		value := protoreflect.ValueOfBool(x.IsBurnable)
		if !f(fd_TokenDefinition_isBurnable, value) {
			return
		}
	}
	if x.MaxSupply != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxSupply)
		if !f(fd_TokenDefinition_maxSupply, value) {
			return
		}
	}
	if x.Metadata != nil {
		value := protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
		if !f(fd_TokenDefinition_metadata, value) {
			return
		}
	}
	if x.ContentHash != "" {
		value := protoreflect.ValueOfString(x.ContentHash)
		if !f(fd_TokenDefinition_contentHash, value) {
			return
		}
	}
	if x.IpfsLink != "" {
		value := protoreflect.ValueOfString(x.IpfsLink)
		if !f(fd_TokenDefinition_ipfsLink, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_TokenDefinition_creator, value) {
			return
		}
	}
	if x.CreatedAt != "" {
		value := protoreflect.ValueOfString(x.CreatedAt)
		if !f(fd_TokenDefinition_createdAt, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TokenDefinition) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenDefinition.index":
		return x.Index != ""
	case "academictoken.tokendef.TokenDefinition.tokenDefId":
		return x.TokenDefId != ""
	case "academictoken.tokendef.TokenDefinition.subjectId":
		return x.SubjectId != ""
	case "academictoken.tokendef.TokenDefinition.institutionId":
		return x.InstitutionId != ""
	case "academictoken.tokendef.TokenDefinition.courseId":
		return x.CourseId != ""
	case "academictoken.tokendef.TokenDefinition.tokenName":
		return x.TokenName != ""
	case "academictoken.tokendef.TokenDefinition.tokenSymbol":
		return x.TokenSymbol != ""
	case "academictoken.tokendef.TokenDefinition.tokenType":
		return x.TokenType != ""
	case "academictoken.tokendef.TokenDefinition.isTransferable":
		return x.IsTransferable != false
	case "academictoken.tokendef.TokenDefinition.isBurnable":
		return x.IsBurnable != false
	case "academictoken.tokendef.TokenDefinition.maxSupply":
		return x.MaxSupply != uint64(0)
	case "academictoken.tokendef.TokenDefinition.metadata":
		return x.Metadata != nil
	case "academictoken.tokendef.TokenDefinition.contentHash":
		return x.ContentHash != ""
	case "academictoken.tokendef.TokenDefinition.ipfsLink":
		return x.IpfsLink != ""
	case "academictoken.tokendef.TokenDefinition.creator":
		return x.Creator != ""
	case "academictoken.tokendef.TokenDefinition.createdAt":
		return x.CreatedAt != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenDefinition"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenDefinition does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenDefinition) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenDefinition.index":
		x.Index = ""
	case "academictoken.tokendef.TokenDefinition.tokenDefId":
		x.TokenDefId = ""
	case "academictoken.tokendef.TokenDefinition.subjectId":
		x.SubjectId = ""
	case "academictoken.tokendef.TokenDefinition.institutionId":
		x.InstitutionId = ""
	case "academictoken.tokendef.TokenDefinition.courseId":
		x.CourseId = ""
	case "academictoken.tokendef.TokenDefinition.tokenName":
		x.TokenName = ""
	case "academictoken.tokendef.TokenDefinition.tokenSymbol":
		x.TokenSymbol = ""
	case "academictoken.tokendef.TokenDefinition.tokenType":
		x.TokenType = ""
	case "academictoken.tokendef.TokenDefinition.isTransferable":
		x.IsTransferable = false
	case "academictoken.tokendef.TokenDefinition.isBurnable":
		x.IsBurnable = false
	case "academictoken.tokendef.TokenDefinition.maxSupply":
		x.MaxSupply = uint64(0)
	case "academictoken.tokendef.TokenDefinition.metadata":
		x.Metadata = nil
	case "academictoken.tokendef.TokenDefinition.contentHash":
		x.ContentHash = ""
	case "academictoken.tokendef.TokenDefinition.ipfsLink":
		x.IpfsLink = ""
	case "academictoken.tokendef.TokenDefinition.creator":
		x.Creator = ""
	case "academictoken.tokendef.TokenDefinition.createdAt":
		x.CreatedAt = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenDefinition"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenDefinition does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TokenDefinition) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.tokendef.TokenDefinition.index":
		value := x.Index
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.tokenDefId":
		value := x.TokenDefId
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.subjectId":
		value := x.SubjectId
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.institutionId":
		value := x.InstitutionId
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.courseId":
		value := x.CourseId
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.tokenName":
		value := x.TokenName
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.tokenSymbol":
		value := x.TokenSymbol
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.tokenType":
		value := x.TokenType
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.isTransferable":
		value := x.IsTransferable
		return protoreflect.ValueOfBool(value)
	case "academictoken.tokendef.TokenDefinition.isBurnable":
		value := x.IsBurnable
		return protoreflect.ValueOfBool(value)
	case "academictoken.tokendef.TokenDefinition.maxSupply":
		value := x.MaxSupply
		return protoreflect.ValueOfUint64(value)
	case "academictoken.tokendef.TokenDefinition.metadata":
		value := x.Metadata
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "academictoken.tokendef.TokenDefinition.contentHash":
		value := x.ContentHash
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.ipfsLink":
		value := x.IpfsLink
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenDefinition.createdAt":
		value := x.CreatedAt
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenDefinition"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenDefinition does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenDefinition) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenDefinition.index":
		x.Index = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.tokenDefId":
		x.TokenDefId = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.subjectId":
		x.SubjectId = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.institutionId":
		x.InstitutionId = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.courseId":
		x.CourseId = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.tokenName":
		x.TokenName = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.tokenSymbol":
		x.TokenSymbol = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.tokenType":
		x.TokenType = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.isTransferable":
		x.IsTransferable = value.Bool()
	case "academictoken.tokendef.TokenDefinition.isBurnable":
		x.IsBurnable = value.Bool()
	case "academictoken.tokendef.TokenDefinition.maxSupply":
		x.MaxSupply = value.Uint()
	case "academictoken.tokendef.TokenDefinition.metadata":
		x.Metadata = value.Message().Interface().(*TokenMetadata)
	case "academictoken.tokendef.TokenDefinition.contentHash":
		x.ContentHash = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.ipfsLink":
		x.IpfsLink = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.creator":
		x.Creator = value.Interface().(string)
	case "academictoken.tokendef.TokenDefinition.createdAt":
		x.CreatedAt = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenDefinition"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenDefinition does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenDefinition) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenDefinition.metadata":
		if x.Metadata == nil {
			x.Metadata = new(TokenMetadata)
		}
		return protoreflect.ValueOfMessage(x.Metadata.ProtoReflect())
	case "academictoken.tokendef.TokenDefinition.index":
		panic(fmt.Errorf("field index of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.tokenDefId":
		panic(fmt.Errorf("field tokenDefId of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.subjectId":
		panic(fmt.Errorf("field subjectId of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.institutionId":
		panic(fmt.Errorf("field institutionId of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.courseId":
		panic(fmt.Errorf("field courseId of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.tokenName":
		panic(fmt.Errorf("field tokenName of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.tokenSymbol":
		panic(fmt.Errorf("field tokenSymbol of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.tokenType":
		panic(fmt.Errorf("field tokenType of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.isTransferable":
		panic(fmt.Errorf("field isTransferable of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.isBurnable":
		panic(fmt.Errorf("field isBurnable of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.maxSupply":
		panic(fmt.Errorf("field maxSupply of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.contentHash":
		panic(fmt.Errorf("field contentHash of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.ipfsLink":
		panic(fmt.Errorf("field ipfsLink of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.creator":
		panic(fmt.Errorf("field creator of message academictoken.tokendef.TokenDefinition is not mutable"))
	case "academictoken.tokendef.TokenDefinition.createdAt":
		panic(fmt.Errorf("field createdAt of message academictoken.tokendef.TokenDefinition is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenDefinition"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenDefinition does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TokenDefinition) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenDefinition.index":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.tokenDefId":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.subjectId":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.institutionId":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.courseId":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.tokenName":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.tokenSymbol":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.tokenType":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.isTransferable":
		return protoreflect.ValueOfBool(false)
	case "academictoken.tokendef.TokenDefinition.isBurnable":
		return protoreflect.ValueOfBool(false)
	case "academictoken.tokendef.TokenDefinition.maxSupply":
		return protoreflect.ValueOfUint64(uint64(0))
	case "academictoken.tokendef.TokenDefinition.metadata":
		m := new(TokenMetadata)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "academictoken.tokendef.TokenDefinition.contentHash":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.ipfsLink":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.creator":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenDefinition.createdAt":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenDefinition"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenDefinition does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TokenDefinition) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.tokendef.TokenDefinition", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TokenDefinition) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenDefinition) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TokenDefinition) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TokenDefinition) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TokenDefinition)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Index)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenDefId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SubjectId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InstitutionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CourseId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenName)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenSymbol)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TokenType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsTransferable {
			n += 2
		}
		if x.IsBurnable {
			n += 2
		}
		if x.MaxSupply != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxSupply))
		}
		if x.Metadata != nil {
			l = options.Size(x.Metadata)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ContentHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IpfsLink)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CreatedAt)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TokenDefinition)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.CreatedAt) > 0 {
			i -= len(x.CreatedAt)
			copy(dAtA[i:], x.CreatedAt)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CreatedAt)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.IpfsLink) > 0 {
			i -= len(x.IpfsLink)
			copy(dAtA[i:], x.IpfsLink)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IpfsLink)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.ContentHash) > 0 {
			i -= len(x.ContentHash)
			copy(dAtA[i:], x.ContentHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ContentHash)))
			i--
			dAtA[i] = 0x6a
		}
		if x.Metadata != nil {
			encoded, err := options.Marshal(x.Metadata)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if x.MaxSupply != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxSupply))
			i--
			dAtA[i] = 0x58
		}
		if x.IsBurnable {
			i--
			if x.IsBurnable {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x50
		}
		if x.IsTransferable {
			i--
			if x.IsTransferable {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x48
		}
		if len(x.TokenType) > 0 {
			i -= len(x.TokenType)
			copy(dAtA[i:], x.TokenType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenType)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.TokenSymbol) > 0 {
			i -= len(x.TokenSymbol)
			copy(dAtA[i:], x.TokenSymbol)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenSymbol)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.TokenName) > 0 {
			i -= len(x.TokenName)
			copy(dAtA[i:], x.TokenName)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenName)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.CourseId) > 0 {
			i -= len(x.CourseId)
			copy(dAtA[i:], x.CourseId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CourseId)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.InstitutionId) > 0 {
			i -= len(x.InstitutionId)
			copy(dAtA[i:], x.InstitutionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InstitutionId)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.SubjectId) > 0 {
			i -= len(x.SubjectId)
			copy(dAtA[i:], x.SubjectId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SubjectId)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TokenDefId) > 0 {
			i -= len(x.TokenDefId)
			copy(dAtA[i:], x.TokenDefId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenDefId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Index) > 0 {
			i -= len(x.Index)
			copy(dAtA[i:], x.Index)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Index)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TokenDefinition)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenDefinition: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Index = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenDefId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenDefId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SubjectId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SubjectId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InstitutionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InstitutionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CourseId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenName = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenSymbol = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsTransferable", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsTransferable = bool(v != 0)
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsBurnable", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsBurnable = bool(v != 0)
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
				}
				x.MaxSupply = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxSupply |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Metadata == nil {
					x.Metadata = &TokenMetadata{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Metadata); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ContentHash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ContentHash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IpfsLink", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IpfsLink = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CreatedAt = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_TokenMetadata_3_list)(nil)

type _TokenMetadata_3_list struct {
	list *[]*TokenAttribute
}

func (x *_TokenMetadata_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TokenMetadata_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TokenMetadata_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TokenAttribute)
	(*x.list)[i] = concreteValue
}

func (x *_TokenMetadata_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TokenAttribute)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TokenMetadata_3_list) AppendMutable() protoreflect.Value {
	v := new(TokenAttribute)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TokenMetadata_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TokenMetadata_3_list) NewElement() protoreflect.Value {
	v := new(TokenAttribute)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TokenMetadata_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TokenMetadata             protoreflect.MessageDescriptor
	fd_TokenMetadata_description protoreflect.FieldDescriptor
	fd_TokenMetadata_imageUri    protoreflect.FieldDescriptor
	fd_TokenMetadata_attributes  protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_tokendef_tokendef_proto_init()
	md_TokenMetadata = File_academictoken_tokendef_tokendef_proto.Messages().ByName("TokenMetadata")
	fd_TokenMetadata_description = md_TokenMetadata.Fields().ByName("description")
	fd_TokenMetadata_imageUri = md_TokenMetadata.Fields().ByName("imageUri")
	fd_TokenMetadata_attributes = md_TokenMetadata.Fields().ByName("attributes")
}

var _ protoreflect.Message = (*fastReflection_TokenMetadata)(nil)

type fastReflection_TokenMetadata TokenMetadata

func (x *TokenMetadata) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TokenMetadata)(x)
}

func (x *TokenMetadata) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_tokendef_tokendef_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TokenMetadata_messageType fastReflection_TokenMetadata_messageType
var _ protoreflect.MessageType = fastReflection_TokenMetadata_messageType{}

type fastReflection_TokenMetadata_messageType struct{}

func (x fastReflection_TokenMetadata_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TokenMetadata)(nil)
}
func (x fastReflection_TokenMetadata_messageType) New() protoreflect.Message {
	return new(fastReflection_TokenMetadata)
}
func (x fastReflection_TokenMetadata_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenMetadata
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TokenMetadata) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenMetadata
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TokenMetadata) Type() protoreflect.MessageType {
	return _fastReflection_TokenMetadata_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TokenMetadata) New() protoreflect.Message {
	return new(fastReflection_TokenMetadata)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TokenMetadata) Interface() protoreflect.ProtoMessage {
	return (*TokenMetadata)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TokenMetadata) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_TokenMetadata_description, value) {
			return
		}
	}
	if x.ImageUri != "" {
		value := protoreflect.ValueOfString(x.ImageUri)
		if !f(fd_TokenMetadata_imageUri, value) {
			return
		}
	}
	if len(x.Attributes) != 0 {
		value := protoreflect.ValueOfList(&_TokenMetadata_3_list{list: &x.Attributes})
		if !f(fd_TokenMetadata_attributes, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TokenMetadata) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenMetadata.description":
		return x.Description != ""
	case "academictoken.tokendef.TokenMetadata.imageUri":
		return x.ImageUri != ""
	case "academictoken.tokendef.TokenMetadata.attributes":
		return len(x.Attributes) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenMetadata"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenMetadata does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenMetadata) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenMetadata.description":
		x.Description = ""
	case "academictoken.tokendef.TokenMetadata.imageUri":
		x.ImageUri = ""
	case "academictoken.tokendef.TokenMetadata.attributes":
		x.Attributes = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenMetadata"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenMetadata does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TokenMetadata) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.tokendef.TokenMetadata.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenMetadata.imageUri":
		value := x.ImageUri
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenMetadata.attributes":
		if len(x.Attributes) == 0 {
			return protoreflect.ValueOfList(&_TokenMetadata_3_list{})
		}
		listValue := &_TokenMetadata_3_list{list: &x.Attributes}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenMetadata"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenMetadata does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenMetadata) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenMetadata.description":
		x.Description = value.Interface().(string)
	case "academictoken.tokendef.TokenMetadata.imageUri":
		x.ImageUri = value.Interface().(string)
	case "academictoken.tokendef.TokenMetadata.attributes":
		lv := value.List()
		clv := lv.(*_TokenMetadata_3_list)
		x.Attributes = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenMetadata"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenMetadata does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenMetadata) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenMetadata.attributes":
		if x.Attributes == nil {
			x.Attributes = []*TokenAttribute{}
		}
		value := &_TokenMetadata_3_list{list: &x.Attributes}
		return protoreflect.ValueOfList(value)
	case "academictoken.tokendef.TokenMetadata.description":
		panic(fmt.Errorf("field description of message academictoken.tokendef.TokenMetadata is not mutable"))
	case "academictoken.tokendef.TokenMetadata.imageUri":
		panic(fmt.Errorf("field imageUri of message academictoken.tokendef.TokenMetadata is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenMetadata"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenMetadata does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TokenMetadata) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenMetadata.description":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenMetadata.imageUri":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenMetadata.attributes":
		list := []*TokenAttribute{}
		return protoreflect.ValueOfList(&_TokenMetadata_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenMetadata"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenMetadata does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TokenMetadata) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.tokendef.TokenMetadata", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TokenMetadata) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenMetadata) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TokenMetadata) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TokenMetadata) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TokenMetadata)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ImageUri)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Attributes) > 0 {
			for _, e := range x.Attributes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TokenMetadata)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Attributes) > 0 {
			for iNdEx := len(x.Attributes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Attributes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.ImageUri) > 0 {
			i -= len(x.ImageUri)
			copy(dAtA[i:], x.ImageUri)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ImageUri)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TokenMetadata)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenMetadata: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ImageUri", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ImageUri = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Attributes = append(x.Attributes, &TokenAttribute{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Attributes[len(x.Attributes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TokenAttribute             protoreflect.MessageDescriptor
	fd_TokenAttribute_traitType   protoreflect.FieldDescriptor
	fd_TokenAttribute_displayType protoreflect.FieldDescriptor
	fd_TokenAttribute_isDynamic   protoreflect.FieldDescriptor
)

func init() {
	file_academictoken_tokendef_tokendef_proto_init()
	md_TokenAttribute = File_academictoken_tokendef_tokendef_proto.Messages().ByName("TokenAttribute")
	fd_TokenAttribute_traitType = md_TokenAttribute.Fields().ByName("traitType")
	fd_TokenAttribute_displayType = md_TokenAttribute.Fields().ByName("displayType")
	fd_TokenAttribute_isDynamic = md_TokenAttribute.Fields().ByName("isDynamic")
}

var _ protoreflect.Message = (*fastReflection_TokenAttribute)(nil)

type fastReflection_TokenAttribute TokenAttribute

func (x *TokenAttribute) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TokenAttribute)(x)
}

func (x *TokenAttribute) slowProtoReflect() protoreflect.Message {
	mi := &file_academictoken_tokendef_tokendef_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TokenAttribute_messageType fastReflection_TokenAttribute_messageType
var _ protoreflect.MessageType = fastReflection_TokenAttribute_messageType{}

type fastReflection_TokenAttribute_messageType struct{}

func (x fastReflection_TokenAttribute_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TokenAttribute)(nil)
}
func (x fastReflection_TokenAttribute_messageType) New() protoreflect.Message {
	return new(fastReflection_TokenAttribute)
}
func (x fastReflection_TokenAttribute_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenAttribute
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TokenAttribute) Descriptor() protoreflect.MessageDescriptor {
	return md_TokenAttribute
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TokenAttribute) Type() protoreflect.MessageType {
	return _fastReflection_TokenAttribute_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TokenAttribute) New() protoreflect.Message {
	return new(fastReflection_TokenAttribute)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TokenAttribute) Interface() protoreflect.ProtoMessage {
	return (*TokenAttribute)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TokenAttribute) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TraitType != "" {
		value := protoreflect.ValueOfString(x.TraitType)
		if !f(fd_TokenAttribute_traitType, value) {
			return
		}
	}
	if x.DisplayType != "" {
		value := protoreflect.ValueOfString(x.DisplayType)
		if !f(fd_TokenAttribute_displayType, value) {
			return
		}
	}
	if x.IsDynamic != false {
		value := protoreflect.ValueOfBool(x.IsDynamic)
		if !f(fd_TokenAttribute_isDynamic, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TokenAttribute) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenAttribute.traitType":
		return x.TraitType != ""
	case "academictoken.tokendef.TokenAttribute.displayType":
		return x.DisplayType != ""
	case "academictoken.tokendef.TokenAttribute.isDynamic":
		return x.IsDynamic != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenAttribute"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenAttribute does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenAttribute) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenAttribute.traitType":
		x.TraitType = ""
	case "academictoken.tokendef.TokenAttribute.displayType":
		x.DisplayType = ""
	case "academictoken.tokendef.TokenAttribute.isDynamic":
		x.IsDynamic = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenAttribute"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenAttribute does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TokenAttribute) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "academictoken.tokendef.TokenAttribute.traitType":
		value := x.TraitType
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenAttribute.displayType":
		value := x.DisplayType
		return protoreflect.ValueOfString(value)
	case "academictoken.tokendef.TokenAttribute.isDynamic":
		value := x.IsDynamic
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenAttribute"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenAttribute does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenAttribute) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenAttribute.traitType":
		x.TraitType = value.Interface().(string)
	case "academictoken.tokendef.TokenAttribute.displayType":
		x.DisplayType = value.Interface().(string)
	case "academictoken.tokendef.TokenAttribute.isDynamic":
		x.IsDynamic = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenAttribute"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenAttribute does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenAttribute) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenAttribute.traitType":
		panic(fmt.Errorf("field traitType of message academictoken.tokendef.TokenAttribute is not mutable"))
	case "academictoken.tokendef.TokenAttribute.displayType":
		panic(fmt.Errorf("field displayType of message academictoken.tokendef.TokenAttribute is not mutable"))
	case "academictoken.tokendef.TokenAttribute.isDynamic":
		panic(fmt.Errorf("field isDynamic of message academictoken.tokendef.TokenAttribute is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenAttribute"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenAttribute does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TokenAttribute) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "academictoken.tokendef.TokenAttribute.traitType":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenAttribute.displayType":
		return protoreflect.ValueOfString("")
	case "academictoken.tokendef.TokenAttribute.isDynamic":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: academictoken.tokendef.TokenAttribute"))
		}
		panic(fmt.Errorf("message academictoken.tokendef.TokenAttribute does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TokenAttribute) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in academictoken.tokendef.TokenAttribute", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TokenAttribute) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TokenAttribute) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TokenAttribute) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TokenAttribute) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TokenAttribute)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TraitType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DisplayType)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsDynamic {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TokenAttribute)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsDynamic {
			i--
			if x.IsDynamic {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if len(x.DisplayType) > 0 {
			i -= len(x.DisplayType)
			copy(dAtA[i:], x.DisplayType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DisplayType)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TraitType) > 0 {
			i -= len(x.TraitType)
			copy(dAtA[i:], x.TraitType)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TraitType)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TokenAttribute)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenAttribute: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TokenAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TraitType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TraitType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisplayType", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DisplayType = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsDynamic", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsDynamic = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: academictoken/tokendef/tokendef.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TokenDefinition defines how to tokenize a subject completion
type TokenDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          string         `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`                    // Unique identifier (e.g., "tokendef-1")
	TokenDefId     string         `protobuf:"bytes,2,opt,name=tokenDefId,proto3" json:"tokenDefId,omitempty"`          // TokenDef ID (same as index for now)
	SubjectId      string         `protobuf:"bytes,3,opt,name=subjectId,proto3" json:"subjectId,omitempty"`            // Which subject this tokenizes
	InstitutionId  string         `protobuf:"bytes,4,opt,name=institutionId,proto3" json:"institutionId,omitempty"`    // Reference to institution
	CourseId       string         `protobuf:"bytes,5,opt,name=courseId,proto3" json:"courseId,omitempty"`              // Reference to course
	TokenName      string         `protobuf:"bytes,6,opt,name=tokenName,proto3" json:"tokenName,omitempty"`            // Token name (e.g., "CALC1 Completion Token")
	TokenSymbol    string         `protobuf:"bytes,7,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`        // Token symbol (e.g., "CALC1-TOKEN")
	TokenType      string         `protobuf:"bytes,8,opt,name=tokenType,proto3" json:"tokenType,omitempty"`            // "NFT", "FUNGIBLE", "ACHIEVEMENT"
	IsTransferable bool           `protobuf:"varint,9,opt,name=isTransferable,proto3" json:"isTransferable,omitempty"` // Can tokens be transferred between students?
	IsBurnable     bool           `protobuf:"varint,10,opt,name=isBurnable,proto3" json:"isBurnable,omitempty"`        // Can tokens be burned?
	MaxSupply      uint64         `protobuf:"varint,11,opt,name=maxSupply,proto3" json:"maxSupply,omitempty"`          // Maximum tokens that can be minted (0 = unlimited)
	Metadata       *TokenMetadata `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`             // Token metadata template
	ContentHash    string         `protobuf:"bytes,13,opt,name=contentHash,proto3" json:"contentHash,omitempty"`       // IPFS content hash for integrity (OBRIGATÓRIO)
	IpfsLink       string         `protobuf:"bytes,14,opt,name=ipfsLink,proto3" json:"ipfsLink,omitempty"`             // IPFS link to extended content (OBRIGATÓRIO)
	Creator        string         `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`               // Creator address
	CreatedAt      string         `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`           // Creation timestamp
}

func (x *TokenDefinition) Reset() {
	*x = TokenDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_tokendef_tokendef_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenDefinition) ProtoMessage() {}

// Deprecated: Use TokenDefinition.ProtoReflect.Descriptor instead.
func (*TokenDefinition) Descriptor() ([]byte, []int) {
	return file_academictoken_tokendef_tokendef_proto_rawDescGZIP(), []int{0}
}

func (x *TokenDefinition) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *TokenDefinition) GetTokenDefId() string {
	if x != nil {
		return x.TokenDefId
	}
	return ""
}

func (x *TokenDefinition) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *TokenDefinition) GetInstitutionId() string {
	if x != nil {
		return x.InstitutionId
	}
	return ""
}

func (x *TokenDefinition) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *TokenDefinition) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *TokenDefinition) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *TokenDefinition) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *TokenDefinition) GetIsTransferable() bool {
	if x != nil {
		return x.IsTransferable
	}
	return false
}

func (x *TokenDefinition) GetIsBurnable() bool {
	if x != nil {
		return x.IsBurnable
	}
	return false
}

func (x *TokenDefinition) GetMaxSupply() uint64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *TokenDefinition) GetMetadata() *TokenMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TokenDefinition) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *TokenDefinition) GetIpfsLink() string {
	if x != nil {
		return x.IpfsLink
	}
	return ""
}

func (x *TokenDefinition) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *TokenDefinition) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// TokenMetadata defines metadata for minted tokens
type TokenMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string            `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"` // Token description
	ImageUri    string            `protobuf:"bytes,2,opt,name=imageUri,proto3" json:"imageUri,omitempty"`       // Token image/badge URI
	Attributes  []*TokenAttribute `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`   // Token attributes
}

func (x *TokenMetadata) Reset() {
	*x = TokenMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_tokendef_tokendef_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenMetadata) ProtoMessage() {}

// Deprecated: Use TokenMetadata.ProtoReflect.Descriptor instead.
func (*TokenMetadata) Descriptor() ([]byte, []int) {
	return file_academictoken_tokendef_tokendef_proto_rawDescGZIP(), []int{1}
}

func (x *TokenMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TokenMetadata) GetImageUri() string {
	if x != nil {
		return x.ImageUri
	}
	return ""
}

func (x *TokenMetadata) GetAttributes() []*TokenAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// TokenAttribute represents dynamic attributes for tokens
type TokenAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraitType   string `protobuf:"bytes,1,opt,name=traitType,proto3" json:"traitType,omitempty"`     // Attribute type (e.g., "Grade", "Completion Date")
	DisplayType string `protobuf:"bytes,2,opt,name=displayType,proto3" json:"displayType,omitempty"` // How to display ("text", "number", "date")
	IsDynamic   bool   `protobuf:"varint,3,opt,name=isDynamic,proto3" json:"isDynamic,omitempty"`    // Can this attribute change after minting?
}

func (x *TokenAttribute) Reset() {
	*x = TokenAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_academictoken_tokendef_tokendef_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAttribute) ProtoMessage() {}

// Deprecated: Use TokenAttribute.ProtoReflect.Descriptor instead.
func (*TokenAttribute) Descriptor() ([]byte, []int) {
	return file_academictoken_tokendef_tokendef_proto_rawDescGZIP(), []int{2}
}

func (x *TokenAttribute) GetTraitType() string {
	if x != nil {
		return x.TraitType
	}
	return ""
}

func (x *TokenAttribute) GetDisplayType() string {
	if x != nil {
		return x.DisplayType
	}
	return ""
}

func (x *TokenAttribute) GetIsDynamic() bool {
	if x != nil {
		return x.IsDynamic
	}
	return false
}

var File_academictoken_tokendef_tokendef_proto protoreflect.FileDescriptor

var file_academictoken_tokendef_tokendef_proto_rawDesc = []byte{
	0x0a, 0x25, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65, 0x66, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65, 0x66, 0x1a,
	0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69,
	0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x04, 0x0a, 0x0f, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x66,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x42, 0x75,
	0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x42, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65,
	0x66, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x70, 0x66, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x70, 0x66, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x69, 0x12,
	0x46, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65, 0x66, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x42, 0xce, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x64, 0x65, 0x66, 0x42, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65, 0x66,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x61, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x61, 0x64, 0x65,
	0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65,
	0x66, 0xa2, 0x02, 0x03, 0x41, 0x54, 0x58, 0xaa, 0x02, 0x16, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d,
	0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65, 0x66,
	0xca, 0x02, 0x16, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65, 0x66, 0xe2, 0x02, 0x22, 0x41, 0x63, 0x61, 0x64,
	0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x64,
	0x65, 0x66, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x17, 0x41, 0x63, 0x61, 0x64, 0x65, 0x6d, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3a,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x65, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_academictoken_tokendef_tokendef_proto_rawDescOnce sync.Once
	file_academictoken_tokendef_tokendef_proto_rawDescData = file_academictoken_tokendef_tokendef_proto_rawDesc
)

func file_academictoken_tokendef_tokendef_proto_rawDescGZIP() []byte {
	file_academictoken_tokendef_tokendef_proto_rawDescOnce.Do(func() {
		file_academictoken_tokendef_tokendef_proto_rawDescData = protoimpl.X.CompressGZIP(file_academictoken_tokendef_tokendef_proto_rawDescData)
	})
	return file_academictoken_tokendef_tokendef_proto_rawDescData
}

var file_academictoken_tokendef_tokendef_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_academictoken_tokendef_tokendef_proto_goTypes = []interface{}{
	(*TokenDefinition)(nil), // 0: academictoken.tokendef.TokenDefinition
	(*TokenMetadata)(nil),   // 1: academictoken.tokendef.TokenMetadata
	(*TokenAttribute)(nil),  // 2: academictoken.tokendef.TokenAttribute
}
var file_academictoken_tokendef_tokendef_proto_depIdxs = []int32{
	1, // 0: academictoken.tokendef.TokenDefinition.metadata:type_name -> academictoken.tokendef.TokenMetadata
	2, // 1: academictoken.tokendef.TokenMetadata.attributes:type_name -> academictoken.tokendef.TokenAttribute
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_academictoken_tokendef_tokendef_proto_init() }
func file_academictoken_tokendef_tokendef_proto_init() {
	if File_academictoken_tokendef_tokendef_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_academictoken_tokendef_tokendef_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_tokendef_tokendef_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_academictoken_tokendef_tokendef_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_academictoken_tokendef_tokendef_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_academictoken_tokendef_tokendef_proto_goTypes,
		DependencyIndexes: file_academictoken_tokendef_tokendef_proto_depIdxs,
		MessageInfos:      file_academictoken_tokendef_tokendef_proto_msgTypes,
	}.Build()
	File_academictoken_tokendef_tokendef_proto = out.File
	file_academictoken_tokendef_tokendef_proto_rawDesc = nil
	file_academictoken_tokendef_tokendef_proto_goTypes = nil
	file_academictoken_tokendef_tokendef_proto_depIdxs = nil
}
